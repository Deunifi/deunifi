/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface FlashVaultDaiPairInterface extends ethers.utils.Interface {
  functions: {
    "ADDRESSES_PROVIDER()": FunctionFragment;
    "LENDING_POOL()": FunctionFragment;
    "approveSpenderForToken(address,address,uint256)": FunctionFragment;
    "executeOperation(address[],uint256[],uint256[],address,bytes)": FunctionFragment;
    "lockGemAndDraw(address,address,address,address,address,address,uint256,uint256,uint256,bool)": FunctionFragment;
    "paybackDebt(tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ADDRESSES_PROVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LENDING_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveSpenderForToken",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeOperation",
    values: [string[], BigNumberish[], BigNumberish[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockGemAndDraw",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "paybackDebt",
    values: [
      {
        debtToken: string;
        amountFromSenderInDebtToken: BigNumberish;
        amountFromLoanInDebtToken: BigNumberish;
        collateralToken: string;
        collateralAmountToFree: BigNumberish;
        pooledTokensToRemove: BigNumberish;
        debtToCoverWithToken0: BigNumberish;
        debtToCoverWithToken1: BigNumberish;
        pathToken0ToDebtToken: string[];
        pathToken1ToDebtToken: string[];
        minToken0ToFree: BigNumberish;
        minToken1ToFree: BigNumberish;
        a13: BigNumberish;
        a14: BigNumberish;
        a15: BigNumberish;
        a16: BigNumberish;
        a17: BigNumberish;
        a18: BigNumberish;
        a19: BigNumberish;
        a20: BigNumberish;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "ADDRESSES_PROVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LENDING_POOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveSpenderForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockGemAndDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paybackDebt",
    data: BytesLike
  ): Result;

  events: {};
}

export class FlashVaultDaiPair extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FlashVaultDaiPairInterface;

  functions: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<[string]>;

    "ADDRESSES_PROVIDER()"(overrides?: CallOverrides): Promise<[string]>;

    LENDING_POOL(overrides?: CallOverrides): Promise<[string]>;

    "LENDING_POOL()"(overrides?: CallOverrides): Promise<[string]>;

    approveSpenderForToken(
      tokenAddress: string,
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approveSpenderForToken(address,address,uint256)"(
      tokenAddress: string,
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeOperation(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "executeOperation(address[],uint256[],uint256[],address,bytes)"(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockGemAndDraw(
      dsProxy: string,
      dsProxyActions: string,
      manager: string,
      jug: string,
      gemJoin: string,
      daiJoin: string,
      cdpId: BigNumberish,
      collateralToLock: BigNumberish,
      daiToBorrow: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockGemAndDraw(address,address,address,address,address,address,uint256,uint256,uint256,bool)"(
      dsProxy: string,
      dsProxyActions: string,
      manager: string,
      jug: string,
      gemJoin: string,
      daiJoin: string,
      cdpId: BigNumberish,
      collateralToLock: BigNumberish,
      daiToBorrow: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paybackDebt(
      parameters: {
        debtToken: string;
        amountFromSenderInDebtToken: BigNumberish;
        amountFromLoanInDebtToken: BigNumberish;
        collateralToken: string;
        collateralAmountToFree: BigNumberish;
        pooledTokensToRemove: BigNumberish;
        debtToCoverWithToken0: BigNumberish;
        debtToCoverWithToken1: BigNumberish;
        pathToken0ToDebtToken: string[];
        pathToken1ToDebtToken: string[];
        minToken0ToFree: BigNumberish;
        minToken1ToFree: BigNumberish;
        a13: BigNumberish;
        a14: BigNumberish;
        a15: BigNumberish;
        a16: BigNumberish;
        a17: BigNumberish;
        a18: BigNumberish;
        a19: BigNumberish;
        a20: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "paybackDebt((address,uint256,uint256,address,uint256,uint256,uint256,uint256,address[],address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      parameters: {
        debtToken: string;
        amountFromSenderInDebtToken: BigNumberish;
        amountFromLoanInDebtToken: BigNumberish;
        collateralToken: string;
        collateralAmountToFree: BigNumberish;
        pooledTokensToRemove: BigNumberish;
        debtToCoverWithToken0: BigNumberish;
        debtToCoverWithToken1: BigNumberish;
        pathToken0ToDebtToken: string[];
        pathToken1ToDebtToken: string[];
        minToken0ToFree: BigNumberish;
        minToken1ToFree: BigNumberish;
        a13: BigNumberish;
        a14: BigNumberish;
        a15: BigNumberish;
        a16: BigNumberish;
        a17: BigNumberish;
        a18: BigNumberish;
        a19: BigNumberish;
        a20: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<string>;

  "ADDRESSES_PROVIDER()"(overrides?: CallOverrides): Promise<string>;

  LENDING_POOL(overrides?: CallOverrides): Promise<string>;

  "LENDING_POOL()"(overrides?: CallOverrides): Promise<string>;

  approveSpenderForToken(
    tokenAddress: string,
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approveSpenderForToken(address,address,uint256)"(
    tokenAddress: string,
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeOperation(
    assets: string[],
    amounts: BigNumberish[],
    premiums: BigNumberish[],
    initiator: string,
    params: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "executeOperation(address[],uint256[],uint256[],address,bytes)"(
    assets: string[],
    amounts: BigNumberish[],
    premiums: BigNumberish[],
    initiator: string,
    params: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockGemAndDraw(
    dsProxy: string,
    dsProxyActions: string,
    manager: string,
    jug: string,
    gemJoin: string,
    daiJoin: string,
    cdpId: BigNumberish,
    collateralToLock: BigNumberish,
    daiToBorrow: BigNumberish,
    transferFrom: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockGemAndDraw(address,address,address,address,address,address,uint256,uint256,uint256,bool)"(
    dsProxy: string,
    dsProxyActions: string,
    manager: string,
    jug: string,
    gemJoin: string,
    daiJoin: string,
    cdpId: BigNumberish,
    collateralToLock: BigNumberish,
    daiToBorrow: BigNumberish,
    transferFrom: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paybackDebt(
    parameters: {
      debtToken: string;
      amountFromSenderInDebtToken: BigNumberish;
      amountFromLoanInDebtToken: BigNumberish;
      collateralToken: string;
      collateralAmountToFree: BigNumberish;
      pooledTokensToRemove: BigNumberish;
      debtToCoverWithToken0: BigNumberish;
      debtToCoverWithToken1: BigNumberish;
      pathToken0ToDebtToken: string[];
      pathToken1ToDebtToken: string[];
      minToken0ToFree: BigNumberish;
      minToken1ToFree: BigNumberish;
      a13: BigNumberish;
      a14: BigNumberish;
      a15: BigNumberish;
      a16: BigNumberish;
      a17: BigNumberish;
      a18: BigNumberish;
      a19: BigNumberish;
      a20: BigNumberish;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "paybackDebt((address,uint256,uint256,address,uint256,uint256,uint256,uint256,address[],address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
    parameters: {
      debtToken: string;
      amountFromSenderInDebtToken: BigNumberish;
      amountFromLoanInDebtToken: BigNumberish;
      collateralToken: string;
      collateralAmountToFree: BigNumberish;
      pooledTokensToRemove: BigNumberish;
      debtToCoverWithToken0: BigNumberish;
      debtToCoverWithToken1: BigNumberish;
      pathToken0ToDebtToken: string[];
      pathToken1ToDebtToken: string[];
      minToken0ToFree: BigNumberish;
      minToken1ToFree: BigNumberish;
      a13: BigNumberish;
      a14: BigNumberish;
      a15: BigNumberish;
      a16: BigNumberish;
      a17: BigNumberish;
      a18: BigNumberish;
      a19: BigNumberish;
      a20: BigNumberish;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<string>;

    "ADDRESSES_PROVIDER()"(overrides?: CallOverrides): Promise<string>;

    LENDING_POOL(overrides?: CallOverrides): Promise<string>;

    "LENDING_POOL()"(overrides?: CallOverrides): Promise<string>;

    approveSpenderForToken(
      tokenAddress: string,
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approveSpenderForToken(address,address,uint256)"(
      tokenAddress: string,
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executeOperation(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "executeOperation(address[],uint256[],uint256[],address,bytes)"(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockGemAndDraw(
      dsProxy: string,
      dsProxyActions: string,
      manager: string,
      jug: string,
      gemJoin: string,
      daiJoin: string,
      cdpId: BigNumberish,
      collateralToLock: BigNumberish,
      daiToBorrow: BigNumberish,
      transferFrom: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "lockGemAndDraw(address,address,address,address,address,address,uint256,uint256,uint256,bool)"(
      dsProxy: string,
      dsProxyActions: string,
      manager: string,
      jug: string,
      gemJoin: string,
      daiJoin: string,
      cdpId: BigNumberish,
      collateralToLock: BigNumberish,
      daiToBorrow: BigNumberish,
      transferFrom: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    paybackDebt(
      parameters: {
        debtToken: string;
        amountFromSenderInDebtToken: BigNumberish;
        amountFromLoanInDebtToken: BigNumberish;
        collateralToken: string;
        collateralAmountToFree: BigNumberish;
        pooledTokensToRemove: BigNumberish;
        debtToCoverWithToken0: BigNumberish;
        debtToCoverWithToken1: BigNumberish;
        pathToken0ToDebtToken: string[];
        pathToken1ToDebtToken: string[];
        minToken0ToFree: BigNumberish;
        minToken1ToFree: BigNumberish;
        a13: BigNumberish;
        a14: BigNumberish;
        a15: BigNumberish;
        a16: BigNumberish;
        a17: BigNumberish;
        a18: BigNumberish;
        a19: BigNumberish;
        a20: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { freeToken0: BigNumber; freeToken1: BigNumber }
    >;

    "paybackDebt((address,uint256,uint256,address,uint256,uint256,uint256,uint256,address[],address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      parameters: {
        debtToken: string;
        amountFromSenderInDebtToken: BigNumberish;
        amountFromLoanInDebtToken: BigNumberish;
        collateralToken: string;
        collateralAmountToFree: BigNumberish;
        pooledTokensToRemove: BigNumberish;
        debtToCoverWithToken0: BigNumberish;
        debtToCoverWithToken1: BigNumberish;
        pathToken0ToDebtToken: string[];
        pathToken1ToDebtToken: string[];
        minToken0ToFree: BigNumberish;
        minToken1ToFree: BigNumberish;
        a13: BigNumberish;
        a14: BigNumberish;
        a15: BigNumberish;
        a16: BigNumberish;
        a17: BigNumberish;
        a18: BigNumberish;
        a19: BigNumberish;
        a20: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { freeToken0: BigNumber; freeToken1: BigNumber }
    >;
  };

  filters: {};

  estimateGas: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    "ADDRESSES_PROVIDER()"(overrides?: CallOverrides): Promise<BigNumber>;

    LENDING_POOL(overrides?: CallOverrides): Promise<BigNumber>;

    "LENDING_POOL()"(overrides?: CallOverrides): Promise<BigNumber>;

    approveSpenderForToken(
      tokenAddress: string,
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approveSpenderForToken(address,address,uint256)"(
      tokenAddress: string,
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeOperation(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "executeOperation(address[],uint256[],uint256[],address,bytes)"(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockGemAndDraw(
      dsProxy: string,
      dsProxyActions: string,
      manager: string,
      jug: string,
      gemJoin: string,
      daiJoin: string,
      cdpId: BigNumberish,
      collateralToLock: BigNumberish,
      daiToBorrow: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockGemAndDraw(address,address,address,address,address,address,uint256,uint256,uint256,bool)"(
      dsProxy: string,
      dsProxyActions: string,
      manager: string,
      jug: string,
      gemJoin: string,
      daiJoin: string,
      cdpId: BigNumberish,
      collateralToLock: BigNumberish,
      daiToBorrow: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paybackDebt(
      parameters: {
        debtToken: string;
        amountFromSenderInDebtToken: BigNumberish;
        amountFromLoanInDebtToken: BigNumberish;
        collateralToken: string;
        collateralAmountToFree: BigNumberish;
        pooledTokensToRemove: BigNumberish;
        debtToCoverWithToken0: BigNumberish;
        debtToCoverWithToken1: BigNumberish;
        pathToken0ToDebtToken: string[];
        pathToken1ToDebtToken: string[];
        minToken0ToFree: BigNumberish;
        minToken1ToFree: BigNumberish;
        a13: BigNumberish;
        a14: BigNumberish;
        a15: BigNumberish;
        a16: BigNumberish;
        a17: BigNumberish;
        a18: BigNumberish;
        a19: BigNumberish;
        a20: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "paybackDebt((address,uint256,uint256,address,uint256,uint256,uint256,uint256,address[],address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      parameters: {
        debtToken: string;
        amountFromSenderInDebtToken: BigNumberish;
        amountFromLoanInDebtToken: BigNumberish;
        collateralToken: string;
        collateralAmountToFree: BigNumberish;
        pooledTokensToRemove: BigNumberish;
        debtToCoverWithToken0: BigNumberish;
        debtToCoverWithToken1: BigNumberish;
        pathToken0ToDebtToken: string[];
        pathToken1ToDebtToken: string[];
        minToken0ToFree: BigNumberish;
        minToken1ToFree: BigNumberish;
        a13: BigNumberish;
        a14: BigNumberish;
        a15: BigNumberish;
        a16: BigNumberish;
        a17: BigNumberish;
        a18: BigNumberish;
        a19: BigNumberish;
        a20: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADDRESSES_PROVIDER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ADDRESSES_PROVIDER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LENDING_POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "LENDING_POOL()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approveSpenderForToken(
      tokenAddress: string,
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approveSpenderForToken(address,address,uint256)"(
      tokenAddress: string,
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeOperation(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "executeOperation(address[],uint256[],uint256[],address,bytes)"(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockGemAndDraw(
      dsProxy: string,
      dsProxyActions: string,
      manager: string,
      jug: string,
      gemJoin: string,
      daiJoin: string,
      cdpId: BigNumberish,
      collateralToLock: BigNumberish,
      daiToBorrow: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockGemAndDraw(address,address,address,address,address,address,uint256,uint256,uint256,bool)"(
      dsProxy: string,
      dsProxyActions: string,
      manager: string,
      jug: string,
      gemJoin: string,
      daiJoin: string,
      cdpId: BigNumberish,
      collateralToLock: BigNumberish,
      daiToBorrow: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paybackDebt(
      parameters: {
        debtToken: string;
        amountFromSenderInDebtToken: BigNumberish;
        amountFromLoanInDebtToken: BigNumberish;
        collateralToken: string;
        collateralAmountToFree: BigNumberish;
        pooledTokensToRemove: BigNumberish;
        debtToCoverWithToken0: BigNumberish;
        debtToCoverWithToken1: BigNumberish;
        pathToken0ToDebtToken: string[];
        pathToken1ToDebtToken: string[];
        minToken0ToFree: BigNumberish;
        minToken1ToFree: BigNumberish;
        a13: BigNumberish;
        a14: BigNumberish;
        a15: BigNumberish;
        a16: BigNumberish;
        a17: BigNumberish;
        a18: BigNumberish;
        a19: BigNumberish;
        a20: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "paybackDebt((address,uint256,uint256,address,uint256,uint256,uint256,uint256,address[],address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      parameters: {
        debtToken: string;
        amountFromSenderInDebtToken: BigNumberish;
        amountFromLoanInDebtToken: BigNumberish;
        collateralToken: string;
        collateralAmountToFree: BigNumberish;
        pooledTokensToRemove: BigNumberish;
        debtToCoverWithToken0: BigNumberish;
        debtToCoverWithToken1: BigNumberish;
        pathToken0ToDebtToken: string[];
        pathToken1ToDebtToken: string[];
        minToken0ToFree: BigNumberish;
        minToken1ToFree: BigNumberish;
        a13: BigNumberish;
        a14: BigNumberish;
        a15: BigNumberish;
        a16: BigNumberish;
        a17: BigNumberish;
        a18: BigNumberish;
        a19: BigNumberish;
        a20: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
