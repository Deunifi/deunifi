/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RemovePositionInterface extends ethers.utils.Interface {
  functions: {
    "ADDRESSES_PROVIDER()": FunctionFragment;
    "LENDING_POOL()": FunctionFragment;
    "executeOperation(address[],uint256[],uint256[],address,bytes)": FunctionFragment;
    "flashLoanFromDSProxy(address,address,address[],uint256[],address,address[],uint256[],uint256[],bytes)": FunctionFragment;
    "paybackDebt(tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ADDRESSES_PROVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LENDING_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeOperation",
    values: [string[], BigNumberish[], BigNumberish[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoanFromDSProxy",
    values: [
      string,
      string,
      string[],
      BigNumberish[],
      string,
      string[],
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "paybackDebt",
    values: [
      {
        sender: string;
        debtToken: string;
        debtToPay: BigNumberish;
        amountFromSenderInDebtToken: BigNumberish;
        amountFromLoanInDebtToken: BigNumberish;
        tokenA: string;
        tokenB: string;
        pairToken: string;
        collateralAmountToFree: BigNumberish;
        collateralAmountToUseToPayDebt: BigNumberish;
        debtToCoverWithTokenA: BigNumberish;
        debtToCoverWithTokenB: BigNumberish;
        pathTokenAToDebtToken: string[];
        pathTokenBToDebtToken: string[];
        minTokenAToRecive: BigNumberish;
        minTokenBToRecive: BigNumberish;
        loanFee: BigNumberish;
        deadline: BigNumberish;
        dsProxy: string;
        dsProxyActions: string;
        manager: string;
        gemJoin: string;
        daiJoin: string;
        cdp: BigNumberish;
        router02: string;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "ADDRESSES_PROVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LENDING_POOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashLoanFromDSProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paybackDebt",
    data: BytesLike
  ): Result;

  events: {};
}

export class RemovePosition extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RemovePositionInterface;

  functions: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<[string]>;

    "ADDRESSES_PROVIDER()"(overrides?: CallOverrides): Promise<[string]>;

    LENDING_POOL(overrides?: CallOverrides): Promise<[string]>;

    "LENDING_POOL()"(overrides?: CallOverrides): Promise<[string]>;

    executeOperation(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "executeOperation(address[],uint256[],uint256[],address,bytes)"(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flashLoanFromDSProxy(
      owner: string,
      target: string,
      ownerTokens: string[],
      ownerAmounts: BigNumberish[],
      lendingPool: string,
      loanTokens: string[],
      loanAmounts: BigNumberish[],
      modes: BigNumberish[],
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "flashLoanFromDSProxy(address,address,address[],uint256[],address,address[],uint256[],uint256[],bytes)"(
      owner: string,
      target: string,
      ownerTokens: string[],
      ownerAmounts: BigNumberish[],
      lendingPool: string,
      loanTokens: string[],
      loanAmounts: BigNumberish[],
      modes: BigNumberish[],
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paybackDebt(
      parameters: {
        sender: string;
        debtToken: string;
        debtToPay: BigNumberish;
        amountFromSenderInDebtToken: BigNumberish;
        amountFromLoanInDebtToken: BigNumberish;
        tokenA: string;
        tokenB: string;
        pairToken: string;
        collateralAmountToFree: BigNumberish;
        collateralAmountToUseToPayDebt: BigNumberish;
        debtToCoverWithTokenA: BigNumberish;
        debtToCoverWithTokenB: BigNumberish;
        pathTokenAToDebtToken: string[];
        pathTokenBToDebtToken: string[];
        minTokenAToRecive: BigNumberish;
        minTokenBToRecive: BigNumberish;
        loanFee: BigNumberish;
        deadline: BigNumberish;
        dsProxy: string;
        dsProxyActions: string;
        manager: string;
        gemJoin: string;
        daiJoin: string;
        cdp: BigNumberish;
        router02: string;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "paybackDebt((address,address,uint256,uint256,uint256,address,address,address,uint256,uint256,uint256,uint256,address[],address[],uint256,uint256,uint256,uint256,address,address,address,address,address,uint256,address))"(
      parameters: {
        sender: string;
        debtToken: string;
        debtToPay: BigNumberish;
        amountFromSenderInDebtToken: BigNumberish;
        amountFromLoanInDebtToken: BigNumberish;
        tokenA: string;
        tokenB: string;
        pairToken: string;
        collateralAmountToFree: BigNumberish;
        collateralAmountToUseToPayDebt: BigNumberish;
        debtToCoverWithTokenA: BigNumberish;
        debtToCoverWithTokenB: BigNumberish;
        pathTokenAToDebtToken: string[];
        pathTokenBToDebtToken: string[];
        minTokenAToRecive: BigNumberish;
        minTokenBToRecive: BigNumberish;
        loanFee: BigNumberish;
        deadline: BigNumberish;
        dsProxy: string;
        dsProxyActions: string;
        manager: string;
        gemJoin: string;
        daiJoin: string;
        cdp: BigNumberish;
        router02: string;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<string>;

  "ADDRESSES_PROVIDER()"(overrides?: CallOverrides): Promise<string>;

  LENDING_POOL(overrides?: CallOverrides): Promise<string>;

  "LENDING_POOL()"(overrides?: CallOverrides): Promise<string>;

  executeOperation(
    assets: string[],
    amounts: BigNumberish[],
    premiums: BigNumberish[],
    initiator: string,
    params: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "executeOperation(address[],uint256[],uint256[],address,bytes)"(
    assets: string[],
    amounts: BigNumberish[],
    premiums: BigNumberish[],
    initiator: string,
    params: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flashLoanFromDSProxy(
    owner: string,
    target: string,
    ownerTokens: string[],
    ownerAmounts: BigNumberish[],
    lendingPool: string,
    loanTokens: string[],
    loanAmounts: BigNumberish[],
    modes: BigNumberish[],
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "flashLoanFromDSProxy(address,address,address[],uint256[],address,address[],uint256[],uint256[],bytes)"(
    owner: string,
    target: string,
    ownerTokens: string[],
    ownerAmounts: BigNumberish[],
    lendingPool: string,
    loanTokens: string[],
    loanAmounts: BigNumberish[],
    modes: BigNumberish[],
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paybackDebt(
    parameters: {
      sender: string;
      debtToken: string;
      debtToPay: BigNumberish;
      amountFromSenderInDebtToken: BigNumberish;
      amountFromLoanInDebtToken: BigNumberish;
      tokenA: string;
      tokenB: string;
      pairToken: string;
      collateralAmountToFree: BigNumberish;
      collateralAmountToUseToPayDebt: BigNumberish;
      debtToCoverWithTokenA: BigNumberish;
      debtToCoverWithTokenB: BigNumberish;
      pathTokenAToDebtToken: string[];
      pathTokenBToDebtToken: string[];
      minTokenAToRecive: BigNumberish;
      minTokenBToRecive: BigNumberish;
      loanFee: BigNumberish;
      deadline: BigNumberish;
      dsProxy: string;
      dsProxyActions: string;
      manager: string;
      gemJoin: string;
      daiJoin: string;
      cdp: BigNumberish;
      router02: string;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "paybackDebt((address,address,uint256,uint256,uint256,address,address,address,uint256,uint256,uint256,uint256,address[],address[],uint256,uint256,uint256,uint256,address,address,address,address,address,uint256,address))"(
    parameters: {
      sender: string;
      debtToken: string;
      debtToPay: BigNumberish;
      amountFromSenderInDebtToken: BigNumberish;
      amountFromLoanInDebtToken: BigNumberish;
      tokenA: string;
      tokenB: string;
      pairToken: string;
      collateralAmountToFree: BigNumberish;
      collateralAmountToUseToPayDebt: BigNumberish;
      debtToCoverWithTokenA: BigNumberish;
      debtToCoverWithTokenB: BigNumberish;
      pathTokenAToDebtToken: string[];
      pathTokenBToDebtToken: string[];
      minTokenAToRecive: BigNumberish;
      minTokenBToRecive: BigNumberish;
      loanFee: BigNumberish;
      deadline: BigNumberish;
      dsProxy: string;
      dsProxyActions: string;
      manager: string;
      gemJoin: string;
      daiJoin: string;
      cdp: BigNumberish;
      router02: string;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<string>;

    "ADDRESSES_PROVIDER()"(overrides?: CallOverrides): Promise<string>;

    LENDING_POOL(overrides?: CallOverrides): Promise<string>;

    "LENDING_POOL()"(overrides?: CallOverrides): Promise<string>;

    executeOperation(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "executeOperation(address[],uint256[],uint256[],address,bytes)"(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    flashLoanFromDSProxy(
      owner: string,
      target: string,
      ownerTokens: string[],
      ownerAmounts: BigNumberish[],
      lendingPool: string,
      loanTokens: string[],
      loanAmounts: BigNumberish[],
      modes: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "flashLoanFromDSProxy(address,address,address[],uint256[],address,address[],uint256[],uint256[],bytes)"(
      owner: string,
      target: string,
      ownerTokens: string[],
      ownerAmounts: BigNumberish[],
      lendingPool: string,
      loanTokens: string[],
      loanAmounts: BigNumberish[],
      modes: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    paybackDebt(
      parameters: {
        sender: string;
        debtToken: string;
        debtToPay: BigNumberish;
        amountFromSenderInDebtToken: BigNumberish;
        amountFromLoanInDebtToken: BigNumberish;
        tokenA: string;
        tokenB: string;
        pairToken: string;
        collateralAmountToFree: BigNumberish;
        collateralAmountToUseToPayDebt: BigNumberish;
        debtToCoverWithTokenA: BigNumberish;
        debtToCoverWithTokenB: BigNumberish;
        pathTokenAToDebtToken: string[];
        pathTokenBToDebtToken: string[];
        minTokenAToRecive: BigNumberish;
        minTokenBToRecive: BigNumberish;
        loanFee: BigNumberish;
        deadline: BigNumberish;
        dsProxy: string;
        dsProxyActions: string;
        manager: string;
        gemJoin: string;
        daiJoin: string;
        cdp: BigNumberish;
        router02: string;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        freeTokenA: BigNumber;
        freeTokenB: BigNumber;
        freePairToken: BigNumber;
      }
    >;

    "paybackDebt((address,address,uint256,uint256,uint256,address,address,address,uint256,uint256,uint256,uint256,address[],address[],uint256,uint256,uint256,uint256,address,address,address,address,address,uint256,address))"(
      parameters: {
        sender: string;
        debtToken: string;
        debtToPay: BigNumberish;
        amountFromSenderInDebtToken: BigNumberish;
        amountFromLoanInDebtToken: BigNumberish;
        tokenA: string;
        tokenB: string;
        pairToken: string;
        collateralAmountToFree: BigNumberish;
        collateralAmountToUseToPayDebt: BigNumberish;
        debtToCoverWithTokenA: BigNumberish;
        debtToCoverWithTokenB: BigNumberish;
        pathTokenAToDebtToken: string[];
        pathTokenBToDebtToken: string[];
        minTokenAToRecive: BigNumberish;
        minTokenBToRecive: BigNumberish;
        loanFee: BigNumberish;
        deadline: BigNumberish;
        dsProxy: string;
        dsProxyActions: string;
        manager: string;
        gemJoin: string;
        daiJoin: string;
        cdp: BigNumberish;
        router02: string;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        freeTokenA: BigNumber;
        freeTokenB: BigNumber;
        freePairToken: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    "ADDRESSES_PROVIDER()"(overrides?: CallOverrides): Promise<BigNumber>;

    LENDING_POOL(overrides?: CallOverrides): Promise<BigNumber>;

    "LENDING_POOL()"(overrides?: CallOverrides): Promise<BigNumber>;

    executeOperation(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "executeOperation(address[],uint256[],uint256[],address,bytes)"(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flashLoanFromDSProxy(
      owner: string,
      target: string,
      ownerTokens: string[],
      ownerAmounts: BigNumberish[],
      lendingPool: string,
      loanTokens: string[],
      loanAmounts: BigNumberish[],
      modes: BigNumberish[],
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "flashLoanFromDSProxy(address,address,address[],uint256[],address,address[],uint256[],uint256[],bytes)"(
      owner: string,
      target: string,
      ownerTokens: string[],
      ownerAmounts: BigNumberish[],
      lendingPool: string,
      loanTokens: string[],
      loanAmounts: BigNumberish[],
      modes: BigNumberish[],
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paybackDebt(
      parameters: {
        sender: string;
        debtToken: string;
        debtToPay: BigNumberish;
        amountFromSenderInDebtToken: BigNumberish;
        amountFromLoanInDebtToken: BigNumberish;
        tokenA: string;
        tokenB: string;
        pairToken: string;
        collateralAmountToFree: BigNumberish;
        collateralAmountToUseToPayDebt: BigNumberish;
        debtToCoverWithTokenA: BigNumberish;
        debtToCoverWithTokenB: BigNumberish;
        pathTokenAToDebtToken: string[];
        pathTokenBToDebtToken: string[];
        minTokenAToRecive: BigNumberish;
        minTokenBToRecive: BigNumberish;
        loanFee: BigNumberish;
        deadline: BigNumberish;
        dsProxy: string;
        dsProxyActions: string;
        manager: string;
        gemJoin: string;
        daiJoin: string;
        cdp: BigNumberish;
        router02: string;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "paybackDebt((address,address,uint256,uint256,uint256,address,address,address,uint256,uint256,uint256,uint256,address[],address[],uint256,uint256,uint256,uint256,address,address,address,address,address,uint256,address))"(
      parameters: {
        sender: string;
        debtToken: string;
        debtToPay: BigNumberish;
        amountFromSenderInDebtToken: BigNumberish;
        amountFromLoanInDebtToken: BigNumberish;
        tokenA: string;
        tokenB: string;
        pairToken: string;
        collateralAmountToFree: BigNumberish;
        collateralAmountToUseToPayDebt: BigNumberish;
        debtToCoverWithTokenA: BigNumberish;
        debtToCoverWithTokenB: BigNumberish;
        pathTokenAToDebtToken: string[];
        pathTokenBToDebtToken: string[];
        minTokenAToRecive: BigNumberish;
        minTokenBToRecive: BigNumberish;
        loanFee: BigNumberish;
        deadline: BigNumberish;
        dsProxy: string;
        dsProxyActions: string;
        manager: string;
        gemJoin: string;
        daiJoin: string;
        cdp: BigNumberish;
        router02: string;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADDRESSES_PROVIDER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ADDRESSES_PROVIDER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LENDING_POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "LENDING_POOL()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeOperation(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "executeOperation(address[],uint256[],uint256[],address,bytes)"(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flashLoanFromDSProxy(
      owner: string,
      target: string,
      ownerTokens: string[],
      ownerAmounts: BigNumberish[],
      lendingPool: string,
      loanTokens: string[],
      loanAmounts: BigNumberish[],
      modes: BigNumberish[],
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "flashLoanFromDSProxy(address,address,address[],uint256[],address,address[],uint256[],uint256[],bytes)"(
      owner: string,
      target: string,
      ownerTokens: string[],
      ownerAmounts: BigNumberish[],
      lendingPool: string,
      loanTokens: string[],
      loanAmounts: BigNumberish[],
      modes: BigNumberish[],
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paybackDebt(
      parameters: {
        sender: string;
        debtToken: string;
        debtToPay: BigNumberish;
        amountFromSenderInDebtToken: BigNumberish;
        amountFromLoanInDebtToken: BigNumberish;
        tokenA: string;
        tokenB: string;
        pairToken: string;
        collateralAmountToFree: BigNumberish;
        collateralAmountToUseToPayDebt: BigNumberish;
        debtToCoverWithTokenA: BigNumberish;
        debtToCoverWithTokenB: BigNumberish;
        pathTokenAToDebtToken: string[];
        pathTokenBToDebtToken: string[];
        minTokenAToRecive: BigNumberish;
        minTokenBToRecive: BigNumberish;
        loanFee: BigNumberish;
        deadline: BigNumberish;
        dsProxy: string;
        dsProxyActions: string;
        manager: string;
        gemJoin: string;
        daiJoin: string;
        cdp: BigNumberish;
        router02: string;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "paybackDebt((address,address,uint256,uint256,uint256,address,address,address,uint256,uint256,uint256,uint256,address[],address[],uint256,uint256,uint256,uint256,address,address,address,address,address,uint256,address))"(
      parameters: {
        sender: string;
        debtToken: string;
        debtToPay: BigNumberish;
        amountFromSenderInDebtToken: BigNumberish;
        amountFromLoanInDebtToken: BigNumberish;
        tokenA: string;
        tokenB: string;
        pairToken: string;
        collateralAmountToFree: BigNumberish;
        collateralAmountToUseToPayDebt: BigNumberish;
        debtToCoverWithTokenA: BigNumberish;
        debtToCoverWithTokenB: BigNumberish;
        pathTokenAToDebtToken: string[];
        pathTokenBToDebtToken: string[];
        minTokenAToRecive: BigNumberish;
        minTokenBToRecive: BigNumberish;
        loanFee: BigNumberish;
        deadline: BigNumberish;
        dsProxy: string;
        dsProxyActions: string;
        manager: string;
        gemJoin: string;
        daiJoin: string;
        cdp: BigNumberish;
        router02: string;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
