{
  "address": "0xfb46AF651e4FC68805AdeD181e9D6645629Be382",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        }
      ],
      "name": "LockAndDraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        }
      ],
      "name": "WipeAndFree",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "LOCK_AND_DRAW",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WIPE_AND_FREE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "premiums",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "executeOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "ownerTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ownerAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "lendingPool",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "loanTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "loanAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "modes",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        }
      ],
      "name": "flashLoanFromDSProxy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeManager",
          "type": "address"
        }
      ],
      "name": "setFeeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb14627f27bb79977092f3028a03784389c94baaea604cabbe253508f09cb3914",
  "receipt": {
    "to": null,
    "from": "0x6fDAE9edACc6461b21f71a1a6a420197D2b0C3aa",
    "contractAddress": "0xfb46AF651e4FC68805AdeD181e9D6645629Be382",
    "transactionIndex": 101,
    "gasUsed": "3872300",
    "logsBloom": "0x
    "blockHash": "0x71a1d57c3bdfe9e66c4331b135cca7216ccc468f8e850a203b6c4f1351fbb897",
    "transactionHash": "0xb14627f27bb79977092f3028a03784389c94baaea604cabbe253508f09cb3914",
    "logs": [
      {
        "transactionIndex": 101,
        "blockNumber": 12520595,
        "transactionHash": "0xb14627f27bb79977092f3028a03784389c94baaea604cabbe253508f09cb3914",
        "address": "0xfb46AF651e4FC68805AdeD181e9D6645629Be382",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006fdae9edacc6461b21f71a1a6a420197d2b0c3aa"
        ],
        "data": "0x",
        "logIndex": 2112,
        "blockHash": "0x71a1d57c3bdfe9e66c4331b135cca7216ccc468f8e850a203b6c4f1351fbb897"
      }
    ],
    "blockNumber": 12520595,
    "cumulativeGasUsed": "13828387",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1afbc5f1df82a047d8af4b9229d96796",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"LockAndDraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"WipeAndFree\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"LOCK_AND_DRAW\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WIPE_AND_FREE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"ownerTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ownerAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"lendingPool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"loanTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"loanAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"modes\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"name\":\"flashLoanFromDSProxy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"}],\"name\":\"setFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeOperation(address[],uint256[],uint256[],address,bytes)\":{\"notice\":\"This function is called after your contract has received the flash loan amount\"},\"flashLoanFromDSProxy(address,address,address[],uint256[],address,address[],uint256[],uint256[],bytes,address)\":{\"notice\":\"Executed as DSProxy.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Deunifi.sol\":\"Deunifi\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xdb17a1fb73e261e736ae8862be2d9a32964fc4b3741f48980f5cdc9d92b99a96\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/Deunifi.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport { IUniswapV2Router02 } from '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\nimport { IUniswapV2Pair } from '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\nimport { IUniswapV2Callee } from '@uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol';\\n\\nimport { ILendingPool } from \\\"./ILendingPool.sol\\\";\\nimport { IFlashLoanReceiver } from \\\"./IFlashLoanReceiver.sol\\\";\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { IFeeManager } from \\\"./IFeeManager.sol\\\";\\n\\nuint256 constant MAX_UINT256 = ~uint256(0);\\n\\n\\n// // TODO Remove \\n// import \\\"hardhat/console.sol\\\";\\n\\ninterface IDSProxy{\\n\\n    function execute(address _target, bytes calldata _data)\\n        external\\n        payable;\\n\\n    function setOwner(address owner_)\\n        external;\\n\\n}\\n\\ninterface IWeth{\\n    function deposit() external payable;\\n    function withdraw(uint wad) external;\\n}\\n\\ninterface IPsm{\\n    function buyGem(address usr, uint256 gemAmt) external;\\n    function sellGem(address usr, uint256 gemAmt) external;\\n}\\n\\ncontract Deunifi is IFlashLoanReceiver, Ownable {\\n\\n    event LockAndDraw(address sender, uint cdp, uint collateral, uint debt);\\n    event WipeAndFree(address sender, uint cdp, uint collateral, uint debt);\\n\\n    address public feeManager;\\n\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    uint8 public constant WIPE_AND_FREE = 1;\\n    uint8 public constant LOCK_AND_DRAW = 2;\\n\\n    fallback () external payable {}\\n\\n    function setFeeManager(address _feeManager) public onlyOwner{\\n        feeManager = _feeManager;\\n    }\\n\\n    struct PayBackParameters {\\n        address sender;\\n        address debtToken;\\n        uint debtToPay;\\n        address tokenA;\\n        address tokenB;\\n        address pairToken;\\n        uint collateralAmountToFree;\\n        uint collateralAmountToUseToPayDebt;\\n        uint debtToCoverWithTokenA;\\n        uint debtToCoverWithTokenB;\\n        address[] pathTokenAToDebtToken;\\n        address[] pathTokenBToDebtToken;\\n        uint minTokenAToRecive;\\n        uint minTokenBToRecive;\\n        uint deadline;\\n        address dsProxy;\\n        address dsProxyActions;\\n        address manager;\\n        address gemJoin;\\n        address daiJoin;\\n        uint cdp;\\n        address router02;\\n        address weth;\\n\\n        // PSM swap parameters\\n        address tokenToSwapWithPsm;\\n        address tokenJoinForSwapWithPsm;\\n        address psm;\\n        uint256 psmSellGemAmount;\\n        uint256 expectedDebtTokenFromPsmSellGemOperation;\\n\\n        address lendingPool;\\n    }\\n    \\n    function lockGemAndDraw(\\n        address gemToken,\\n        address dsProxy,\\n        address dsProxyActions,\\n        address manager,\\n        address jug,\\n        address gemJoin,\\n        address daiJoin, \\n        uint cdp,\\n        uint collateralToLock,\\n        uint daiToBorrow,\\n        bool transferFrom\\n        ) internal {\\n\\n        safeIncreaseMaxUint(gemToken, dsProxy, collateralToLock);\\n\\n        IDSProxy(dsProxy).execute(\\n            dsProxyActions,\\n            abi.encodeWithSignature(\\\"lockGemAndDraw(address,address,address,address,uint256,uint256,uint256,bool)\\\",\\n                manager, jug, gemJoin, daiJoin, cdp, collateralToLock, daiToBorrow, transferFrom)\\n        );\\n\\n    }\\n\\n    struct LockAndDrawParameters{\\n\\n        address sender;\\n\\n        address debtToken;\\n\\n        address router02;\\n        address psm;\\n\\n        address token0;\\n        uint256 debtTokenForToken0;\\n        uint256 token0FromDebtToken;\\n        address[] pathFromDebtTokenToToken0;\\n        bool usePsmForToken0;\\n\\n        address token1;\\n        uint256 debtTokenForToken1;\\n        uint256 token1FromDebtToken;\\n        address[] pathFromDebtTokenToToken1;\\n        bool usePsmForToken1;\\n\\n        uint256 token0FromUser;\\n        uint256 token1FromUser;\\n\\n        uint256 minCollateralToBuy;\\n        uint256 collateralFromUser;\\n\\n        address gemToken;\\n        address dsProxy;\\n        address dsProxyActions;\\n        address manager;\\n        address jug;\\n        address gemJoin;\\n        address daiJoin;\\n        uint256 cdp;\\n        uint256 debtTokenToDraw;\\n        bool transferFrom;\\n\\n        uint256 deadline;\\n\\n        address lendingPool;\\n\\n    }\\n\\n    function approveDebtToken(uint256 pathFromDebtTokenToToken0Length, uint256 pathFromDebtTokenToToken1Length,\\n        address debtToken, address router02, address psm,\\n        uint256 debtTokenForToken0, uint256 debtTokenForToken1,\\n        bool usePsmForToken0, bool usePsmForToken1) internal {\\n        \\n        uint256 amountToApproveRouter02 = 0;\\n        uint256 amountToApprovePsm = 0;\\n\\n        if (pathFromDebtTokenToToken0Length > 0){\\n            if (usePsmForToken0)\\n                amountToApprovePsm = amountToApprovePsm.add(debtTokenForToken0);\\n            else\\n                amountToApproveRouter02 = amountToApproveRouter02.add(debtTokenForToken0);\\n        }\\n\\n        if (pathFromDebtTokenToToken1Length > 0){\\n            if (usePsmForToken1)\\n                amountToApprovePsm = amountToApprovePsm.add(debtTokenForToken1);\\n            else\\n                amountToApproveRouter02 = amountToApproveRouter02.add(debtTokenForToken1);\\n        }\\n\\n        if (amountToApproveRouter02 > 0){\\n            safeIncreaseMaxUint(debtToken, router02, \\n                amountToApproveRouter02);\\n        }\\n\\n        if (amountToApprovePsm > 0){\\n            safeIncreaseMaxUint(debtToken, psm, \\n                amountToApprovePsm);\\n        }\\n\\n    }\\n\\n    function lockAndDrawOperation(bytes memory params) internal{\\n\\n        ( LockAndDrawParameters memory parameters) = abi.decode(params, (LockAndDrawParameters));\\n        \\n        approveDebtToken(parameters.pathFromDebtTokenToToken0.length, parameters.pathFromDebtTokenToToken1.length,\\n            parameters.debtToken, parameters.router02, parameters.psm,\\n            parameters.debtTokenForToken0, parameters.debtTokenForToken1,\\n            parameters.usePsmForToken0, parameters.usePsmForToken1);\\n\\n        uint token0FromDebtToken = 0;\\n        uint token1FromDebtToken = 0;\\n        uint boughtCollateral;\\n\\n        // Swap debt token for gems or one of tokens that compose gems.\\n        if (parameters.debtTokenForToken0 > 0){\\n\\n            if (parameters.debtToken == parameters.token0){\\n\\n                token0FromDebtToken = parameters.debtTokenForToken0;\\n\\n            } else {\\n\\n                if (parameters.usePsmForToken0){\\n\\n                    token0FromDebtToken = parameters.token0FromDebtToken;\\n                    \\n                    IPsm(parameters.psm).buyGem(address(this), token0FromDebtToken);\\n\\n                }else{\\n\\n                    token0FromDebtToken = IUniswapV2Router02(parameters.router02).swapExactTokensForTokens(\\n                        parameters.debtTokenForToken0, // exact amount for token 'from'\\n                        0, // min amount to recive for token 'to'\\n                        parameters.pathFromDebtTokenToToken0, // path of swap\\n                        address(this), // reciver\\n                        parameters.deadline\\n                        )[parameters.pathFromDebtTokenToToken0.length-1];\\n\\n                }\\n\\n            }\\n\\n            boughtCollateral = token0FromDebtToken;\\n\\n        }\\n\\n        // Swap debt token the other token that compose gems.\\n        if (parameters.debtTokenForToken1 > 0){\\n\\n            if (parameters.debtToken == parameters.token1){\\n\\n                token1FromDebtToken = parameters.debtTokenForToken1;\\n\\n            } else {\\n\\n                if (parameters.usePsmForToken1){\\n\\n                    token1FromDebtToken = parameters.token1FromDebtToken;\\n                    \\n                    IPsm(parameters.psm).buyGem(address(this), token1FromDebtToken);\\n\\n                }else{\\n\\n                    token1FromDebtToken = IUniswapV2Router02(parameters.router02).swapExactTokensForTokens(\\n                        parameters.debtTokenForToken1, // exact amount for token 'from'\\n                        0, // min amount to recive for token 'to'\\n                        parameters.pathFromDebtTokenToToken1, // path of swap\\n                        address(this), // reciver\\n                        parameters.deadline\\n                        )[parameters.pathFromDebtTokenToToken1.length-1];\\n\\n                }\\n\\n            }\\n\\n        }\\n\\n        if (parameters.token1FromUser.add(token1FromDebtToken) > 0){\\n\\n            safeIncreaseMaxUint(parameters.token0, parameters.router02,\\n                parameters.token0FromUser.add(token0FromDebtToken));\\n            safeIncreaseMaxUint(parameters.token1, parameters.router02,\\n                parameters.token1FromUser.add(token1FromDebtToken));\\n\\n            ( uint token0Used, uint token1Used, uint addedLiquidity) = IUniswapV2Router02(parameters.router02).addLiquidity(\\n                parameters.token0,\\n                parameters.token1,\\n                parameters.token0FromUser.add(token0FromDebtToken),\\n                parameters.token1FromUser.add(token1FromDebtToken),\\n                0,\\n                0,\\n                address(this), // reciver\\n                parameters.deadline\\n            );\\n\\n            boughtCollateral = addedLiquidity;\\n\\n            // Remaining tokens are returned to user.\\n\\n            if (parameters.token0FromUser.add(token0FromDebtToken).sub(token0Used) > 0)\\n                IERC20(parameters.token0).safeTransfer(\\n                    parameters.sender,\\n                    parameters.token0FromUser.add(token0FromDebtToken).sub(token0Used));\\n\\n            if (parameters.token1FromUser.add(token1FromDebtToken).sub(token1Used) > 0)\\n                IERC20(parameters.token1).safeTransfer(\\n                    parameters.sender,\\n                    parameters.token1FromUser.add(token1FromDebtToken).sub(token1Used));\\n\\n        }\\n\\n        require(boughtCollateral >= parameters.minCollateralToBuy, \\\"Deunifi: Bought collateral lower than expected collateral to buy.\\\");\\n\\n        uint collateralToLock = parameters.collateralFromUser.add(boughtCollateral);\\n\\n        lockGemAndDraw(\\n            parameters.gemToken,\\n            parameters.dsProxy,\\n            parameters.dsProxyActions,\\n            parameters.manager, \\n            parameters.jug,\\n            parameters.gemJoin,\\n            parameters.daiJoin, \\n            parameters.cdp,\\n            collateralToLock,\\n            parameters.debtTokenToDraw,\\n            parameters.transferFrom\\n        );\\n\\n        // Fee Service Payment\\n        safeIncreaseMaxUint(parameters.debtToken, feeManager, \\n            parameters.debtTokenToDraw); // We are passing an amount higher so it is not necessary to calculate the fee.\\n\\n        if (feeManager!=address(0))\\n            // TODO parameters.sender\\n            IFeeManager(feeManager).collectFee(parameters.sender, parameters.debtToken, parameters.debtTokenToDraw);\\n\\n        // Approve lending pool to collect flash loan + fees.\\n        safeIncreaseMaxUint(parameters.debtToken, parameters.lendingPool,\\n            parameters.debtTokenToDraw); // We are passing an amount higher so it is not necessary to calculate the fee.\\n\\n        emit LockAndDraw(parameters.sender, parameters.cdp, collateralToLock, parameters.debtTokenToDraw);\\n        \\n    }\\n\\n    function paybackDebt(PayBackParameters memory parameters) internal\\n        returns (uint freeTokenA, uint freeTokenB, uint freePairToken){\\n\\n        parameters.debtToPay;\\n\\n        wipeAndFreeGem(\\n            parameters.dsProxy,\\n            parameters.dsProxyActions,\\n            parameters.manager,\\n            parameters.gemJoin,\\n            parameters.daiJoin,\\n            parameters.cdp,\\n            parameters.collateralAmountToFree,\\n            parameters.debtToPay,\\n            parameters.debtToken\\n        );\\n\\n        (uint remainingTokenA, uint remainingTokenB) = swapCollateralForTokens(\\n            SwapCollateralForTokensParameters(\\n                parameters.router02,\\n                parameters.tokenA,\\n                parameters.tokenB, // Optional in case of Uniswap Pair Collateral\\n                parameters.pairToken,\\n                parameters.collateralAmountToUseToPayDebt, // Amount of tokenA or liquidity to remove \\n                                    // of pair(tokenA, tokenB)\\n                parameters.minTokenAToRecive, // Min amount remaining after swap tokenA for debtToken\\n                            // (this has more sense when we are working with pairs)\\n                parameters.minTokenBToRecive, // Optional in case of Uniswap Pair Collateral\\n                parameters.deadline,\\n                parameters.debtToCoverWithTokenA, // amount in debt token\\n                parameters.debtToCoverWithTokenB, // Optional in case of Uniswap Pair Collateral\\n                parameters.pathTokenAToDebtToken, // Path to perform the swap.\\n                parameters.pathTokenBToDebtToken, // Optional in case of Uniswap Pair Collateral\\n                parameters.tokenToSwapWithPsm,\\n                parameters.tokenJoinForSwapWithPsm,\\n                parameters.psm,\\n                parameters.psmSellGemAmount,\\n                parameters.expectedDebtTokenFromPsmSellGemOperation\\n            )\\n        );\\n\\n        uint pairRemaining = 0;\\n\\n        if (parameters.pairToken != address(0)){\\n            pairRemaining = parameters.collateralAmountToFree\\n                .sub(parameters.collateralAmountToUseToPayDebt);\\n        }\\n\\n        return (remainingTokenA, remainingTokenB, pairRemaining);\\n\\n    }\\n\\n    function safeIncreaseMaxUint(address token, address spender, uint amount) internal {\\n        if (IERC20(token).allowance(address(this), spender) < amount){\\n            IERC20(token).safeApprove(spender, 0);\\n            IERC20(token).safeApprove(spender, MAX_UINT256);\\n        } \\n    }\\n\\n    /**\\n    Preconditions:\\n    - this should have enough `wadD` DAI.\\n    - DAI.allowance(this, daiJoin) >= wadD\\n    - All addresses should correspond with the expected contracts.\\n    */\\n    function wipeAndFreeGem(\\n        address dsProxy,\\n        address dsProxyActions,\\n        address manager,\\n        address gemJoin,\\n        address daiJoin,\\n        uint256 cdp,\\n        uint256 wadC,\\n        uint256 wadD,\\n        address daiToken\\n    ) internal {\\n\\n        safeIncreaseMaxUint(daiToken, dsProxy, wadD);\\n\\n        IDSProxy(dsProxy).execute(\\n            dsProxyActions,\\n            abi.encodeWithSignature(\\\"wipeAndFreeGem(address,address,address,uint256,uint256,uint256)\\\",\\n                manager, gemJoin, daiJoin, cdp, wadC, wadD)\\n        );\\n\\n    }\\n    \\n    struct SwapCollateralForTokensParameters{\\n        address router02; // Uniswap V2 Router\\n        address tokenA; // Token to be swap for debtToken\\n        address tokenB; // Optional in case of Uniswap Pair Collateral\\n        address pairToken;\\n        uint amountToUseToPayDebt; // Amount of tokenA or liquidity to remove \\n                                   // of pair(tokenA, tokenB)\\n        uint amountAMin; // Min amount remaining after swap tokenA for debtToken\\n                         // (this has more sense when we are working with pairs)\\n        uint amountBMin; // Optional in case of Uniswap Pair Collateral\\n        uint deadline;\\n        uint debtToCoverWithTokenA; // amount in debt token\\n        uint debtToCoverWithTokenB; // Optional in case of Uniswap Pair Collateral\\n        address[] pathTokenAToDebtToken; // Path to perform the swap.\\n        address[] pathTokenBToDebtToken; // Optional in case of Uniswap Pair Collateral\\n\\n        address tokenToSwapWithPsm;\\n        address tokenJoinForSwapWithPsm;\\n        address psm;\\n        uint256 psmSellGemAmount;\\n        uint256 expectedDebtTokenFromPsmSellGemOperation;\\n    }\\n\\n    /**\\n    Preconditions:\\n    - this should have enough amountToUseToPayDebt, \\n        tokenA for debtToCoverWithTokenA and \\n        tokenb for debtToCoverWithTokenB and \\n    - pair(tokenA, tokenB).allowance(this, router02) >= amountToUseToPayDebt.\\n    - tokenA.allowance(this, router02) >= (debtToCoverWithTokenA in token A)\\n    - tokenB.allowance(this, router02) >= (debtToCoverWithTokenB in token B)\\n    - All addresses should correspond with the expected contracts.\\n    - pair(tokenA, tokenB) should be a valid Uniswap V2 pair.\\n    */\\n    function swapCollateralForTokens(\\n        SwapCollateralForTokensParameters memory parameters\\n    ) internal returns (uint remainingTokenA, uint remainingTokenB) {\\n        \\n        uint amountA = 0;\\n        uint amountB = 0;\\n        uint amountACoveringDebt = 0;\\n        uint amountBCoveringDebt = 0;\\n\\n        if (parameters.tokenB!=address(0)){\\n\\n            safeIncreaseMaxUint(parameters.pairToken, parameters.router02, parameters.amountToUseToPayDebt);\\n\\n            (amountA, amountB) = IUniswapV2Router02(parameters.router02).removeLiquidity(      \\n                parameters.tokenA,\\n                parameters.tokenB,\\n                parameters.amountToUseToPayDebt,\\n                0, // Min amount of token A to recive\\n                0, // Min amount of token B to recive\\n                address(this),\\n                parameters.deadline\\n            );\\n\\n            if (parameters.debtToCoverWithTokenB > 0){\\n                \\n                if (parameters.pathTokenBToDebtToken.length == 0){\\n\\n                    amountBCoveringDebt = parameters.debtToCoverWithTokenB;\\n\\n                } else {\\n\\n                    if (parameters.tokenToSwapWithPsm == parameters.tokenB){\\n\\n                        safeIncreaseMaxUint(parameters.tokenB, parameters.tokenJoinForSwapWithPsm, \\n                            parameters.psmSellGemAmount);\\n\\n                        IPsm(parameters.psm).sellGem(address(this), parameters.psmSellGemAmount);\\n\\n                        amountBCoveringDebt = parameters.psmSellGemAmount;\\n\\n                    }else{\\n\\n                        // IERC20(parameters.tokenB).safeIncreaseAllowance(parameters.router02, amountB.sub(parameters.amountBMin));\\n                        safeIncreaseMaxUint(parameters.tokenB, parameters.router02, \\n                            amountB.mul(2));  // We are passing an amount higher because we do not know how much is going to be spent.\\n                        \\n                        amountBCoveringDebt = IUniswapV2Router02(parameters.router02).swapTokensForExactTokens(\\n                            parameters.debtToCoverWithTokenB,\\n                            amountB.sub(parameters.amountBMin), // amountInMax (Here we validate amountBMin)\\n                            parameters.pathTokenBToDebtToken,\\n                            address(this),\\n                            parameters.deadline\\n                        )[0];\\n\\n                    }\\n\\n                }\\n\\n            }\\n\\n        }else{\\n\\n            // In case we are not dealing with a pair, we need \\n            amountA = parameters.amountToUseToPayDebt;\\n\\n        }\\n\\n        if (parameters.debtToCoverWithTokenA > 0){\\n\\n                if (parameters.pathTokenAToDebtToken.length == 0){\\n\\n                    amountACoveringDebt = parameters.debtToCoverWithTokenA;\\n\\n                } else {\\n\\n                    if (parameters.tokenToSwapWithPsm == parameters.tokenA){\\n\\n                        safeIncreaseMaxUint(parameters.tokenA, parameters.tokenJoinForSwapWithPsm, \\n                            parameters.psmSellGemAmount);\\n\\n                        IPsm(parameters.psm).sellGem(address(this), parameters.psmSellGemAmount);\\n\\n                        amountACoveringDebt = parameters.psmSellGemAmount;\\n\\n                    }else{\\n\\n                        // IERC20(parameters.tokenA).safeIncreaseAllowance(parameters.router02, amountA.sub(parameters.amountAMin));\\n                        safeIncreaseMaxUint(parameters.tokenA, parameters.router02,\\n                            amountA.mul(2)); // We are passing an amount higher because we do not know how much is going to be spent.\\n\\n                        amountACoveringDebt = IUniswapV2Router02(parameters.router02).swapTokensForExactTokens(\\n                            parameters.debtToCoverWithTokenA,\\n                            amountA.sub(parameters.amountAMin), // amountInMax (Here we validate amountAMin)\\n                            parameters.pathTokenAToDebtToken,\\n                            address(this),\\n                            parameters.deadline\\n                        )[0];\\n\\n                    }\\n\\n                }\\n\\n        }\\n\\n        return (\\n            amountA.sub(amountACoveringDebt),\\n            amountB.sub(amountBCoveringDebt)\\n            );\\n\\n    }\\n\\n    function wipeAndFreeOperation(bytes memory params) internal{\\n\\n        ( PayBackParameters memory decodedData ) = abi.decode(params, (PayBackParameters));\\n\\n        (uint remainingTokenA, uint remainingTokenB, uint pairRemaining) = paybackDebt(decodedData);\\n\\n        require(remainingTokenA >= decodedData.minTokenAToRecive, \\\"Deunifi: Remaining token lower than expected.\\\");\\n        require(remainingTokenB >= decodedData.minTokenBToRecive, \\\"Deunifi: Remaining token lower than expected.\\\");\\n\\n        // Fee Service Payment\\n        safeIncreaseMaxUint(decodedData.debtToken, feeManager, \\n            decodedData.debtToPay); // We are passing an amount higher so it is not necessary to calculate the fee.\\n\\n        if (feeManager!=address(0))\\n            IFeeManager(feeManager).collectFee(decodedData.sender, decodedData.debtToken, decodedData.debtToPay);\\n\\n        // Conversion from WETH to ETH when needed.\\n        if (decodedData.weth != address(0)){\\n\\n            uint wethBalance = 0;\\n\\n            if (decodedData.tokenA == decodedData.weth){\\n                wethBalance = remainingTokenA;\\n                remainingTokenA = 0;\\n            }\\n\\n            if (decodedData.tokenB == decodedData.weth){\\n                wethBalance = remainingTokenB;\\n                remainingTokenB = 0;\\n            }\\n\\n            if (wethBalance>0){\\n                IWeth(decodedData.weth).withdraw(wethBalance);\\n                decodedData.sender.call{value: wethBalance}(\\\"\\\");\\n            }\\n        }\\n\\n        if (remainingTokenA > 0 || decodedData.minTokenAToRecive > 0){\\n            IERC20(decodedData.tokenA).safeTransfer(decodedData.sender, remainingTokenA);\\n        }\\n\\n        if (remainingTokenB > 0 || decodedData.minTokenBToRecive > 0){\\n            IERC20(decodedData.tokenB).safeTransfer(decodedData.sender, remainingTokenB);\\n        }\\n\\n        if (pairRemaining > 0){\\n            // We do not verify because pairRemaining because the contract should have only\\n            // the exact amount to transfer.\\n            IERC20(decodedData.pairToken).safeTransfer(decodedData.sender, pairRemaining);\\n        }\\n\\n        safeIncreaseMaxUint(decodedData.debtToken, decodedData.lendingPool,\\n            decodedData.debtToPay.mul(2)); // We are passing an amount higher so it is not necessary to calculate the fee.\\n\\n        emit WipeAndFree(decodedData.sender, decodedData.cdp, decodedData.collateralAmountToFree, decodedData.debtToPay);\\n\\n    }\\n\\n    struct Operation{\\n        uint8 operation;\\n        bytes data;\\n    }\\n\\n    /**\\n        This function is called after your contract has received the flash loan amount\\n     */\\n    function executeOperation(\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata params\\n    )\\n        external\\n        override\\n        returns (bool)\\n    {\\n\\n        ( Operation memory operation ) = abi.decode(params, (Operation));\\n\\n        if (operation.operation == WIPE_AND_FREE)\\n            wipeAndFreeOperation(operation.data);\\n        else if(operation.operation == LOCK_AND_DRAW)\\n            lockAndDrawOperation(operation.data);\\n        else\\n            revert('Easy Vault: Invalid operation.');\\n\\n        return true;\\n    }\\n\\n    /**\\n    Executed as DSProxy.\\n     */\\n    function flashLoanFromDSProxy(\\n        address owner, // Owner of DSProxy calling this function.\\n        address target, // Target contract that will resolve the flash loan.\\n        address[] memory ownerTokens, // owner tokens to transfer to target\\n        uint[] memory ownerAmounts, // owner token amounts to transfer to target\\n        address lendingPool,\\n        address[] memory loanTokens,\\n        uint[] memory loanAmounts,\\n        uint[] memory modes,\\n        bytes memory data,\\n        address weth // When has to use or recive ETH, else should be address(0)\\n        ) public payable{\\n\\n        if (msg.value > 0){\\n            IWeth(weth).deposit{value: msg.value}();\\n            IERC20(weth).safeTransfer(\\n                target, msg.value\\n            );\\n        }\\n\\n        IDSProxy(address(this)).setOwner(target);\\n\\n        for (uint i=0; i<ownerTokens.length; i=i.add(1)){\\n            IERC20(ownerTokens[i]).safeTransferFrom(\\n                owner, target, ownerAmounts[i]\\n            );\\n        }\\n\\n        ILendingPool(lendingPool).flashLoan(\\n            target,\\n            loanTokens,\\n            loanAmounts,\\n            modes, // modes: 0 = no debt, 1 = stable, 2 = variable\\n            target, // onBehalfOf\\n            data,\\n            0 // referralCode\\n        );\\n\\n        IDSProxy(address(this)).setOwner(owner);\\n        \\n    }\\n\\n}\\n\",\"keccak256\":\"0x16a0dd256dcd47249862a84c9d910d14a3d2942fe5ecb5ecfbf0b53fe97fe2c6\",\"license\":\"UNLICENSED\"},\"contracts/IFeeManager.sol\":{\"content\":\"pragma solidity 0.7.6;\\n\\ninterface IFeeManager{\\n\\n    function collectFee(address sender, address debtToken, uint baseAmount) external;\\n\\n}\\n\",\"keccak256\":\"0x5183c426e684c634dd64c079a968d8f55b61e8cc214a880102bae938619e1859\"},\"contracts/IFlashLoanReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\ninterface IFlashLoanReceiver {\\n    function executeOperation(\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata params\\n    ) external returns (bool);\\n}\\n\\n\",\"keccak256\":\"0x7dd2f2861934f603a30f70251db1350f68898a543bacc097022a9e3882633781\",\"license\":\"UNLICENSED\"},\"contracts/ILendingPool.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\ninterface ILendingPool{\\n\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    function FLASHLOAN_PREMIUM_TOTAL()\\n        external view\\n        returns(uint256);\\n\\n}\\n\\n\",\"keccak256\":\"0xf7ca081bda54ae970b726ef224bdec27ec7277cc9753bdd4b37551d1e7ce2370\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600062000024620000c860201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350620000d0565b600033905090565b6144bd80620000e06000396000f3fe60806040526004361061008a5760003560e01c80638da5cb5b116100595780638da5cb5b14610123578063920f5c841461014e578063c297e4181461018b578063d0fb0203146101a7578063f2fde38b146101d25761008b565b806308a427971461008d578063472d35b9146100b8578063715018a6146100e15780638348d034146100f85761008b565b5b005b34801561009957600080fd5b506100a26101fb565b6040516100af91906140ce565b60405180910390f35b3480156100c457600080fd5b506100df60048036038101906100da91906134d3565b610200565b005b3480156100ed57600080fd5b506100f66102f3565b005b34801561010457600080fd5b5061010d610460565b60405161011a91906140ce565b60405180910390f35b34801561012f57600080fd5b50610138610465565b6040516101459190613c14565b60405180910390f35b34801561015a57600080fd5b5061017560048036038101906101709190613667565b61048e565b6040516101829190613f84565b60405180910390f35b6101a560048036038101906101a091906134fc565b61053a565b005b3480156101b357600080fd5b506101bc6107a5565b6040516101c99190613c14565b60405180910390f35b3480156101de57600080fd5b506101f960048036038101906101f491906134d3565b6107cb565b005b600281565b6102086109bd565b73ffffffffffffffffffffffffffffffffffffffff16610226610465565b73ffffffffffffffffffffffffffffffffffffffff16146102af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6102fb6109bd565b73ffffffffffffffffffffffffffffffffffffffff16610319610465565b73ffffffffffffffffffffffffffffffffffffffff16146103a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600181565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008083838101906104a091906137d1565b9050600160ff16816000015160ff1614156104c7576104c281602001516109c5565b610528565b600260ff16816000015160ff1614156104ec576104e78160200151610eaf565b610527565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051e90613fbf565b60405180910390fd5b5b60019150509998505050505050505050565b60003411156105d0578073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561058b57600080fd5b505af115801561059f573d6000803e3d6000fd5b50505050506105cf89348373ffffffffffffffffffffffffffffffffffffffff1661171e9092919063ffffffff16565b5b3073ffffffffffffffffffffffffffffffffffffffff166313af40358a6040518263ffffffff1660e01b81526004016106099190613c14565b600060405180830381600087803b15801561062357600080fd5b505af1158015610637573d6000803e3d6000fd5b5050505060005b88518110156106b55761069a8b8b8a848151811061065857fe5b60200260200101518c858151811061066c57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166117c0909392919063ffffffff16565b6106ae60018261188190919063ffffffff16565b905061063e565b508573ffffffffffffffffffffffffffffffffffffffff1663ab9c4b5d8a8787878e8860006040518863ffffffff1660e01b81526004016106fc9796959493929190613e84565b600060405180830381600087803b15801561071657600080fd5b505af115801561072a573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff166313af40358b6040518263ffffffff1660e01b81526004016107679190613c14565b600060405180830381600087803b15801561078157600080fd5b505af1158015610795573d6000803e3d6000fd5b5050505050505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6107d36109bd565b73ffffffffffffffffffffffffffffffffffffffff166107f1610465565b73ffffffffffffffffffffffffffffffffffffffff161461087a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610900576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806143bb6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000818060200190518101906109db9190613812565b905060008060006109eb84611909565b925092509250836101800151831015610a39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3090613fdf565b60405180910390fd5b836101a00151821015610a81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7890613fdf565b60405180910390fd5b610ab68460200151600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660400151611b23565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610baa57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663651b8cb68560000151866020015187604001516040518463ffffffff1660e01b8152600401610b7793929190613d60565b600060405180830381600087803b158015610b9157600080fd5b505af1158015610ba5573d6000803e3d6000fd5b505050505b600073ffffffffffffffffffffffffffffffffffffffff16846102c0015173ffffffffffffffffffffffffffffffffffffffff1614610d58576000846102c0015173ffffffffffffffffffffffffffffffffffffffff16856060015173ffffffffffffffffffffffffffffffffffffffff161415610c2a57839050600093505b846102c0015173ffffffffffffffffffffffffffffffffffffffff16856080015173ffffffffffffffffffffffffffffffffffffffff161415610c6f57829050600092505b6000811115610d5657846102c0015173ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b8152600401610cb69190613fff565b600060405180830381600087803b158015610cd057600080fd5b505af1158015610ce4573d6000803e3d6000fd5b50505050846000015173ffffffffffffffffffffffffffffffffffffffff1681604051610d1090613bff565b60006040518083038185875af1925050503d8060008114610d4d576040519150601f19603f3d011682016040523d82523d6000602084013e610d52565b606091505b5050505b505b6000831180610d6c57506000846101800151115b15610da557610da4846000015184866060015173ffffffffffffffffffffffffffffffffffffffff1661171e9092919063ffffffff16565b5b6000821180610db957506000846101a00151115b15610df257610df1846000015183866080015173ffffffffffffffffffffffffffffffffffffffff1661171e9092919063ffffffff16565b5b6000811115610e2f57610e2e8460000151828660a0015173ffffffffffffffffffffffffffffffffffffffff1661171e9092919063ffffffff16565b5b610e5a8460200151856103800151610e5560028860400151611c1490919063ffffffff16565b611b23565b7fac0cbef1a8ac246924422e9ff961ee097263dc73ccb13c5780e2d048c6e228c584600001518561028001518660c001518760400151604051610ea09493929190613f3f565b60405180910390a15050505050565b600081806020019051810190610ec59190613790565b9050610f028160e0015151826101800151518360200151846040015185606001518660a00151876101400151886101000151896101a00151611c9a565b6000806000808460a0015111156110b057836080015173ffffffffffffffffffffffffffffffffffffffff16846020015173ffffffffffffffffffffffffffffffffffffffff161415610f5b578360a0015192506110ac565b83610100015115610fe3578360c001519250836060015173ffffffffffffffffffffffffffffffffffffffff16638d7ef9bb30856040518363ffffffff1660e01b8152600401610fac929190613c58565b600060405180830381600087803b158015610fc657600080fd5b505af1158015610fda573d6000803e3d6000fd5b505050506110ab565b836040015173ffffffffffffffffffffffffffffffffffffffff166338ed17398560a0015160008760e00151308961038001516040518663ffffffff1660e01b815260040161103695949392919061401a565b600060405180830381600087803b15801561105057600080fd5b505af1158015611064573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061108d919061374f565b60018560e001515103815181106110a057fe5b602002602001015192505b5b8290505b6000846101400151111561125e5783610120015173ffffffffffffffffffffffffffffffffffffffff16846020015173ffffffffffffffffffffffffffffffffffffffff16141561110857836101400151915061125d565b836101a0015115611191578361016001519150836060015173ffffffffffffffffffffffffffffffffffffffff16638d7ef9bb30846040518363ffffffff1660e01b815260040161115a929190613c58565b600060405180830381600087803b15801561117457600080fd5b505af1158015611188573d6000803e3d6000fd5b5050505061125c565b836040015173ffffffffffffffffffffffffffffffffffffffff166338ed17398561014001516000876101800151308961038001516040518663ffffffff1660e01b81526004016111e695949392919061401a565b600060405180830381600087803b15801561120057600080fd5b505af1158015611214573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061123d919061374f565b600185610180015151038151811061125157fe5b602002602001015191505b5b5b600061127883866101e0015161188190919063ffffffff16565b11156114de576112a8846080015185604001516112a386886101c0015161188190919063ffffffff16565b611b23565b6112d384610120015185604001516112ce85886101e0015161188190919063ffffffff16565b611b23565b6000806000866040015173ffffffffffffffffffffffffffffffffffffffff1663e8e33700886080015189610120015161131b8a8c6101c0015161188190919063ffffffff16565b6113338a8d6101e0015161188190919063ffffffff16565b600080308f61038001516040518963ffffffff1660e01b8152600401611360989796959493929190613e06565b606060405180830381600087803b15801561137a57600080fd5b505af115801561138e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b291906138b8565b92509250925080935060006113e7846113d9898b6101c0015161188190919063ffffffff16565b611d5490919063ffffffff16565b111561144a57611449876000015161141f856114118a8c6101c0015161188190919063ffffffff16565b611d5490919063ffffffff16565b896080015173ffffffffffffffffffffffffffffffffffffffff1661171e9092919063ffffffff16565b5b600061147683611468888b6101e0015161188190919063ffffffff16565b611d5490919063ffffffff16565b11156114da576114d987600001516114ae846114a0898c6101e0015161188190919063ffffffff16565b611d5490919063ffffffff16565b89610120015173ffffffffffffffffffffffffffffffffffffffff1661171e9092919063ffffffff16565b5b5050505b836102000151811015611526576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151d90613f9f565b60405180910390fd5b60006115408286610220015161188190919063ffffffff16565b9050611587856102400151866102600151876102800151886102a00151896102c001518a6102e001518b61030001518c6103200151898e61034001518f6103600151611dd7565b6115bd8560200151600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876103400151611b23565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146116b257600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663651b8cb6866000015187602001518861034001516040518463ffffffff1660e01b815260040161167f93929190613d60565b600060405180830381600087803b15801561169957600080fd5b505af11580156116ad573d6000803e3d6000fd5b505050505b6116cb8560200151866103a00151876103400151611b23565b7f992628f13bc2e3ecd138e194a77dfb9fb7a85e5cb3823b6d5f1030f3dc5fc2b485600001518661032001518388610340015160405161170e9493929190613f3f565b60405180910390a1505050505050565b6117bb8363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ef7565b505050565b61187b846323b872dd60e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ef7565b50505050565b6000808284019050838110156118ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600080600083604001515061194f846101e001518561020001518661022001518761024001518861026001518961028001518a60c001518b604001518c60200151611fe6565b600080611ab5604051806102200160405280886102a0015173ffffffffffffffffffffffffffffffffffffffff168152602001886060015173ffffffffffffffffffffffffffffffffffffffff168152602001886080015173ffffffffffffffffffffffffffffffffffffffff1681526020018860a0015173ffffffffffffffffffffffffffffffffffffffff1681526020018860e0015181526020018861018001518152602001886101a001518152602001886101c0015181526020018861010001518152602001886101200151815260200188610140015181526020018861016001518152602001886102e0015173ffffffffffffffffffffffffffffffffffffffff16815260200188610300015173ffffffffffffffffffffffffffffffffffffffff16815260200188610320015173ffffffffffffffffffffffffffffffffffffffff1681526020018861034001518152602001886103600151815250612100565b9150915060008073ffffffffffffffffffffffffffffffffffffffff168760a0015173ffffffffffffffffffffffffffffffffffffffff1614611b1057611b0d8760e001518860c00151611d5490919063ffffffff16565b90505b8282829550955095505050509193909250565b808373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401611b5f929190613c2f565b60206040518083038186803b158015611b7757600080fd5b505afa158015611b8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611baf9190613853565b1015611c0f57611be18260008573ffffffffffffffffffffffffffffffffffffffff166126519092919063ffffffff16565b611c0e826000198573ffffffffffffffffffffffffffffffffffffffff166126519092919063ffffffff16565b5b505050565b600080831415611c275760009050611c94565b6000828402905082848281611c3857fe5b0414611c8f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806144076021913960400191505060405180910390fd5b809150505b92915050565b60008060008b1115611cdd578315611cc657611cbf868261188190919063ffffffff16565b9050611cdc565b611cd9868361188190919063ffffffff16565b91505b5b60008a1115611d1d578215611d0657611cff858261188190919063ffffffff16565b9050611d1c565b611d19858361188190919063ffffffff16565b91505b5b6000821115611d3257611d31898984611b23565b5b6000811115611d4757611d46898883611b23565b5b5050505050505050505050565b600082821115611dcc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b611de28b8b85611b23565b8973ffffffffffffffffffffffffffffffffffffffff16631cff79cd8a8a8a8a8a8a8a8a8a604051602401611e1e989796959493929190613c81565b6040516020818303038152906040527fcbd4be3f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401611eb8929190613f0f565b600060405180830381600087803b158015611ed257600080fd5b505af1158015611ee6573d6000803e3d6000fd5b505050505050505050505050505050565b6000611f59826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166128169092919063ffffffff16565b9050600081511115611fe157808060200190516020811015611f7a57600080fd5b8101908080519060200190929190505050611fe0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180614428602a913960400191505060405180910390fd5b5b505050565b611ff1818a84611b23565b8873ffffffffffffffffffffffffffffffffffffffff16631cff79cd8989898989898960405160240161202996959493929190613cff565b6040516020818303038152906040527fa6add011000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b81526004016120c3929190613f0f565b600060405180830381600087803b1580156120dd57600080fd5b505af11580156120f1573d6000803e3d6000fd5b50505050505050505050505050565b600080600080600080600073ffffffffffffffffffffffffffffffffffffffff16876040015173ffffffffffffffffffffffffffffffffffffffff161461241357612158876060015188600001518960800151611b23565b866000015173ffffffffffffffffffffffffffffffffffffffff1663baa2abde886020015189604001518a60800151600080308e60e001516040518863ffffffff1660e01b81526004016121b29796959493929190613d97565b6040805180830381600087803b1580156121cb57600080fd5b505af11580156121df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612203919061387c565b80945081955050506000876101200151111561240e57600087610160015151141561223557866101200151905061240d565b866040015173ffffffffffffffffffffffffffffffffffffffff1687610180015173ffffffffffffffffffffffffffffffffffffffff16141561230f5761228b8760400151886101a00151896101e00151611b23565b866101c0015173ffffffffffffffffffffffffffffffffffffffff16639599127630896101e001516040518363ffffffff1660e01b81526004016122d0929190613c58565b600060405180830381600087803b1580156122ea57600080fd5b505af11580156122fe573d6000803e3d6000fd5b50505050866101e00151905061240c565b61233587604001518860000151612330600287611c1490919063ffffffff16565b611b23565b866000015173ffffffffffffffffffffffffffffffffffffffff16638803dbee8861012001516123728a60c0015187611d5490919063ffffffff16565b8a6101600151308c60e001516040518663ffffffff1660e01b815260040161239e959493929190614074565b600060405180830381600087803b1580156123b857600080fd5b505af11580156123cc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906123f5919061374f565b60008151811061240157fe5b602002602001015190505b5b5b61241b565b866080015193505b6000876101000151111561261e57600087610140015151141561244557866101000151915061261d565b866020015173ffffffffffffffffffffffffffffffffffffffff1687610180015173ffffffffffffffffffffffffffffffffffffffff16141561251f5761249b8760200151886101a00151896101e00151611b23565b866101c0015173ffffffffffffffffffffffffffffffffffffffff16639599127630896101e001516040518363ffffffff1660e01b81526004016124e0929190613c58565b600060405180830381600087803b1580156124fa57600080fd5b505af115801561250e573d6000803e3d6000fd5b50505050866101e00151915061261c565b61254587602001518860000151612540600288611c1490919063ffffffff16565b611b23565b866000015173ffffffffffffffffffffffffffffffffffffffff16638803dbee8861010001516125828a60a0015188611d5490919063ffffffff16565b8a6101400151308c60e001516040518663ffffffff1660e01b81526004016125ae959493929190614074565b600060405180830381600087803b1580156125c857600080fd5b505af11580156125dc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612605919061374f565b60008151811061261157fe5b602002602001015191505b5b5b6126318285611d5490919063ffffffff16565b6126448285611d5490919063ffffffff16565b9550955050505050915091565b600081148061271f575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b1580156126e257600080fd5b505afa1580156126f6573d6000803e3d6000fd5b505050506040513d602081101561270c57600080fd5b8101908080519060200190929190505050145b612774576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806144526036913960400191505060405180910390fd5b6128118363095ea7b360e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ef7565b505050565b6060612825848460008561282e565b90509392505050565b606082471015612889576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806143e16026913960400191505060405180910390fd5b612892856129d6565b612904576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106129535780518252602082019150602081019050602083039250612930565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146129b5576040519150601f19603f3d011682016040523d82523d6000602084013e6129ba565b606091505b50915091506129ca8282866129e9565b92505050949350505050565b600080823b905060008111915050919050565b606083156129f957829050612aae565b600083511115612a0c5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612a73578082015181840152602081019050612a58565b50505050905090810190601f168015612aa05780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b6000612ac8612ac38461411a565b6140e9565b90508083825260208201905082856020860282011115612ae757600080fd5b60005b85811015612b175781612afd8882612ca3565b845260208401935060208301925050600181019050612aea565b5050509392505050565b6000612b34612b2f8461411a565b6140e9565b90508083825260208201905082856020860282011115612b5357600080fd5b60005b85811015612b835781612b698882612cb8565b845260208401935060208301925050600181019050612b56565b5050509392505050565b6000612ba0612b9b84614146565b6140e9565b90508083825260208201905082856020860282011115612bbf57600080fd5b60005b85811015612bef5781612bd58882613494565b845260208401935060208301925050600181019050612bc2565b5050509392505050565b6000612c0c612c0784614146565b6140e9565b90508083825260208201905082856020860282011115612c2b57600080fd5b60005b85811015612c5b5781612c4188826134a9565b845260208401935060208301925050600181019050612c2e565b5050509392505050565b6000612c78612c7384614172565b6140e9565b905082815260208101848484011115612c9057600080fd5b612c9b848285614309565b509392505050565b600081359050612cb28161435e565b92915050565b600081519050612cc78161435e565b92915050565b60008083601f840112612cdf57600080fd5b8235905067ffffffffffffffff811115612cf857600080fd5b602083019150836020820283011115612d1057600080fd5b9250929050565b600082601f830112612d2857600080fd5b8135612d38848260208601612ab5565b91505092915050565b600082601f830112612d5257600080fd5b8151612d62848260208601612b21565b91505092915050565b60008083601f840112612d7d57600080fd5b8235905067ffffffffffffffff811115612d9657600080fd5b602083019150836020820283011115612dae57600080fd5b9250929050565b600082601f830112612dc657600080fd5b8135612dd6848260208601612b8d565b91505092915050565b600082601f830112612df057600080fd5b8151612e00848260208601612bf9565b91505092915050565b600081519050612e1881614375565b92915050565b60008083601f840112612e3057600080fd5b8235905067ffffffffffffffff811115612e4957600080fd5b602083019150836001820283011115612e6157600080fd5b9250929050565b600082601f830112612e7957600080fd5b8135612e89848260208601612c65565b91505092915050565b60006103c08284031215612ea557600080fd5b612eb06103c06140e9565b90506000612ec084828501612cb8565b6000830152506020612ed484828501612cb8565b6020830152506040612ee884828501612cb8565b6040830152506060612efc84828501612cb8565b6060830152506080612f1084828501612cb8565b60808301525060a0612f24848285016134a9565b60a08301525060c0612f38848285016134a9565b60c08301525060e082015167ffffffffffffffff811115612f5857600080fd5b612f6484828501612d41565b60e083015250610100612f7984828501612e09565b61010083015250610120612f8f84828501612cb8565b61012083015250610140612fa5848285016134a9565b61014083015250610160612fbb848285016134a9565b6101608301525061018082015167ffffffffffffffff811115612fdd57600080fd5b612fe984828501612d41565b610180830152506101a0612fff84828501612e09565b6101a0830152506101c0613015848285016134a9565b6101c0830152506101e061302b848285016134a9565b6101e083015250610200613041848285016134a9565b61020083015250610220613057848285016134a9565b6102208301525061024061306d84828501612cb8565b6102408301525061026061308384828501612cb8565b6102608301525061028061309984828501612cb8565b610280830152506102a06130af84828501612cb8565b6102a0830152506102c06130c584828501612cb8565b6102c0830152506102e06130db84828501612cb8565b6102e0830152506103006130f184828501612cb8565b61030083015250610320613107848285016134a9565b6103208301525061034061311d848285016134a9565b6103408301525061036061313384828501612e09565b61036083015250610380613149848285016134a9565b610380830152506103a061315f84828501612cb8565b6103a08301525092915050565b60006040828403121561317e57600080fd5b61318860406140e9565b90506000613198848285016134be565b600083015250602082013567ffffffffffffffff8111156131b857600080fd5b6131c484828501612e68565b60208301525092915050565b60006103a082840312156131e357600080fd5b6131ee6103a06140e9565b905060006131fe84828501612cb8565b600083015250602061321284828501612cb8565b6020830152506040613226848285016134a9565b604083015250606061323a84828501612cb8565b606083015250608061324e84828501612cb8565b60808301525060a061326284828501612cb8565b60a08301525060c0613276848285016134a9565b60c08301525060e061328a848285016134a9565b60e08301525061010061329f848285016134a9565b610100830152506101206132b5848285016134a9565b6101208301525061014082015167ffffffffffffffff8111156132d757600080fd5b6132e384828501612d41565b6101408301525061016082015167ffffffffffffffff81111561330557600080fd5b61331184828501612d41565b61016083015250610180613327848285016134a9565b610180830152506101a061333d848285016134a9565b6101a0830152506101c0613353848285016134a9565b6101c0830152506101e061336984828501612cb8565b6101e08301525061020061337f84828501612cb8565b6102008301525061022061339584828501612cb8565b610220830152506102406133ab84828501612cb8565b610240830152506102606133c184828501612cb8565b610260830152506102806133d7848285016134a9565b610280830152506102a06133ed84828501612cb8565b6102a0830152506102c061340384828501612cb8565b6102c0830152506102e061341984828501612cb8565b6102e08301525061030061342f84828501612cb8565b6103008301525061032061344584828501612cb8565b6103208301525061034061345b848285016134a9565b61034083015250610360613471848285016134a9565b6103608301525061038061348784828501612cb8565b6103808301525092915050565b6000813590506134a38161438c565b92915050565b6000815190506134b88161438c565b92915050565b6000813590506134cd816143a3565b92915050565b6000602082840312156134e557600080fd5b60006134f384828501612ca3565b91505092915050565b6000806000806000806000806000806101408b8d03121561351c57600080fd5b600061352a8d828e01612ca3565b9a5050602061353b8d828e01612ca3565b99505060408b013567ffffffffffffffff81111561355857600080fd5b6135648d828e01612d17565b98505060608b013567ffffffffffffffff81111561358157600080fd5b61358d8d828e01612db5565b975050608061359e8d828e01612ca3565b96505060a08b013567ffffffffffffffff8111156135bb57600080fd5b6135c78d828e01612d17565b95505060c08b013567ffffffffffffffff8111156135e457600080fd5b6135f08d828e01612db5565b94505060e08b013567ffffffffffffffff81111561360d57600080fd5b6136198d828e01612db5565b9350506101008b013567ffffffffffffffff81111561363757600080fd5b6136438d828e01612e68565b9250506101206136558d828e01612ca3565b9150509295989b9194979a5092959850565b600080600080600080600080600060a08a8c03121561368557600080fd5b60008a013567ffffffffffffffff81111561369f57600080fd5b6136ab8c828d01612ccd565b995099505060208a013567ffffffffffffffff8111156136ca57600080fd5b6136d68c828d01612d6b565b975097505060408a013567ffffffffffffffff8111156136f557600080fd5b6137018c828d01612d6b565b955095505060606137148c828d01612ca3565b93505060808a013567ffffffffffffffff81111561373157600080fd5b61373d8c828d01612e1e565b92509250509295985092959850929598565b60006020828403121561376157600080fd5b600082015167ffffffffffffffff81111561377b57600080fd5b61378784828501612ddf565b91505092915050565b6000602082840312156137a257600080fd5b600082015167ffffffffffffffff8111156137bc57600080fd5b6137c884828501612e92565b91505092915050565b6000602082840312156137e357600080fd5b600082013567ffffffffffffffff8111156137fd57600080fd5b6138098482850161316c565b91505092915050565b60006020828403121561382457600080fd5b600082015167ffffffffffffffff81111561383e57600080fd5b61384a848285016131d0565b91505092915050565b60006020828403121561386557600080fd5b6000613873848285016134a9565b91505092915050565b6000806040838503121561388f57600080fd5b600061389d858286016134a9565b92505060206138ae858286016134a9565b9150509250929050565b6000806000606084860312156138cd57600080fd5b60006138db868287016134a9565b93505060206138ec868287016134a9565b92505060406138fd868287016134a9565b9150509250925092565b60006139138383613946565b60208301905092915050565b600061392b8383613bd2565b60208301905092915050565b613940816142af565b82525050565b61394f8161424c565b82525050565b61395e8161424c565b82525050565b600061396f826141c2565b61397981856141fd565b9350613984836141a2565b8060005b838110156139b557815161399c8882613907565b97506139a7836141e3565b925050600181019050613988565b5085935050505092915050565b60006139cd826141cd565b6139d7818561420e565b93506139e2836141b2565b8060005b83811015613a135781516139fa888261391f565b9750613a05836141f0565b9250506001810190506139e6565b5085935050505092915050565b613a298161425e565b82525050565b6000613a3a826141d8565b613a44818561421f565b9350613a54818560208601614318565b613a5d8161434d565b840191505092915050565b613a71816142c1565b82525050565b613a80816142d3565b82525050565b6000613a9360418361423b565b91507f4465756e6966693a20426f7567687420636f6c6c61746572616c206c6f77657260008301527f207468616e20657870656374656420636f6c6c61746572616c20746f2062757960208301527f2e000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000613b1f601e8361423b565b91507f45617379205661756c743a20496e76616c6964206f7065726174696f6e2e00006000830152602082019050919050565b6000613b5f602d8361423b565b91507f4465756e6966693a2052656d61696e696e6720746f6b656e206c6f776572207460008301527f68616e2065787065637465642e000000000000000000000000000000000000006020830152604082019050919050565b6000613bc5600083614230565b9150600082019050919050565b613bdb81614298565b82525050565b613bea81614298565b82525050565b613bf9816142a2565b82525050565b6000613c0a82613bb8565b9150819050919050565b6000602082019050613c296000830184613955565b92915050565b6000604082019050613c446000830185613937565b613c516020830184613955565b9392505050565b6000604082019050613c6d6000830185613937565b613c7a6020830184613be1565b9392505050565b600061010082019050613c97600083018b613955565b613ca4602083018a613955565b613cb16040830189613955565b613cbe6060830188613955565b613ccb6080830187613be1565b613cd860a0830186613be1565b613ce560c0830185613be1565b613cf260e0830184613a20565b9998505050505050505050565b600060c082019050613d146000830189613955565b613d216020830188613955565b613d2e6040830187613955565b613d3b6060830186613be1565b613d486080830185613be1565b613d5560a0830184613be1565b979650505050505050565b6000606082019050613d756000830186613955565b613d826020830185613955565b613d8f6040830184613be1565b949350505050565b600060e082019050613dac600083018a613955565b613db96020830189613955565b613dc66040830188613be1565b613dd36060830187613a77565b613de06080830186613a77565b613ded60a0830185613937565b613dfa60c0830184613be1565b98975050505050505050565b600061010082019050613e1c600083018b613955565b613e29602083018a613955565b613e366040830189613be1565b613e436060830188613be1565b613e506080830187613a77565b613e5d60a0830186613a77565b613e6a60c0830185613937565b613e7760e0830184613be1565b9998505050505050505050565b600060e082019050613e99600083018a613955565b8181036020830152613eab8189613964565b90508181036040830152613ebf81886139c2565b90508181036060830152613ed381876139c2565b9050613ee26080830186613955565b81810360a0830152613ef48185613a2f565b9050613f0360c0830184613a68565b98975050505050505050565b6000604082019050613f246000830185613955565b8181036020830152613f368184613a2f565b90509392505050565b6000608082019050613f546000830187613955565b613f616020830186613be1565b613f6e6040830185613be1565b613f7b6060830184613be1565b95945050505050565b6000602082019050613f996000830184613a20565b92915050565b60006020820190508181036000830152613fb881613a86565b9050919050565b60006020820190508181036000830152613fd881613b12565b9050919050565b60006020820190508181036000830152613ff881613b52565b9050919050565b60006020820190506140146000830184613be1565b92915050565b600060a08201905061402f6000830188613be1565b61403c6020830187613a77565b818103604083015261404e8186613964565b905061405d6060830185613937565b61406a6080830184613be1565b9695505050505050565b600060a0820190506140896000830188613be1565b6140966020830187613be1565b81810360408301526140a88186613964565b90506140b76060830185613937565b6140c46080830184613be1565b9695505050505050565b60006020820190506140e36000830184613bf0565b92915050565b6000604051905081810181811067ffffffffffffffff821117156141105761410f61434b565b5b8060405250919050565b600067ffffffffffffffff8211156141355761413461434b565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156141615761416061434b565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561418d5761418c61434b565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061425782614278565b9050919050565b60008115159050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006142ba826142e5565b9050919050565b60006142cc8261426a565b9050919050565b60006142de82614298565b9050919050565b60006142f0826142f7565b9050919050565b600061430282614278565b9050919050565b82818337600083830152505050565b60005b8381101561433657808201518184015260208101905061431b565b83811115614345576000848401525b50505050565bfe5b6000601f19601f8301169050919050565b6143678161424c565b811461437257600080fd5b50565b61437e8161425e565b811461438957600080fd5b50565b61439581614298565b81146143a057600080fd5b50565b6143ac816142a2565b81146143b757600080fd5b5056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a264697066735822122042a43d6cf152d128be0e1771633f1c3a6b2000332cc69724cbb697955b617b1864736f6c63430007060033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c80638da5cb5b116100595780638da5cb5b14610123578063920f5c841461014e578063c297e4181461018b578063d0fb0203146101a7578063f2fde38b146101d25761008b565b806308a427971461008d578063472d35b9146100b8578063715018a6146100e15780638348d034146100f85761008b565b5b005b34801561009957600080fd5b506100a26101fb565b6040516100af91906140ce565b60405180910390f35b3480156100c457600080fd5b506100df60048036038101906100da91906134d3565b610200565b005b3480156100ed57600080fd5b506100f66102f3565b005b34801561010457600080fd5b5061010d610460565b60405161011a91906140ce565b60405180910390f35b34801561012f57600080fd5b50610138610465565b6040516101459190613c14565b60405180910390f35b34801561015a57600080fd5b5061017560048036038101906101709190613667565b61048e565b6040516101829190613f84565b60405180910390f35b6101a560048036038101906101a091906134fc565b61053a565b005b3480156101b357600080fd5b506101bc6107a5565b6040516101c99190613c14565b60405180910390f35b3480156101de57600080fd5b506101f960048036038101906101f491906134d3565b6107cb565b005b600281565b6102086109bd565b73ffffffffffffffffffffffffffffffffffffffff16610226610465565b73ffffffffffffffffffffffffffffffffffffffff16146102af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6102fb6109bd565b73ffffffffffffffffffffffffffffffffffffffff16610319610465565b73ffffffffffffffffffffffffffffffffffffffff16146103a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600181565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008083838101906104a091906137d1565b9050600160ff16816000015160ff1614156104c7576104c281602001516109c5565b610528565b600260ff16816000015160ff1614156104ec576104e78160200151610eaf565b610527565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051e90613fbf565b60405180910390fd5b5b60019150509998505050505050505050565b60003411156105d0578073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561058b57600080fd5b505af115801561059f573d6000803e3d6000fd5b50505050506105cf89348373ffffffffffffffffffffffffffffffffffffffff1661171e9092919063ffffffff16565b5b3073ffffffffffffffffffffffffffffffffffffffff166313af40358a6040518263ffffffff1660e01b81526004016106099190613c14565b600060405180830381600087803b15801561062357600080fd5b505af1158015610637573d6000803e3d6000fd5b5050505060005b88518110156106b55761069a8b8b8a848151811061065857fe5b60200260200101518c858151811061066c57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166117c0909392919063ffffffff16565b6106ae60018261188190919063ffffffff16565b905061063e565b508573ffffffffffffffffffffffffffffffffffffffff1663ab9c4b5d8a8787878e8860006040518863ffffffff1660e01b81526004016106fc9796959493929190613e84565b600060405180830381600087803b15801561071657600080fd5b505af115801561072a573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff166313af40358b6040518263ffffffff1660e01b81526004016107679190613c14565b600060405180830381600087803b15801561078157600080fd5b505af1158015610795573d6000803e3d6000fd5b5050505050505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6107d36109bd565b73ffffffffffffffffffffffffffffffffffffffff166107f1610465565b73ffffffffffffffffffffffffffffffffffffffff161461087a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610900576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806143bb6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000818060200190518101906109db9190613812565b905060008060006109eb84611909565b925092509250836101800151831015610a39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3090613fdf565b60405180910390fd5b836101a00151821015610a81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7890613fdf565b60405180910390fd5b610ab68460200151600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660400151611b23565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610baa57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663651b8cb68560000151866020015187604001516040518463ffffffff1660e01b8152600401610b7793929190613d60565b600060405180830381600087803b158015610b9157600080fd5b505af1158015610ba5573d6000803e3d6000fd5b505050505b600073ffffffffffffffffffffffffffffffffffffffff16846102c0015173ffffffffffffffffffffffffffffffffffffffff1614610d58576000846102c0015173ffffffffffffffffffffffffffffffffffffffff16856060015173ffffffffffffffffffffffffffffffffffffffff161415610c2a57839050600093505b846102c0015173ffffffffffffffffffffffffffffffffffffffff16856080015173ffffffffffffffffffffffffffffffffffffffff161415610c6f57829050600092505b6000811115610d5657846102c0015173ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b8152600401610cb69190613fff565b600060405180830381600087803b158015610cd057600080fd5b505af1158015610ce4573d6000803e3d6000fd5b50505050846000015173ffffffffffffffffffffffffffffffffffffffff1681604051610d1090613bff565b60006040518083038185875af1925050503d8060008114610d4d576040519150601f19603f3d011682016040523d82523d6000602084013e610d52565b606091505b5050505b505b6000831180610d6c57506000846101800151115b15610da557610da4846000015184866060015173ffffffffffffffffffffffffffffffffffffffff1661171e9092919063ffffffff16565b5b6000821180610db957506000846101a00151115b15610df257610df1846000015183866080015173ffffffffffffffffffffffffffffffffffffffff1661171e9092919063ffffffff16565b5b6000811115610e2f57610e2e8460000151828660a0015173ffffffffffffffffffffffffffffffffffffffff1661171e9092919063ffffffff16565b5b610e5a8460200151856103800151610e5560028860400151611c1490919063ffffffff16565b611b23565b7fac0cbef1a8ac246924422e9ff961ee097263dc73ccb13c5780e2d048c6e228c584600001518561028001518660c001518760400151604051610ea09493929190613f3f565b60405180910390a15050505050565b600081806020019051810190610ec59190613790565b9050610f028160e0015151826101800151518360200151846040015185606001518660a00151876101400151886101000151896101a00151611c9a565b6000806000808460a0015111156110b057836080015173ffffffffffffffffffffffffffffffffffffffff16846020015173ffffffffffffffffffffffffffffffffffffffff161415610f5b578360a0015192506110ac565b83610100015115610fe3578360c001519250836060015173ffffffffffffffffffffffffffffffffffffffff16638d7ef9bb30856040518363ffffffff1660e01b8152600401610fac929190613c58565b600060405180830381600087803b158015610fc657600080fd5b505af1158015610fda573d6000803e3d6000fd5b505050506110ab565b836040015173ffffffffffffffffffffffffffffffffffffffff166338ed17398560a0015160008760e00151308961038001516040518663ffffffff1660e01b815260040161103695949392919061401a565b600060405180830381600087803b15801561105057600080fd5b505af1158015611064573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061108d919061374f565b60018560e001515103815181106110a057fe5b602002602001015192505b5b8290505b6000846101400151111561125e5783610120015173ffffffffffffffffffffffffffffffffffffffff16846020015173ffffffffffffffffffffffffffffffffffffffff16141561110857836101400151915061125d565b836101a0015115611191578361016001519150836060015173ffffffffffffffffffffffffffffffffffffffff16638d7ef9bb30846040518363ffffffff1660e01b815260040161115a929190613c58565b600060405180830381600087803b15801561117457600080fd5b505af1158015611188573d6000803e3d6000fd5b5050505061125c565b836040015173ffffffffffffffffffffffffffffffffffffffff166338ed17398561014001516000876101800151308961038001516040518663ffffffff1660e01b81526004016111e695949392919061401a565b600060405180830381600087803b15801561120057600080fd5b505af1158015611214573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061123d919061374f565b600185610180015151038151811061125157fe5b602002602001015191505b5b5b600061127883866101e0015161188190919063ffffffff16565b11156114de576112a8846080015185604001516112a386886101c0015161188190919063ffffffff16565b611b23565b6112d384610120015185604001516112ce85886101e0015161188190919063ffffffff16565b611b23565b6000806000866040015173ffffffffffffffffffffffffffffffffffffffff1663e8e33700886080015189610120015161131b8a8c6101c0015161188190919063ffffffff16565b6113338a8d6101e0015161188190919063ffffffff16565b600080308f61038001516040518963ffffffff1660e01b8152600401611360989796959493929190613e06565b606060405180830381600087803b15801561137a57600080fd5b505af115801561138e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b291906138b8565b92509250925080935060006113e7846113d9898b6101c0015161188190919063ffffffff16565b611d5490919063ffffffff16565b111561144a57611449876000015161141f856114118a8c6101c0015161188190919063ffffffff16565b611d5490919063ffffffff16565b896080015173ffffffffffffffffffffffffffffffffffffffff1661171e9092919063ffffffff16565b5b600061147683611468888b6101e0015161188190919063ffffffff16565b611d5490919063ffffffff16565b11156114da576114d987600001516114ae846114a0898c6101e0015161188190919063ffffffff16565b611d5490919063ffffffff16565b89610120015173ffffffffffffffffffffffffffffffffffffffff1661171e9092919063ffffffff16565b5b5050505b836102000151811015611526576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151d90613f9f565b60405180910390fd5b60006115408286610220015161188190919063ffffffff16565b9050611587856102400151866102600151876102800151886102a00151896102c001518a6102e001518b61030001518c6103200151898e61034001518f6103600151611dd7565b6115bd8560200151600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876103400151611b23565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146116b257600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663651b8cb6866000015187602001518861034001516040518463ffffffff1660e01b815260040161167f93929190613d60565b600060405180830381600087803b15801561169957600080fd5b505af11580156116ad573d6000803e3d6000fd5b505050505b6116cb8560200151866103a00151876103400151611b23565b7f992628f13bc2e3ecd138e194a77dfb9fb7a85e5cb3823b6d5f1030f3dc5fc2b485600001518661032001518388610340015160405161170e9493929190613f3f565b60405180910390a1505050505050565b6117bb8363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ef7565b505050565b61187b846323b872dd60e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ef7565b50505050565b6000808284019050838110156118ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600080600083604001515061194f846101e001518561020001518661022001518761024001518861026001518961028001518a60c001518b604001518c60200151611fe6565b600080611ab5604051806102200160405280886102a0015173ffffffffffffffffffffffffffffffffffffffff168152602001886060015173ffffffffffffffffffffffffffffffffffffffff168152602001886080015173ffffffffffffffffffffffffffffffffffffffff1681526020018860a0015173ffffffffffffffffffffffffffffffffffffffff1681526020018860e0015181526020018861018001518152602001886101a001518152602001886101c0015181526020018861010001518152602001886101200151815260200188610140015181526020018861016001518152602001886102e0015173ffffffffffffffffffffffffffffffffffffffff16815260200188610300015173ffffffffffffffffffffffffffffffffffffffff16815260200188610320015173ffffffffffffffffffffffffffffffffffffffff1681526020018861034001518152602001886103600151815250612100565b9150915060008073ffffffffffffffffffffffffffffffffffffffff168760a0015173ffffffffffffffffffffffffffffffffffffffff1614611b1057611b0d8760e001518860c00151611d5490919063ffffffff16565b90505b8282829550955095505050509193909250565b808373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401611b5f929190613c2f565b60206040518083038186803b158015611b7757600080fd5b505afa158015611b8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611baf9190613853565b1015611c0f57611be18260008573ffffffffffffffffffffffffffffffffffffffff166126519092919063ffffffff16565b611c0e826000198573ffffffffffffffffffffffffffffffffffffffff166126519092919063ffffffff16565b5b505050565b600080831415611c275760009050611c94565b6000828402905082848281611c3857fe5b0414611c8f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806144076021913960400191505060405180910390fd5b809150505b92915050565b60008060008b1115611cdd578315611cc657611cbf868261188190919063ffffffff16565b9050611cdc565b611cd9868361188190919063ffffffff16565b91505b5b60008a1115611d1d578215611d0657611cff858261188190919063ffffffff16565b9050611d1c565b611d19858361188190919063ffffffff16565b91505b5b6000821115611d3257611d31898984611b23565b5b6000811115611d4757611d46898883611b23565b5b5050505050505050505050565b600082821115611dcc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b611de28b8b85611b23565b8973ffffffffffffffffffffffffffffffffffffffff16631cff79cd8a8a8a8a8a8a8a8a8a604051602401611e1e989796959493929190613c81565b6040516020818303038152906040527fcbd4be3f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401611eb8929190613f0f565b600060405180830381600087803b158015611ed257600080fd5b505af1158015611ee6573d6000803e3d6000fd5b505050505050505050505050505050565b6000611f59826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166128169092919063ffffffff16565b9050600081511115611fe157808060200190516020811015611f7a57600080fd5b8101908080519060200190929190505050611fe0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180614428602a913960400191505060405180910390fd5b5b505050565b611ff1818a84611b23565b8873ffffffffffffffffffffffffffffffffffffffff16631cff79cd8989898989898960405160240161202996959493929190613cff565b6040516020818303038152906040527fa6add011000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b81526004016120c3929190613f0f565b600060405180830381600087803b1580156120dd57600080fd5b505af11580156120f1573d6000803e3d6000fd5b50505050505050505050505050565b600080600080600080600073ffffffffffffffffffffffffffffffffffffffff16876040015173ffffffffffffffffffffffffffffffffffffffff161461241357612158876060015188600001518960800151611b23565b866000015173ffffffffffffffffffffffffffffffffffffffff1663baa2abde886020015189604001518a60800151600080308e60e001516040518863ffffffff1660e01b81526004016121b29796959493929190613d97565b6040805180830381600087803b1580156121cb57600080fd5b505af11580156121df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612203919061387c565b80945081955050506000876101200151111561240e57600087610160015151141561223557866101200151905061240d565b866040015173ffffffffffffffffffffffffffffffffffffffff1687610180015173ffffffffffffffffffffffffffffffffffffffff16141561230f5761228b8760400151886101a00151896101e00151611b23565b866101c0015173ffffffffffffffffffffffffffffffffffffffff16639599127630896101e001516040518363ffffffff1660e01b81526004016122d0929190613c58565b600060405180830381600087803b1580156122ea57600080fd5b505af11580156122fe573d6000803e3d6000fd5b50505050866101e00151905061240c565b61233587604001518860000151612330600287611c1490919063ffffffff16565b611b23565b866000015173ffffffffffffffffffffffffffffffffffffffff16638803dbee8861012001516123728a60c0015187611d5490919063ffffffff16565b8a6101600151308c60e001516040518663ffffffff1660e01b815260040161239e959493929190614074565b600060405180830381600087803b1580156123b857600080fd5b505af11580156123cc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906123f5919061374f565b60008151811061240157fe5b602002602001015190505b5b5b61241b565b866080015193505b6000876101000151111561261e57600087610140015151141561244557866101000151915061261d565b866020015173ffffffffffffffffffffffffffffffffffffffff1687610180015173ffffffffffffffffffffffffffffffffffffffff16141561251f5761249b8760200151886101a00151896101e00151611b23565b866101c0015173ffffffffffffffffffffffffffffffffffffffff16639599127630896101e001516040518363ffffffff1660e01b81526004016124e0929190613c58565b600060405180830381600087803b1580156124fa57600080fd5b505af115801561250e573d6000803e3d6000fd5b50505050866101e00151915061261c565b61254587602001518860000151612540600288611c1490919063ffffffff16565b611b23565b866000015173ffffffffffffffffffffffffffffffffffffffff16638803dbee8861010001516125828a60a0015188611d5490919063ffffffff16565b8a6101400151308c60e001516040518663ffffffff1660e01b81526004016125ae959493929190614074565b600060405180830381600087803b1580156125c857600080fd5b505af11580156125dc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612605919061374f565b60008151811061261157fe5b602002602001015191505b5b5b6126318285611d5490919063ffffffff16565b6126448285611d5490919063ffffffff16565b9550955050505050915091565b600081148061271f575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b1580156126e257600080fd5b505afa1580156126f6573d6000803e3d6000fd5b505050506040513d602081101561270c57600080fd5b8101908080519060200190929190505050145b612774576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806144526036913960400191505060405180910390fd5b6128118363095ea7b360e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ef7565b505050565b6060612825848460008561282e565b90509392505050565b606082471015612889576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806143e16026913960400191505060405180910390fd5b612892856129d6565b612904576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106129535780518252602082019150602081019050602083039250612930565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146129b5576040519150601f19603f3d011682016040523d82523d6000602084013e6129ba565b606091505b50915091506129ca8282866129e9565b92505050949350505050565b600080823b905060008111915050919050565b606083156129f957829050612aae565b600083511115612a0c5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612a73578082015181840152602081019050612a58565b50505050905090810190601f168015612aa05780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b6000612ac8612ac38461411a565b6140e9565b90508083825260208201905082856020860282011115612ae757600080fd5b60005b85811015612b175781612afd8882612ca3565b845260208401935060208301925050600181019050612aea565b5050509392505050565b6000612b34612b2f8461411a565b6140e9565b90508083825260208201905082856020860282011115612b5357600080fd5b60005b85811015612b835781612b698882612cb8565b845260208401935060208301925050600181019050612b56565b5050509392505050565b6000612ba0612b9b84614146565b6140e9565b90508083825260208201905082856020860282011115612bbf57600080fd5b60005b85811015612bef5781612bd58882613494565b845260208401935060208301925050600181019050612bc2565b5050509392505050565b6000612c0c612c0784614146565b6140e9565b90508083825260208201905082856020860282011115612c2b57600080fd5b60005b85811015612c5b5781612c4188826134a9565b845260208401935060208301925050600181019050612c2e565b5050509392505050565b6000612c78612c7384614172565b6140e9565b905082815260208101848484011115612c9057600080fd5b612c9b848285614309565b509392505050565b600081359050612cb28161435e565b92915050565b600081519050612cc78161435e565b92915050565b60008083601f840112612cdf57600080fd5b8235905067ffffffffffffffff811115612cf857600080fd5b602083019150836020820283011115612d1057600080fd5b9250929050565b600082601f830112612d2857600080fd5b8135612d38848260208601612ab5565b91505092915050565b600082601f830112612d5257600080fd5b8151612d62848260208601612b21565b91505092915050565b60008083601f840112612d7d57600080fd5b8235905067ffffffffffffffff811115612d9657600080fd5b602083019150836020820283011115612dae57600080fd5b9250929050565b600082601f830112612dc657600080fd5b8135612dd6848260208601612b8d565b91505092915050565b600082601f830112612df057600080fd5b8151612e00848260208601612bf9565b91505092915050565b600081519050612e1881614375565b92915050565b60008083601f840112612e3057600080fd5b8235905067ffffffffffffffff811115612e4957600080fd5b602083019150836001820283011115612e6157600080fd5b9250929050565b600082601f830112612e7957600080fd5b8135612e89848260208601612c65565b91505092915050565b60006103c08284031215612ea557600080fd5b612eb06103c06140e9565b90506000612ec084828501612cb8565b6000830152506020612ed484828501612cb8565b6020830152506040612ee884828501612cb8565b6040830152506060612efc84828501612cb8565b6060830152506080612f1084828501612cb8565b60808301525060a0612f24848285016134a9565b60a08301525060c0612f38848285016134a9565b60c08301525060e082015167ffffffffffffffff811115612f5857600080fd5b612f6484828501612d41565b60e083015250610100612f7984828501612e09565b61010083015250610120612f8f84828501612cb8565b61012083015250610140612fa5848285016134a9565b61014083015250610160612fbb848285016134a9565b6101608301525061018082015167ffffffffffffffff811115612fdd57600080fd5b612fe984828501612d41565b610180830152506101a0612fff84828501612e09565b6101a0830152506101c0613015848285016134a9565b6101c0830152506101e061302b848285016134a9565b6101e083015250610200613041848285016134a9565b61020083015250610220613057848285016134a9565b6102208301525061024061306d84828501612cb8565b6102408301525061026061308384828501612cb8565b6102608301525061028061309984828501612cb8565b610280830152506102a06130af84828501612cb8565b6102a0830152506102c06130c584828501612cb8565b6102c0830152506102e06130db84828501612cb8565b6102e0830152506103006130f184828501612cb8565b61030083015250610320613107848285016134a9565b6103208301525061034061311d848285016134a9565b6103408301525061036061313384828501612e09565b61036083015250610380613149848285016134a9565b610380830152506103a061315f84828501612cb8565b6103a08301525092915050565b60006040828403121561317e57600080fd5b61318860406140e9565b90506000613198848285016134be565b600083015250602082013567ffffffffffffffff8111156131b857600080fd5b6131c484828501612e68565b60208301525092915050565b60006103a082840312156131e357600080fd5b6131ee6103a06140e9565b905060006131fe84828501612cb8565b600083015250602061321284828501612cb8565b6020830152506040613226848285016134a9565b604083015250606061323a84828501612cb8565b606083015250608061324e84828501612cb8565b60808301525060a061326284828501612cb8565b60a08301525060c0613276848285016134a9565b60c08301525060e061328a848285016134a9565b60e08301525061010061329f848285016134a9565b610100830152506101206132b5848285016134a9565b6101208301525061014082015167ffffffffffffffff8111156132d757600080fd5b6132e384828501612d41565b6101408301525061016082015167ffffffffffffffff81111561330557600080fd5b61331184828501612d41565b61016083015250610180613327848285016134a9565b610180830152506101a061333d848285016134a9565b6101a0830152506101c0613353848285016134a9565b6101c0830152506101e061336984828501612cb8565b6101e08301525061020061337f84828501612cb8565b6102008301525061022061339584828501612cb8565b610220830152506102406133ab84828501612cb8565b610240830152506102606133c184828501612cb8565b610260830152506102806133d7848285016134a9565b610280830152506102a06133ed84828501612cb8565b6102a0830152506102c061340384828501612cb8565b6102c0830152506102e061341984828501612cb8565b6102e08301525061030061342f84828501612cb8565b6103008301525061032061344584828501612cb8565b6103208301525061034061345b848285016134a9565b61034083015250610360613471848285016134a9565b6103608301525061038061348784828501612cb8565b6103808301525092915050565b6000813590506134a38161438c565b92915050565b6000815190506134b88161438c565b92915050565b6000813590506134cd816143a3565b92915050565b6000602082840312156134e557600080fd5b60006134f384828501612ca3565b91505092915050565b6000806000806000806000806000806101408b8d03121561351c57600080fd5b600061352a8d828e01612ca3565b9a5050602061353b8d828e01612ca3565b99505060408b013567ffffffffffffffff81111561355857600080fd5b6135648d828e01612d17565b98505060608b013567ffffffffffffffff81111561358157600080fd5b61358d8d828e01612db5565b975050608061359e8d828e01612ca3565b96505060a08b013567ffffffffffffffff8111156135bb57600080fd5b6135c78d828e01612d17565b95505060c08b013567ffffffffffffffff8111156135e457600080fd5b6135f08d828e01612db5565b94505060e08b013567ffffffffffffffff81111561360d57600080fd5b6136198d828e01612db5565b9350506101008b013567ffffffffffffffff81111561363757600080fd5b6136438d828e01612e68565b9250506101206136558d828e01612ca3565b9150509295989b9194979a5092959850565b600080600080600080600080600060a08a8c03121561368557600080fd5b60008a013567ffffffffffffffff81111561369f57600080fd5b6136ab8c828d01612ccd565b995099505060208a013567ffffffffffffffff8111156136ca57600080fd5b6136d68c828d01612d6b565b975097505060408a013567ffffffffffffffff8111156136f557600080fd5b6137018c828d01612d6b565b955095505060606137148c828d01612ca3565b93505060808a013567ffffffffffffffff81111561373157600080fd5b61373d8c828d01612e1e565b92509250509295985092959850929598565b60006020828403121561376157600080fd5b600082015167ffffffffffffffff81111561377b57600080fd5b61378784828501612ddf565b91505092915050565b6000602082840312156137a257600080fd5b600082015167ffffffffffffffff8111156137bc57600080fd5b6137c884828501612e92565b91505092915050565b6000602082840312156137e357600080fd5b600082013567ffffffffffffffff8111156137fd57600080fd5b6138098482850161316c565b91505092915050565b60006020828403121561382457600080fd5b600082015167ffffffffffffffff81111561383e57600080fd5b61384a848285016131d0565b91505092915050565b60006020828403121561386557600080fd5b6000613873848285016134a9565b91505092915050565b6000806040838503121561388f57600080fd5b600061389d858286016134a9565b92505060206138ae858286016134a9565b9150509250929050565b6000806000606084860312156138cd57600080fd5b60006138db868287016134a9565b93505060206138ec868287016134a9565b92505060406138fd868287016134a9565b9150509250925092565b60006139138383613946565b60208301905092915050565b600061392b8383613bd2565b60208301905092915050565b613940816142af565b82525050565b61394f8161424c565b82525050565b61395e8161424c565b82525050565b600061396f826141c2565b61397981856141fd565b9350613984836141a2565b8060005b838110156139b557815161399c8882613907565b97506139a7836141e3565b925050600181019050613988565b5085935050505092915050565b60006139cd826141cd565b6139d7818561420e565b93506139e2836141b2565b8060005b83811015613a135781516139fa888261391f565b9750613a05836141f0565b9250506001810190506139e6565b5085935050505092915050565b613a298161425e565b82525050565b6000613a3a826141d8565b613a44818561421f565b9350613a54818560208601614318565b613a5d8161434d565b840191505092915050565b613a71816142c1565b82525050565b613a80816142d3565b82525050565b6000613a9360418361423b565b91507f4465756e6966693a20426f7567687420636f6c6c61746572616c206c6f77657260008301527f207468616e20657870656374656420636f6c6c61746572616c20746f2062757960208301527f2e000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000613b1f601e8361423b565b91507f45617379205661756c743a20496e76616c6964206f7065726174696f6e2e00006000830152602082019050919050565b6000613b5f602d8361423b565b91507f4465756e6966693a2052656d61696e696e6720746f6b656e206c6f776572207460008301527f68616e2065787065637465642e000000000000000000000000000000000000006020830152604082019050919050565b6000613bc5600083614230565b9150600082019050919050565b613bdb81614298565b82525050565b613bea81614298565b82525050565b613bf9816142a2565b82525050565b6000613c0a82613bb8565b9150819050919050565b6000602082019050613c296000830184613955565b92915050565b6000604082019050613c446000830185613937565b613c516020830184613955565b9392505050565b6000604082019050613c6d6000830185613937565b613c7a6020830184613be1565b9392505050565b600061010082019050613c97600083018b613955565b613ca4602083018a613955565b613cb16040830189613955565b613cbe6060830188613955565b613ccb6080830187613be1565b613cd860a0830186613be1565b613ce560c0830185613be1565b613cf260e0830184613a20565b9998505050505050505050565b600060c082019050613d146000830189613955565b613d216020830188613955565b613d2e6040830187613955565b613d3b6060830186613be1565b613d486080830185613be1565b613d5560a0830184613be1565b979650505050505050565b6000606082019050613d756000830186613955565b613d826020830185613955565b613d8f6040830184613be1565b949350505050565b600060e082019050613dac600083018a613955565b613db96020830189613955565b613dc66040830188613be1565b613dd36060830187613a77565b613de06080830186613a77565b613ded60a0830185613937565b613dfa60c0830184613be1565b98975050505050505050565b600061010082019050613e1c600083018b613955565b613e29602083018a613955565b613e366040830189613be1565b613e436060830188613be1565b613e506080830187613a77565b613e5d60a0830186613a77565b613e6a60c0830185613937565b613e7760e0830184613be1565b9998505050505050505050565b600060e082019050613e99600083018a613955565b8181036020830152613eab8189613964565b90508181036040830152613ebf81886139c2565b90508181036060830152613ed381876139c2565b9050613ee26080830186613955565b81810360a0830152613ef48185613a2f565b9050613f0360c0830184613a68565b98975050505050505050565b6000604082019050613f246000830185613955565b8181036020830152613f368184613a2f565b90509392505050565b6000608082019050613f546000830187613955565b613f616020830186613be1565b613f6e6040830185613be1565b613f7b6060830184613be1565b95945050505050565b6000602082019050613f996000830184613a20565b92915050565b60006020820190508181036000830152613fb881613a86565b9050919050565b60006020820190508181036000830152613fd881613b12565b9050919050565b60006020820190508181036000830152613ff881613b52565b9050919050565b60006020820190506140146000830184613be1565b92915050565b600060a08201905061402f6000830188613be1565b61403c6020830187613a77565b818103604083015261404e8186613964565b905061405d6060830185613937565b61406a6080830184613be1565b9695505050505050565b600060a0820190506140896000830188613be1565b6140966020830187613be1565b81810360408301526140a88186613964565b90506140b76060830185613937565b6140c46080830184613be1565b9695505050505050565b60006020820190506140e36000830184613bf0565b92915050565b6000604051905081810181811067ffffffffffffffff821117156141105761410f61434b565b5b8060405250919050565b600067ffffffffffffffff8211156141355761413461434b565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156141615761416061434b565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561418d5761418c61434b565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061425782614278565b9050919050565b60008115159050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006142ba826142e5565b9050919050565b60006142cc8261426a565b9050919050565b60006142de82614298565b9050919050565b60006142f0826142f7565b9050919050565b600061430282614278565b9050919050565b82818337600083830152505050565b60005b8381101561433657808201518184015260208101905061431b565b83811115614345576000848401525b50505050565bfe5b6000601f19601f8301169050919050565b6143678161424c565b811461437257600080fd5b50565b61437e8161425e565b811461438957600080fd5b50565b61439581614298565b81146143a057600080fd5b50565b6143ac816142a2565b81146143b757600080fd5b5056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a264697066735822122042a43d6cf152d128be0e1771633f1c3a6b2000332cc69724cbb697955b617b1864736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeOperation(address[],uint256[],uint256[],address,bytes)": {
        "notice": "This function is called after your contract has received the flash loan amount"
      },
      "flashLoanFromDSProxy(address,address,address[],uint256[],address,address[],uint256[],uint256[],bytes,address)": {
        "notice": "Executed as DSProxy."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Deunifi.sol:Deunifi",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2146,
        "contract": "contracts/Deunifi.sol:Deunifi",
        "label": "feeManager",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}