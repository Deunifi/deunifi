{
  "address": "0x76fd04a2bF4E58223D57c6dd32E947f0052EfA7a",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        }
      ],
      "name": "LockAndDraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        }
      ],
      "name": "WipeAndFree",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "LOCK_AND_DRAW",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WIPE_AND_FREE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            }
          ],
          "internalType": "struct Account.Info",
          "name": "account",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "callFunction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "soloMargin",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            }
          ],
          "internalType": "struct Account.Info[]",
          "name": "accountInfos",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "enum Actions.ActionType",
              "name": "actionType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "accountId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "sign",
                  "type": "bool"
                },
                {
                  "internalType": "enum Types.AssetDenomination",
                  "name": "denomination",
                  "type": "uint8"
                },
                {
                  "internalType": "enum Types.AssetReference",
                  "name": "ref",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Types.AssetAmount",
              "name": "amount",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "primaryMarketId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "secondaryMarketId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "otherAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "otherAccountId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Actions.ActionArgs[]",
          "name": "actions",
          "type": "tuple[]"
        }
      ],
      "name": "callOperate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "ownerTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ownerAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "soloMargin",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            }
          ],
          "internalType": "struct Account.Info[]",
          "name": "accountInfos",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "enum Actions.ActionType",
              "name": "actionType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "accountId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "sign",
                  "type": "bool"
                },
                {
                  "internalType": "enum Types.AssetDenomination",
                  "name": "denomination",
                  "type": "uint8"
                },
                {
                  "internalType": "enum Types.AssetReference",
                  "name": "ref",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Types.AssetAmount",
              "name": "amount",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "primaryMarketId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "secondaryMarketId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "otherAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "otherAccountId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Actions.ActionArgs[]",
          "name": "actions",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        }
      ],
      "name": "flashLoanFromDSProxy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeManager",
          "type": "address"
        }
      ],
      "name": "setFeeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x065d237c0bdb8fdd75943ba940537a80d5c01893de131d11e9466b7132b7dba2",
  "receipt": {
    "to": null,
    "from": "0x987f1387059bAD70Bf53a9A7854B7661965637C5",
    "contractAddress": "0x76fd04a2bF4E58223D57c6dd32E947f0052EfA7a",
    "transactionIndex": 2,
    "gasUsed": "4228301",
    "logsBloom": "0x
    "blockHash": "0xfbbf9f73d5494c9f7f9adb5df543fc79821c5e41c9a71324e26f5ffeba2959b6",
    "transactionHash": "0x065d237c0bdb8fdd75943ba940537a80d5c01893de131d11e9466b7132b7dba2",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 26207381,
        "transactionHash": "0x065d237c0bdb8fdd75943ba940537a80d5c01893de131d11e9466b7132b7dba2",
        "address": "0x76fd04a2bF4E58223D57c6dd32E947f0052EfA7a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000987f1387059bad70bf53a9a7854b7661965637c5"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xfbbf9f73d5494c9f7f9adb5df543fc79821c5e41c9a71324e26f5ffeba2959b6"
      }
    ],
    "blockNumber": 26207381,
    "cumulativeGasUsed": "4295486",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "34720498cf659559d949c6fb31b9fd53",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"LockAndDraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"WipeAndFree\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"LOCK_AND_DRAW\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WIPE_AND_FREE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct Account.Info\",\"name\":\"account\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"soloMargin\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct Account.Info[]\",\"name\":\"accountInfos\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum Actions.ActionType\",\"name\":\"actionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"accountId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sign\",\"type\":\"bool\"},{\"internalType\":\"enum Types.AssetDenomination\",\"name\":\"denomination\",\"type\":\"uint8\"},{\"internalType\":\"enum Types.AssetReference\",\"name\":\"ref\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.AssetAmount\",\"name\":\"amount\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"primaryMarketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryMarketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"otherAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"otherAccountId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Actions.ActionArgs[]\",\"name\":\"actions\",\"type\":\"tuple[]\"}],\"name\":\"callOperate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"ownerTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ownerAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"soloMargin\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct Account.Info[]\",\"name\":\"accountInfos\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum Actions.ActionType\",\"name\":\"actionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"accountId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sign\",\"type\":\"bool\"},{\"internalType\":\"enum Types.AssetDenomination\",\"name\":\"denomination\",\"type\":\"uint8\"},{\"internalType\":\"enum Types.AssetReference\",\"name\":\"ref\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.AssetAmount\",\"name\":\"amount\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"primaryMarketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryMarketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"otherAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"otherAccountId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Actions.ActionArgs[]\",\"name\":\"actions\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"name\":\"flashLoanFromDSProxy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"}],\"name\":\"setFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"callOperate(address,(address,uint256)[],(uint8,uint256,(bool,uint8,uint8,uint256),uint256,uint256,address,uint256,bytes)[])\":{\"notice\":\"To call SoloMargin.operate from Deunifi, instead of DssProxy (required by SoloMargin).\"},\"flashLoanFromDSProxy(address,address,address[],uint256[],address,(address,uint256)[],(uint8,uint256,(bool,uint8,uint8,uint256),uint256,uint256,address,uint256,bytes)[],address)\":{\"notice\":\"Executed as DSProxy.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Deunifi.sol\":\"Deunifi\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xdb17a1fb73e261e736ae8862be2d9a32964fc4b3741f48980f5cdc9d92b99a96\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/Deunifi.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport { IUniswapV2Router02 } from '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\nimport { IUniswapV2Pair } from '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\nimport { IUniswapV2Callee } from '@uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol';\\n\\nimport { ILendingPool } from \\\"./ILendingPool.sol\\\";\\nimport { IFlashLoanReceiver } from \\\"./IFlashLoanReceiver.sol\\\";\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { IFeeManager } from \\\"./IFeeManager.sol\\\";\\n\\nimport { IERC3156FlashLender } from \\\"./IERC3156FlashLender.sol\\\";\\nimport { IERC3156FlashBorrower } from \\\"./IERC3156FlashBorrower.sol\\\";\\n\\nimport { Actions, Account, ISoloMargin } from \\\"./money-legos/dydx/ISoloMargin.sol\\\";\\nimport { ICallee } from \\\"./money-legos/dydx/ICallee.sol\\\";\\n\\nuint256 constant MAX_UINT256 = ~uint256(0);\\n\\n\\n// // TODO Remove \\n// import \\\"hardhat/console.sol\\\";\\n\\ninterface IDSProxy{\\n\\n    function execute(address _target, bytes calldata _data)\\n        external\\n        payable;\\n\\n    function setOwner(address owner_)\\n        external;\\n\\n}\\n\\ninterface IWeth{\\n    function deposit() external payable;\\n    function withdraw(uint wad) external;\\n}\\n\\ninterface IPsm{\\n    function buyGem(address usr, uint256 gemAmt) external;\\n    function sellGem(address usr, uint256 gemAmt) external;\\n}\\n\\ncontract Deunifi is Ownable, ICallee {\\n\\n    event LockAndDraw(address sender, uint cdp, uint collateral, uint debt);\\n    event WipeAndFree(address sender, uint cdp, uint collateral, uint debt);\\n\\n    address public feeManager;\\n\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    uint8 public constant WIPE_AND_FREE = 1;\\n    uint8 public constant LOCK_AND_DRAW = 2;\\n\\n    fallback () external payable {}\\n\\n    function setFeeManager(address _feeManager) public onlyOwner{\\n        feeManager = _feeManager;\\n    }\\n\\n    struct PayBackParameters {\\n        address sender;\\n        address debtToken;\\n        uint debtToPay;\\n        address tokenA;\\n        address tokenB;\\n        address pairToken;\\n        uint collateralAmountToFree;\\n        uint collateralAmountToUseToPayDebt;\\n        uint debtToCoverWithTokenA;\\n        uint debtToCoverWithTokenB;\\n        address[] pathTokenAToDebtToken;\\n        address[] pathTokenBToDebtToken;\\n        uint minTokenAToRecive;\\n        uint minTokenBToRecive;\\n        uint deadline;\\n        address dsProxy;\\n        address dsProxyActions;\\n        address manager;\\n        address gemJoin;\\n        address daiJoin;\\n        uint cdp;\\n        address router02;\\n        address weth;\\n\\n        // PSM swap parameters\\n        address tokenToSwapWithPsm;\\n        address tokenJoinForSwapWithPsm;\\n        address psm;\\n        uint256 psmSellGemAmount;\\n        uint256 expectedDebtTokenFromPsmSellGemOperation;\\n\\n        address lendingPool;\\n    }\\n    \\n    function lockGemAndDraw(\\n        address gemToken,\\n        address dsProxy,\\n        address dsProxyActions,\\n        address manager,\\n        address jug,\\n        address gemJoin,\\n        address daiJoin, \\n        uint cdp,\\n        uint collateralToLock,\\n        uint daiToBorrow,\\n        bool transferFrom\\n        ) internal {\\n\\n        safeIncreaseMaxUint(gemToken, dsProxy, collateralToLock);\\n\\n        IDSProxy(dsProxy).execute(\\n            dsProxyActions,\\n            abi.encodeWithSignature(\\\"lockGemAndDraw(address,address,address,address,uint256,uint256,uint256,bool)\\\",\\n                manager, jug, gemJoin, daiJoin, cdp, collateralToLock, daiToBorrow, transferFrom)\\n        );\\n\\n    }\\n\\n    struct LockAndDrawParameters{\\n\\n        address sender;\\n\\n        address debtToken;\\n\\n        address router02;\\n        address psm;\\n\\n        address token0;\\n        uint256 debtTokenForToken0;\\n        uint256 token0FromDebtToken;\\n        address[] pathFromDebtTokenToToken0;\\n        bool usePsmForToken0;\\n\\n        address token1;\\n        uint256 debtTokenForToken1;\\n        uint256 token1FromDebtToken;\\n        address[] pathFromDebtTokenToToken1;\\n        bool usePsmForToken1;\\n\\n        uint256 token0FromUser;\\n        uint256 token1FromUser;\\n\\n        uint256 minCollateralToBuy;\\n        uint256 collateralFromUser;\\n\\n        address gemToken;\\n        address dsProxy;\\n        address dsProxyActions;\\n        address manager;\\n        address jug;\\n        address gemJoin;\\n        address daiJoin;\\n        uint256 cdp;\\n        uint256 debtTokenToDraw;\\n        bool transferFrom;\\n\\n        uint256 deadline;\\n\\n        address lendingPool;\\n\\n    }\\n\\n    function approveDebtToken(uint256 pathFromDebtTokenToToken0Length, uint256 pathFromDebtTokenToToken1Length,\\n        address debtToken, address router02, address psm,\\n        uint256 debtTokenForToken0, uint256 debtTokenForToken1,\\n        bool usePsmForToken0, bool usePsmForToken1) internal {\\n        \\n        uint256 amountToApproveRouter02 = 0;\\n        uint256 amountToApprovePsm = 0;\\n\\n        if (pathFromDebtTokenToToken0Length > 0){\\n            if (usePsmForToken0)\\n                amountToApprovePsm = amountToApprovePsm.add(debtTokenForToken0);\\n            else\\n                amountToApproveRouter02 = amountToApproveRouter02.add(debtTokenForToken0);\\n        }\\n\\n        if (pathFromDebtTokenToToken1Length > 0){\\n            if (usePsmForToken1)\\n                amountToApprovePsm = amountToApprovePsm.add(debtTokenForToken1);\\n            else\\n                amountToApproveRouter02 = amountToApproveRouter02.add(debtTokenForToken1);\\n        }\\n\\n        if (amountToApproveRouter02 > 0){\\n            safeIncreaseMaxUint(debtToken, router02, \\n                amountToApproveRouter02);\\n        }\\n\\n        if (amountToApprovePsm > 0){\\n            safeIncreaseMaxUint(debtToken, psm, \\n                amountToApprovePsm);\\n        }\\n\\n    }\\n\\n    function lockAndDrawOperation(bytes memory params) internal{\\n\\n        ( LockAndDrawParameters memory parameters) = abi.decode(params, (LockAndDrawParameters));\\n        \\n        approveDebtToken(parameters.pathFromDebtTokenToToken0.length, parameters.pathFromDebtTokenToToken1.length,\\n            parameters.debtToken, parameters.router02, parameters.psm,\\n            parameters.debtTokenForToken0, parameters.debtTokenForToken1,\\n            parameters.usePsmForToken0, parameters.usePsmForToken1);\\n\\n        uint token0FromDebtToken = 0;\\n        uint token1FromDebtToken = 0;\\n        uint boughtCollateral;\\n\\n        // Swap debt token for gems or one of tokens that compose gems.\\n        if (parameters.debtTokenForToken0 > 0){\\n\\n            if (parameters.debtToken == parameters.token0){\\n\\n                token0FromDebtToken = parameters.debtTokenForToken0;\\n\\n            } else {\\n\\n                if (parameters.usePsmForToken0){\\n\\n                    token0FromDebtToken = parameters.token0FromDebtToken;\\n                    \\n                    IPsm(parameters.psm).buyGem(address(this), token0FromDebtToken);\\n\\n                }else{\\n\\n                    token0FromDebtToken = IUniswapV2Router02(parameters.router02).swapExactTokensForTokens(\\n                        parameters.debtTokenForToken0, // exact amount for token 'from'\\n                        0, // min amount to recive for token 'to'\\n                        parameters.pathFromDebtTokenToToken0, // path of swap\\n                        address(this), // reciver\\n                        parameters.deadline\\n                        )[parameters.pathFromDebtTokenToToken0.length-1];\\n\\n                }\\n\\n            }\\n\\n            boughtCollateral = token0FromDebtToken;\\n\\n        }\\n\\n        // Swap debt token the other token that compose gems.\\n        if (parameters.debtTokenForToken1 > 0){\\n\\n            if (parameters.debtToken == parameters.token1){\\n\\n                token1FromDebtToken = parameters.debtTokenForToken1;\\n\\n            } else {\\n\\n                if (parameters.usePsmForToken1){\\n\\n                    token1FromDebtToken = parameters.token1FromDebtToken;\\n                    \\n                    IPsm(parameters.psm).buyGem(address(this), token1FromDebtToken);\\n\\n                }else{\\n\\n                    token1FromDebtToken = IUniswapV2Router02(parameters.router02).swapExactTokensForTokens(\\n                        parameters.debtTokenForToken1, // exact amount for token 'from'\\n                        0, // min amount to recive for token 'to'\\n                        parameters.pathFromDebtTokenToToken1, // path of swap\\n                        address(this), // reciver\\n                        parameters.deadline\\n                        )[parameters.pathFromDebtTokenToToken1.length-1];\\n\\n                }\\n\\n            }\\n\\n        }\\n\\n        if (parameters.token1FromUser.add(token1FromDebtToken) > 0){\\n\\n            safeIncreaseMaxUint(parameters.token0, parameters.router02,\\n                parameters.token0FromUser.add(token0FromDebtToken));\\n            safeIncreaseMaxUint(parameters.token1, parameters.router02,\\n                parameters.token1FromUser.add(token1FromDebtToken));\\n\\n            ( uint token0Used, uint token1Used, uint addedLiquidity) = IUniswapV2Router02(parameters.router02).addLiquidity(\\n                parameters.token0,\\n                parameters.token1,\\n                parameters.token0FromUser.add(token0FromDebtToken),\\n                parameters.token1FromUser.add(token1FromDebtToken),\\n                0,\\n                0,\\n                address(this), // reciver\\n                parameters.deadline\\n            );\\n\\n            boughtCollateral = addedLiquidity;\\n\\n            // Remaining tokens are returned to user.\\n\\n            if (parameters.token0FromUser.add(token0FromDebtToken).sub(token0Used) > 0)\\n                IERC20(parameters.token0).safeTransfer(\\n                    parameters.sender,\\n                    parameters.token0FromUser.add(token0FromDebtToken).sub(token0Used));\\n\\n            if (parameters.token1FromUser.add(token1FromDebtToken).sub(token1Used) > 0)\\n                IERC20(parameters.token1).safeTransfer(\\n                    parameters.sender,\\n                    parameters.token1FromUser.add(token1FromDebtToken).sub(token1Used));\\n\\n        }\\n\\n        require(boughtCollateral >= parameters.minCollateralToBuy, \\\"Deunifi: Bought collateral lower than expected collateral to buy.\\\");\\n\\n        uint collateralToLock = parameters.collateralFromUser.add(boughtCollateral);\\n\\n        lockGemAndDraw(\\n            parameters.gemToken,\\n            parameters.dsProxy,\\n            parameters.dsProxyActions,\\n            parameters.manager, \\n            parameters.jug,\\n            parameters.gemJoin,\\n            parameters.daiJoin, \\n            parameters.cdp,\\n            collateralToLock,\\n            parameters.debtTokenToDraw,\\n            parameters.transferFrom\\n        );\\n\\n        // Fee Service Payment\\n        safeIncreaseMaxUint(parameters.debtToken, feeManager, \\n            parameters.debtTokenToDraw); // We are passing an amount higher so it is not necessary to calculate the fee.\\n\\n        if (feeManager!=address(0))\\n            // TODO parameters.sender\\n            IFeeManager(feeManager).collectFee(parameters.sender, parameters.debtToken, parameters.debtTokenToDraw);\\n\\n        // Approve lending pool to collect flash loan + fees.\\n        safeIncreaseMaxUint(parameters.debtToken, parameters.lendingPool,\\n            parameters.debtTokenToDraw); // We are passing an amount higher so it is not necessary to calculate the fee.\\n\\n        emit LockAndDraw(parameters.sender, parameters.cdp, collateralToLock, parameters.debtTokenToDraw);\\n        \\n    }\\n\\n    function paybackDebt(PayBackParameters memory parameters) internal\\n        returns (uint freeTokenA, uint freeTokenB, uint freePairToken){\\n\\n        parameters.debtToPay;\\n\\n        wipeAndFreeGem(\\n            parameters.dsProxy,\\n            parameters.dsProxyActions,\\n            parameters.manager,\\n            parameters.gemJoin,\\n            parameters.daiJoin,\\n            parameters.cdp,\\n            parameters.collateralAmountToFree,\\n            parameters.debtToPay,\\n            parameters.debtToken\\n        );\\n\\n        (uint remainingTokenA, uint remainingTokenB) = swapCollateralForTokens(\\n            SwapCollateralForTokensParameters(\\n                parameters.router02,\\n                parameters.tokenA,\\n                parameters.tokenB, // Optional in case of Uniswap Pair Collateral\\n                parameters.pairToken,\\n                parameters.collateralAmountToUseToPayDebt, // Amount of tokenA or liquidity to remove \\n                                    // of pair(tokenA, tokenB)\\n                parameters.minTokenAToRecive, // Min amount remaining after swap tokenA for debtToken\\n                            // (this has more sense when we are working with pairs)\\n                parameters.minTokenBToRecive, // Optional in case of Uniswap Pair Collateral\\n                parameters.deadline,\\n                parameters.debtToCoverWithTokenA, // amount in debt token\\n                parameters.debtToCoverWithTokenB, // Optional in case of Uniswap Pair Collateral\\n                parameters.pathTokenAToDebtToken, // Path to perform the swap.\\n                parameters.pathTokenBToDebtToken, // Optional in case of Uniswap Pair Collateral\\n                parameters.tokenToSwapWithPsm,\\n                parameters.tokenJoinForSwapWithPsm,\\n                parameters.psm,\\n                parameters.psmSellGemAmount,\\n                parameters.expectedDebtTokenFromPsmSellGemOperation\\n            )\\n        );\\n\\n        uint pairRemaining = 0;\\n\\n        if (parameters.pairToken != address(0)){\\n            pairRemaining = parameters.collateralAmountToFree\\n                .sub(parameters.collateralAmountToUseToPayDebt);\\n        }\\n\\n        return (remainingTokenA, remainingTokenB, pairRemaining);\\n\\n    }\\n\\n    function safeIncreaseMaxUint(address token, address spender, uint amount) internal {\\n        if (IERC20(token).allowance(address(this), spender) < amount){\\n            IERC20(token).safeApprove(spender, 0);\\n            IERC20(token).safeApprove(spender, MAX_UINT256);\\n        } \\n    }\\n\\n    /**\\n    Preconditions:\\n    - this should have enough `wadD` DAI.\\n    - DAI.allowance(this, daiJoin) >= wadD\\n    - All addresses should correspond with the expected contracts.\\n    */\\n    function wipeAndFreeGem(\\n        address dsProxy,\\n        address dsProxyActions,\\n        address manager,\\n        address gemJoin,\\n        address daiJoin,\\n        uint256 cdp,\\n        uint256 wadC,\\n        uint256 wadD,\\n        address daiToken\\n    ) internal {\\n\\n        safeIncreaseMaxUint(daiToken, dsProxy, wadD);\\n\\n        IDSProxy(dsProxy).execute(\\n            dsProxyActions,\\n            abi.encodeWithSignature(\\\"wipeAndFreeGem(address,address,address,uint256,uint256,uint256)\\\",\\n                manager, gemJoin, daiJoin, cdp, wadC, wadD)\\n        );\\n\\n    }\\n    \\n    struct SwapCollateralForTokensParameters{\\n        address router02; // Uniswap V2 Router\\n        address tokenA; // Token to be swap for debtToken\\n        address tokenB; // Optional in case of Uniswap Pair Collateral\\n        address pairToken;\\n        uint amountToUseToPayDebt; // Amount of tokenA or liquidity to remove \\n                                   // of pair(tokenA, tokenB)\\n        uint amountAMin; // Min amount remaining after swap tokenA for debtToken\\n                         // (this has more sense when we are working with pairs)\\n        uint amountBMin; // Optional in case of Uniswap Pair Collateral\\n        uint deadline;\\n        uint debtToCoverWithTokenA; // amount in debt token\\n        uint debtToCoverWithTokenB; // Optional in case of Uniswap Pair Collateral\\n        address[] pathTokenAToDebtToken; // Path to perform the swap.\\n        address[] pathTokenBToDebtToken; // Optional in case of Uniswap Pair Collateral\\n\\n        address tokenToSwapWithPsm;\\n        address tokenJoinForSwapWithPsm;\\n        address psm;\\n        uint256 psmSellGemAmount;\\n        uint256 expectedDebtTokenFromPsmSellGemOperation;\\n    }\\n\\n    /**\\n    Preconditions:\\n    - this should have enough amountToUseToPayDebt, \\n        tokenA for debtToCoverWithTokenA and \\n        tokenb for debtToCoverWithTokenB and \\n    - pair(tokenA, tokenB).allowance(this, router02) >= amountToUseToPayDebt.\\n    - tokenA.allowance(this, router02) >= (debtToCoverWithTokenA in token A)\\n    - tokenB.allowance(this, router02) >= (debtToCoverWithTokenB in token B)\\n    - All addresses should correspond with the expected contracts.\\n    - pair(tokenA, tokenB) should be a valid Uniswap V2 pair.\\n    */\\n    function swapCollateralForTokens(\\n        SwapCollateralForTokensParameters memory parameters\\n    ) internal returns (uint remainingTokenA, uint remainingTokenB) {\\n        \\n        uint amountA = 0;\\n        uint amountB = 0;\\n        uint amountACoveringDebt = 0;\\n        uint amountBCoveringDebt = 0;\\n\\n        if (parameters.tokenB!=address(0)){\\n\\n            safeIncreaseMaxUint(parameters.pairToken, parameters.router02, parameters.amountToUseToPayDebt);\\n\\n            (amountA, amountB) = IUniswapV2Router02(parameters.router02).removeLiquidity(      \\n                parameters.tokenA,\\n                parameters.tokenB,\\n                parameters.amountToUseToPayDebt,\\n                0, // Min amount of token A to recive\\n                0, // Min amount of token B to recive\\n                address(this),\\n                parameters.deadline\\n            );\\n\\n            if (parameters.debtToCoverWithTokenB > 0){\\n                \\n                if (parameters.pathTokenBToDebtToken.length == 0){\\n\\n                    amountBCoveringDebt = parameters.debtToCoverWithTokenB;\\n\\n                } else {\\n\\n                    if (parameters.tokenToSwapWithPsm == parameters.tokenB){\\n\\n                        safeIncreaseMaxUint(parameters.tokenB, parameters.tokenJoinForSwapWithPsm, \\n                            parameters.psmSellGemAmount);\\n\\n                        IPsm(parameters.psm).sellGem(address(this), parameters.psmSellGemAmount);\\n\\n                        amountBCoveringDebt = parameters.psmSellGemAmount;\\n\\n                    }else{\\n\\n                        // IERC20(parameters.tokenB).safeIncreaseAllowance(parameters.router02, amountB.sub(parameters.amountBMin));\\n                        safeIncreaseMaxUint(parameters.tokenB, parameters.router02, \\n                            amountB.mul(2));  // We are passing an amount higher because we do not know how much is going to be spent.\\n                        \\n                        amountBCoveringDebt = IUniswapV2Router02(parameters.router02).swapTokensForExactTokens(\\n                            parameters.debtToCoverWithTokenB,\\n                            amountB.sub(parameters.amountBMin), // amountInMax (Here we validate amountBMin)\\n                            parameters.pathTokenBToDebtToken,\\n                            address(this),\\n                            parameters.deadline\\n                        )[0];\\n\\n                    }\\n\\n                }\\n\\n            }\\n\\n        }else{\\n\\n            // In case we are not dealing with a pair, we need \\n            amountA = parameters.amountToUseToPayDebt;\\n\\n        }\\n\\n        if (parameters.debtToCoverWithTokenA > 0){\\n\\n                if (parameters.pathTokenAToDebtToken.length == 0){\\n\\n                    amountACoveringDebt = parameters.debtToCoverWithTokenA;\\n\\n                } else {\\n\\n                    if (parameters.tokenToSwapWithPsm == parameters.tokenA){\\n\\n                        safeIncreaseMaxUint(parameters.tokenA, parameters.tokenJoinForSwapWithPsm, \\n                            parameters.psmSellGemAmount);\\n\\n                        IPsm(parameters.psm).sellGem(address(this), parameters.psmSellGemAmount);\\n\\n                        amountACoveringDebt = parameters.psmSellGemAmount;\\n\\n                    }else{\\n\\n                        // IERC20(parameters.tokenA).safeIncreaseAllowance(parameters.router02, amountA.sub(parameters.amountAMin));\\n                        safeIncreaseMaxUint(parameters.tokenA, parameters.router02,\\n                            amountA.mul(2)); // We are passing an amount higher because we do not know how much is going to be spent.\\n\\n                        amountACoveringDebt = IUniswapV2Router02(parameters.router02).swapTokensForExactTokens(\\n                            parameters.debtToCoverWithTokenA,\\n                            amountA.sub(parameters.amountAMin), // amountInMax (Here we validate amountAMin)\\n                            parameters.pathTokenAToDebtToken,\\n                            address(this),\\n                            parameters.deadline\\n                        )[0];\\n\\n                    }\\n\\n                }\\n\\n        }\\n\\n        return (\\n            amountA.sub(amountACoveringDebt),\\n            amountB.sub(amountBCoveringDebt)\\n            );\\n\\n    }\\n\\n    function wipeAndFreeOperation(bytes memory params) internal{\\n\\n        ( PayBackParameters memory decodedData ) = abi.decode(params, (PayBackParameters));\\n\\n        (uint remainingTokenA, uint remainingTokenB, uint pairRemaining) = paybackDebt(decodedData);\\n\\n        require(remainingTokenA >= decodedData.minTokenAToRecive, \\\"Deunifi: Remaining token lower than expected.\\\");\\n        require(remainingTokenB >= decodedData.minTokenBToRecive, \\\"Deunifi: Remaining token lower than expected.\\\");\\n\\n        // Fee Service Payment\\n        safeIncreaseMaxUint(decodedData.debtToken, feeManager, \\n            decodedData.debtToPay); // We are passing an amount higher so it is not necessary to calculate the fee.\\n\\n        if (feeManager!=address(0))\\n            IFeeManager(feeManager).collectFee(decodedData.sender, decodedData.debtToken, decodedData.debtToPay);\\n\\n        // Conversion from WETH to ETH when needed.\\n        if (decodedData.weth != address(0)){\\n\\n            uint wethBalance = 0;\\n\\n            if (decodedData.tokenA == decodedData.weth){\\n                wethBalance = remainingTokenA;\\n                remainingTokenA = 0;\\n            }\\n\\n            if (decodedData.tokenB == decodedData.weth){\\n                wethBalance = remainingTokenB;\\n                remainingTokenB = 0;\\n            }\\n\\n            if (wethBalance>0){\\n                IWeth(decodedData.weth).withdraw(wethBalance);\\n                decodedData.sender.call{value: wethBalance}(\\\"\\\");\\n            }\\n        }\\n\\n        if (remainingTokenA > 0 || decodedData.minTokenAToRecive > 0){\\n            IERC20(decodedData.tokenA).safeTransfer(decodedData.sender, remainingTokenA);\\n        }\\n\\n        if (remainingTokenB > 0 || decodedData.minTokenBToRecive > 0){\\n            IERC20(decodedData.tokenB).safeTransfer(decodedData.sender, remainingTokenB);\\n        }\\n\\n        if (pairRemaining > 0){\\n            // We do not verify because pairRemaining because the contract should have only\\n            // the exact amount to transfer.\\n            IERC20(decodedData.pairToken).safeTransfer(decodedData.sender, pairRemaining);\\n        }\\n\\n        safeIncreaseMaxUint(decodedData.debtToken, decodedData.lendingPool,\\n            decodedData.debtToPay.mul(2)); // We are passing an amount higher so it is not necessary to calculate the fee.\\n\\n        emit WipeAndFree(decodedData.sender, decodedData.cdp, decodedData.collateralAmountToFree, decodedData.debtToPay);\\n\\n    }\\n\\n    struct Operation{\\n        uint8 operation;\\n        bytes data;\\n    }\\n\\n    function callFunction(\\n        address sender,\\n        Account.Info memory account,\\n        bytes memory data\\n    ) external override {\\n        \\n        ( Operation memory operation ) = abi.decode(data, (Operation));\\n\\n        if (operation.operation == WIPE_AND_FREE)\\n            wipeAndFreeOperation(operation.data);\\n        else if(operation.operation == LOCK_AND_DRAW)\\n            lockAndDrawOperation(operation.data);\\n        else\\n            revert('Deunifi: Invalid operation.');\\n\\n    }\\n\\n    /**\\n    To call SoloMargin.operate from Deunifi, instead of DssProxy (required by SoloMargin).\\n    */\\n    function callOperate(\\n        address soloMargin,\\n        Account.Info[] memory accountInfos,\\n        Actions.ActionArgs[] memory actions\\n        ) public {\\n\\n        ISoloMargin(soloMargin).operate(accountInfos, actions);\\n    }\\n\\n    /**\\n    Executed as DSProxy.\\n     */\\n    function flashLoanFromDSProxy(\\n        address owner, // Owner of DSProxy calling this function.\\n        address payable target, // Target contract that will resolve the flash loan. // TODO check payable \\n        address[] memory ownerTokens, // owner tokens to transfer to target\\n        uint[] memory ownerAmounts, // owner token amounts to transfer to target\\n        address soloMargin,\\n        Account.Info[] memory accountInfos,\\n        Actions.ActionArgs[] memory actions,\\n        address weth // When has to use or recive ETH, else should be address(0)\\n        ) public payable{\\n\\n        if (msg.value > 0){\\n            IWeth(weth).deposit{value: msg.value}();\\n            IERC20(weth).safeTransfer(\\n                target, msg.value\\n            );\\n        }\\n\\n        IDSProxy(address(this)).setOwner(target);\\n\\n        for (uint i=0; i<ownerTokens.length; i=i.add(1)){\\n            IERC20(ownerTokens[i]).safeTransferFrom(\\n                owner, target, ownerAmounts[i]\\n            );\\n        }\\n\\n        Deunifi(target).callOperate(soloMargin, accountInfos, actions);\\n\\n        IDSProxy(address(this)).setOwner(owner);\\n        \\n    }\\n\\n}\\n\",\"keccak256\":\"0xc0d892a55d9b34ca71e36a521d7d1491e848ecd16a6cec150d2153178d26c3d5\",\"license\":\"UNLICENSED\"},\"contracts/IERC3156FlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright (C) 2021 Dai Foundation\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.6.12;\\n\\ninterface IERC3156FlashBorrower {\\n\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc2c0ec91236600daeea7351b581d50827fd726ca6f999c1870e537f9f47b9395\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/IERC3156FlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright (C) 2021 Dai Foundation\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.6.12;\\n\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\ninterface IERC3156FlashLender {\\n\\n    /**\\n     * @dev The amount of currency available to be lent.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(\\n        address token\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(\\n        address token,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd3353666af6bdca1788f8b22a0089813a4d110c43f6899e2d459f5a73e954ee0\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/IFeeManager.sol\":{\"content\":\"pragma solidity 0.7.6;\\n\\ninterface IFeeManager{\\n\\n    function collectFee(address sender, address debtToken, uint baseAmount) external;\\n\\n}\\n\",\"keccak256\":\"0x5183c426e684c634dd64c079a968d8f55b61e8cc214a880102bae938619e1859\"},\"contracts/IFlashLoanReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\ninterface IFlashLoanReceiver {\\n    function executeOperation(\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata params\\n    ) external returns (bool);\\n}\\n\\n\",\"keccak256\":\"0x7dd2f2861934f603a30f70251db1350f68898a543bacc097022a9e3882633781\",\"license\":\"UNLICENSED\"},\"contracts/ILendingPool.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\ninterface ILendingPool{\\n\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    function FLASHLOAN_PREMIUM_TOTAL()\\n        external view\\n        returns(uint256);\\n\\n}\\n\\n\",\"keccak256\":\"0xf7ca081bda54ae970b726ef224bdec27ec7277cc9753bdd4b37551d1e7ce2370\",\"license\":\"UNLICENSED\"},\"contracts/money-legos/dydx/ICallee.sol\":{\"content\":\"pragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport { Account } from \\\"./ISoloMargin.sol\\\";\\n\\n\\n/**\\n * @title ICallee\\n * @author dYdX\\n *\\n * Interface that Callees for Solo must implement in order to ingest data.\\n */\\ninterface ICallee {\\n\\n    // ============ Public Functions ============\\n\\n    /**\\n     * Allows users to send this contract arbitrary data.\\n     *\\n     * @param  sender       The msg.sender to Solo\\n     * @param  accountInfo  The account from which the data is being sent\\n     * @param  data         Arbitrary data given by the sender\\n     */\\n    function callFunction(\\n        address sender,\\n        Account.Info memory accountInfo,\\n        bytes memory data\\n    )\\n        external;\\n}\",\"keccak256\":\"0x705b377ff3d2acc5310359165b9b97446b99d0ff8ee6d39547f3916c21cb8a1e\"},\"contracts/money-legos/dydx/ISoloMargin.sol\":{\"content\":\"pragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n\\nlibrary Account {\\n    enum Status {Normal, Liquid, Vapor}\\n    struct Info {\\n        address owner; // The address that owns the account\\n        uint256 number; // A nonce that allows a single address to control many accounts\\n    }\\n    struct Storage {\\n        mapping(uint256 => Types.Par) balances; // Mapping from marketId to principal\\n        Status status;\\n    }\\n}\\n\\n\\nlibrary Actions {\\n    enum ActionType {\\n        Deposit, // supply tokens\\n        Withdraw, // borrow tokens\\n        Transfer, // transfer balance between accounts\\n        Buy, // buy an amount of some token (externally)\\n        Sell, // sell an amount of some token (externally)\\n        Trade, // trade tokens against another account\\n        Liquidate, // liquidate an undercollateralized or expiring account\\n        Vaporize, // use excess tokens to zero-out a completely negative account\\n        Call // send arbitrary data to an address\\n    }\\n\\n    enum AccountLayout {OnePrimary, TwoPrimary, PrimaryAndSecondary}\\n\\n    enum MarketLayout {ZeroMarkets, OneMarket, TwoMarkets}\\n\\n    struct ActionArgs {\\n        ActionType actionType;\\n        uint256 accountId;\\n        Types.AssetAmount amount;\\n        uint256 primaryMarketId;\\n        uint256 secondaryMarketId;\\n        address otherAddress;\\n        uint256 otherAccountId;\\n        bytes data;\\n    }\\n\\n    struct DepositArgs {\\n        Types.AssetAmount amount;\\n        Account.Info account;\\n        uint256 market;\\n        address from;\\n    }\\n\\n    struct WithdrawArgs {\\n        Types.AssetAmount amount;\\n        Account.Info account;\\n        uint256 market;\\n        address to;\\n    }\\n\\n    struct TransferArgs {\\n        Types.AssetAmount amount;\\n        Account.Info accountOne;\\n        Account.Info accountTwo;\\n        uint256 market;\\n    }\\n\\n    struct BuyArgs {\\n        Types.AssetAmount amount;\\n        Account.Info account;\\n        uint256 makerMarket;\\n        uint256 takerMarket;\\n        address exchangeWrapper;\\n        bytes orderData;\\n    }\\n\\n    struct SellArgs {\\n        Types.AssetAmount amount;\\n        Account.Info account;\\n        uint256 takerMarket;\\n        uint256 makerMarket;\\n        address exchangeWrapper;\\n        bytes orderData;\\n    }\\n\\n    struct TradeArgs {\\n        Types.AssetAmount amount;\\n        Account.Info takerAccount;\\n        Account.Info makerAccount;\\n        uint256 inputMarket;\\n        uint256 outputMarket;\\n        address autoTrader;\\n        bytes tradeData;\\n    }\\n\\n    struct LiquidateArgs {\\n        Types.AssetAmount amount;\\n        Account.Info solidAccount;\\n        Account.Info liquidAccount;\\n        uint256 owedMarket;\\n        uint256 heldMarket;\\n    }\\n\\n    struct VaporizeArgs {\\n        Types.AssetAmount amount;\\n        Account.Info solidAccount;\\n        Account.Info vaporAccount;\\n        uint256 owedMarket;\\n        uint256 heldMarket;\\n    }\\n\\n    struct CallArgs {\\n        Account.Info account;\\n        address callee;\\n        bytes data;\\n    }\\n}\\n\\n\\nlibrary Decimal {\\n    struct D256 {\\n        uint256 value;\\n    }\\n}\\n\\n\\nlibrary Interest {\\n    struct Rate {\\n        uint256 value;\\n    }\\n\\n    struct Index {\\n        uint96 borrow;\\n        uint96 supply;\\n        uint32 lastUpdate;\\n    }\\n}\\n\\n\\nlibrary Monetary {\\n    struct Price {\\n        uint256 value;\\n    }\\n    struct Value {\\n        uint256 value;\\n    }\\n}\\n\\n\\nlibrary Storage {\\n    // All information necessary for tracking a market\\n    struct Market {\\n        // Contract address of the associated ERC20 token\\n        address token;\\n        // Total aggregated supply and borrow amount of the entire market\\n        Types.TotalPar totalPar;\\n        // Interest index of the market\\n        Interest.Index index;\\n        // Contract address of the price oracle for this market\\n        address priceOracle;\\n        // Contract address of the interest setter for this market\\n        address interestSetter;\\n        // Multiplier on the marginRatio for this market\\n        Decimal.D256 marginPremium;\\n        // Multiplier on the liquidationSpread for this market\\n        Decimal.D256 spreadPremium;\\n        // Whether additional borrows are allowed for this market\\n        bool isClosing;\\n    }\\n\\n    // The global risk parameters that govern the health and security of the system\\n    struct RiskParams {\\n        // Required ratio of over-collateralization\\n        Decimal.D256 marginRatio;\\n        // Percentage penalty incurred by liquidated accounts\\n        Decimal.D256 liquidationSpread;\\n        // Percentage of the borrower's interest fee that gets passed to the suppliers\\n        Decimal.D256 earningsRate;\\n        // The minimum absolute borrow value of an account\\n        // There must be sufficient incentivize to liquidate undercollateralized accounts\\n        Monetary.Value minBorrowedValue;\\n    }\\n\\n    // The maximum RiskParam values that can be set\\n    struct RiskLimits {\\n        uint64 marginRatioMax;\\n        uint64 liquidationSpreadMax;\\n        uint64 earningsRateMax;\\n        uint64 marginPremiumMax;\\n        uint64 spreadPremiumMax;\\n        uint128 minBorrowedValueMax;\\n    }\\n\\n    // The entire storage state of Solo\\n    struct State {\\n        // number of markets\\n        uint256 numMarkets;\\n        // marketId => Market\\n        mapping(uint256 => Market) markets;\\n        // owner => account number => Account\\n        mapping(address => mapping(uint256 => Account.Storage)) accounts;\\n        // Addresses that can control other users accounts\\n        mapping(address => mapping(address => bool)) operators;\\n        // Addresses that can control all users accounts\\n        mapping(address => bool) globalOperators;\\n        // mutable risk parameters of the system\\n        RiskParams riskParams;\\n        // immutable risk limits of the system\\n        RiskLimits riskLimits;\\n    }\\n}\\n\\n\\nlibrary Types {\\n    enum AssetDenomination {\\n        Wei, // the amount is denominated in wei\\n        Par // the amount is denominated in par\\n    }\\n\\n    enum AssetReference {\\n        Delta, // the amount is given as a delta from the current value\\n        Target // the amount is given as an exact number to end up at\\n    }\\n\\n    struct AssetAmount {\\n        bool sign; // true if positive\\n        AssetDenomination denomination;\\n        AssetReference ref;\\n        uint256 value;\\n    }\\n\\n    struct TotalPar {\\n        uint128 borrow;\\n        uint128 supply;\\n    }\\n\\n    struct Par {\\n        bool sign; // true if positive\\n        uint128 value;\\n    }\\n\\n    struct Wei {\\n        bool sign; // true if positive\\n        uint256 value;\\n    }\\n}\\n\\n\\ninterface ISoloMargin {\\n    struct OperatorArg {\\n        address operator;\\n        bool trusted;\\n    }\\n\\n    function ownerSetSpreadPremium(\\n        uint256 marketId,\\n        Decimal.D256 memory spreadPremium\\n    ) external;\\n\\n    function getIsGlobalOperator(address operator) external view returns (bool);\\n\\n    function getMarketTokenAddress(uint256 marketId)\\n        external\\n        view\\n        returns (address);\\n\\n    function ownerSetInterestSetter(uint256 marketId, address interestSetter)\\n        external;\\n\\n    function getAccountValues(Account.Info memory account)\\n        external\\n        view\\n        returns (Monetary.Value memory, Monetary.Value memory);\\n\\n    function getMarketPriceOracle(uint256 marketId)\\n        external\\n        view\\n        returns (address);\\n\\n    function getMarketInterestSetter(uint256 marketId)\\n        external\\n        view\\n        returns (address);\\n\\n    function getMarketSpreadPremium(uint256 marketId)\\n        external\\n        view\\n        returns (Decimal.D256 memory);\\n\\n    function getNumMarkets() external view returns (uint256);\\n\\n    function ownerWithdrawUnsupportedTokens(address token, address recipient)\\n        external\\n        returns (uint256);\\n\\n    function ownerSetMinBorrowedValue(Monetary.Value memory minBorrowedValue)\\n        external;\\n\\n    function ownerSetLiquidationSpread(Decimal.D256 memory spread) external;\\n\\n    function ownerSetEarningsRate(Decimal.D256 memory earningsRate) external;\\n\\n    function getIsLocalOperator(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getAccountPar(Account.Info memory account, uint256 marketId)\\n        external\\n        view\\n        returns (Types.Par memory);\\n\\n    function ownerSetMarginPremium(\\n        uint256 marketId,\\n        Decimal.D256 memory marginPremium\\n    ) external;\\n\\n    function getMarginRatio() external view returns (Decimal.D256 memory);\\n\\n    function getMarketCurrentIndex(uint256 marketId)\\n        external\\n        view\\n        returns (Interest.Index memory);\\n\\n    function getMarketIsClosing(uint256 marketId) external view returns (bool);\\n\\n    function getRiskParams() external view returns (Storage.RiskParams memory);\\n\\n    function getAccountBalances(Account.Info memory account)\\n        external\\n        view\\n        returns (address[] memory, Types.Par[] memory, Types.Wei[] memory);\\n\\n    function renounceOwnership() external;\\n\\n    function getMinBorrowedValue() external view returns (Monetary.Value memory);\\n\\n    function setOperators(OperatorArg[] memory args) external;\\n\\n    function getMarketPrice(uint256 marketId) external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function isOwner() external view returns (bool);\\n\\n    function ownerWithdrawExcessTokens(uint256 marketId, address recipient)\\n        external\\n        returns (uint256);\\n\\n    function ownerAddMarket(\\n        address token,\\n        address priceOracle,\\n        address interestSetter,\\n        Decimal.D256 memory marginPremium,\\n        Decimal.D256 memory spreadPremium\\n    ) external;\\n\\n    function operate(\\n        Account.Info[] memory accounts,\\n        Actions.ActionArgs[] memory actions\\n    ) external;\\n\\n    function getMarketWithInfo(uint256 marketId)\\n        external\\n        view\\n        returns (\\n            Storage.Market memory,\\n            Interest.Index memory,\\n            Monetary.Price memory,\\n            Interest.Rate memory\\n        );\\n\\n    function ownerSetMarginRatio(Decimal.D256 memory ratio) external;\\n\\n    function getLiquidationSpread() external view returns (Decimal.D256 memory);\\n\\n    function getAccountWei(Account.Info memory account, uint256 marketId)\\n        external\\n        view\\n        returns (Types.Wei memory);\\n\\n    function getMarketTotalPar(uint256 marketId)\\n        external\\n        view\\n        returns (Types.TotalPar memory);\\n\\n    function getLiquidationSpreadForPair(\\n        uint256 heldMarketId,\\n        uint256 owedMarketId\\n    ) external view returns (Decimal.D256 memory);\\n\\n    function getNumExcessTokens(uint256 marketId)\\n        external\\n        view\\n        returns (Types.Wei memory);\\n\\n    function getMarketCachedIndex(uint256 marketId)\\n        external\\n        view\\n        returns (Interest.Index memory);\\n\\n    function getAccountStatus(Account.Info memory account)\\n        external\\n        view\\n        returns (uint8);\\n\\n    function getEarningsRate() external view returns (Decimal.D256 memory);\\n\\n    function ownerSetPriceOracle(uint256 marketId, address priceOracle) external;\\n\\n    function getRiskLimits() external view returns (Storage.RiskLimits memory);\\n\\n    function getMarket(uint256 marketId)\\n        external\\n        view\\n        returns (Storage.Market memory);\\n\\n    function ownerSetIsClosing(uint256 marketId, bool isClosing) external;\\n\\n    function ownerSetGlobalOperator(address operator, bool approved) external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function getAdjustedAccountValues(Account.Info memory account)\\n        external\\n        view\\n        returns (Monetary.Value memory, Monetary.Value memory);\\n\\n    function getMarketMarginPremium(uint256 marketId)\\n        external\\n        view\\n        returns (Decimal.D256 memory);\\n\\n    function getMarketInterestRate(uint256 marketId)\\n        external\\n        view\\n        returns (Interest.Rate memory);\\n}\\n\",\"keccak256\":\"0x32807f17bb899e0c694f2ced9a710e6ce294becb6518f74b3ed961adad789057\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600062000024620000c860201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350620000d0565b600033905090565b614b2f80620000e06000396000f3fe6080604052600436106100955760003560e01c80638da5cb5b116100595780638da5cb5b146101575780639165ad8b14610182578063a281e17a146101ab578063d0fb0203146101c7578063f2fde38b146101f257610096565b806308a4279714610098578063472d35b9146100c3578063715018a6146100ec5780638348d034146101035780638b4187131461012e57610096565b5b005b3480156100a457600080fd5b506100ad61021b565b6040516100ba91906145ba565b60405180910390f35b3480156100cf57600080fd5b506100ea60048036038101906100e59190613803565b610220565b005b3480156100f857600080fd5b50610101610313565b005b34801561010f57600080fd5b50610118610480565b60405161012591906145ba565b60405180910390f35b34801561013a57600080fd5b50610155600480360381019061015091906139bd565b610485565b005b34801561016357600080fd5b5061016c610529565b604051610179919061410f565b60405180910390f35b34801561018e57600080fd5b506101a960048036038101906101a4919061393e565b610552565b005b6101c560048036038101906101c0919061382c565b6105c4565b005b3480156101d357600080fd5b506101dc610824565b6040516101e9919061410f565b60405180910390f35b3480156101fe57600080fd5b5061021960048036038101906102149190613803565b61084a565b005b600281565b610228610a3c565b73ffffffffffffffffffffffffffffffffffffffff16610246610529565b73ffffffffffffffffffffffffffffffffffffffff16146102cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61031b610a3c565b73ffffffffffffffffffffffffffffffffffffffff16610339610529565b73ffffffffffffffffffffffffffffffffffffffff16146103c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600181565b60008180602001905181019061049b9190613aa6565b9050600160ff16816000015160ff1614156104c2576104bd8160200151610a44565b610523565b600260ff16816000015160ff1614156104e7576104e28160200151610f2e565b610522565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610519906144cb565b60405180910390fd5b5b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b8273ffffffffffffffffffffffffffffffffffffffff1663a67a6a4583836040518363ffffffff1660e01b815260040161058d929190614454565b600060405180830381600087803b1580156105a757600080fd5b505af11580156105bb573d6000803e3d6000fd5b50505050505050565b600034111561065a578073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561061557600080fd5b505af1158015610629573d6000803e3d6000fd5b505050505061065987348373ffffffffffffffffffffffffffffffffffffffff1661179d9092919063ffffffff16565b5b3073ffffffffffffffffffffffffffffffffffffffff166313af4035886040518263ffffffff1660e01b8152600401610693919061412a565b600060405180830381600087803b1580156106ad57600080fd5b505af11580156106c1573d6000803e3d6000fd5b5050505060005b865181101561073f5761072489898884815181106106e257fe5b60200260200101518a85815181106106f657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1661183f909392919063ffffffff16565b61073860018261190090919063ffffffff16565b90506106c8565b508673ffffffffffffffffffffffffffffffffffffffff16639165ad8b8585856040518463ffffffff1660e01b815260040161077d9392919061439a565b600060405180830381600087803b15801561079757600080fd5b505af11580156107ab573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff166313af4035896040518263ffffffff1660e01b81526004016107e8919061410f565b600060405180830381600087803b15801561080257600080fd5b505af1158015610816573d6000803e3d6000fd5b505050505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610852610a3c565b73ffffffffffffffffffffffffffffffffffffffff16610870610529565b73ffffffffffffffffffffffffffffffffffffffff16146108f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561097f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180614a2d6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600081806020019051810190610a5a9190613ae7565b90506000806000610a6a84611988565b925092509250836101800151831015610ab8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aaf906144ab565b60405180910390fd5b836101a00151821015610b00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af7906144ab565b60405180910390fd5b610b358460200151600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660400151611ba2565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c2957600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663651b8cb68560000151866020015187604001516040518463ffffffff1660e01b8152600401610bf693929190614276565b600060405180830381600087803b158015610c1057600080fd5b505af1158015610c24573d6000803e3d6000fd5b505050505b600073ffffffffffffffffffffffffffffffffffffffff16846102c0015173ffffffffffffffffffffffffffffffffffffffff1614610dd7576000846102c0015173ffffffffffffffffffffffffffffffffffffffff16856060015173ffffffffffffffffffffffffffffffffffffffff161415610ca957839050600093505b846102c0015173ffffffffffffffffffffffffffffffffffffffff16856080015173ffffffffffffffffffffffffffffffffffffffff161415610cee57829050600092505b6000811115610dd557846102c0015173ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b8152600401610d3591906144eb565b600060405180830381600087803b158015610d4f57600080fd5b505af1158015610d63573d6000803e3d6000fd5b50505050846000015173ffffffffffffffffffffffffffffffffffffffff1681604051610d8f906140fa565b60006040518083038185875af1925050503d8060008114610dcc576040519150601f19603f3d011682016040523d82523d6000602084013e610dd1565b606091505b5050505b505b6000831180610deb57506000846101800151115b15610e2457610e23846000015184866060015173ffffffffffffffffffffffffffffffffffffffff1661179d9092919063ffffffff16565b5b6000821180610e3857506000846101a00151115b15610e7157610e70846000015183866080015173ffffffffffffffffffffffffffffffffffffffff1661179d9092919063ffffffff16565b5b6000811115610eae57610ead8460000151828660a0015173ffffffffffffffffffffffffffffffffffffffff1661179d9092919063ffffffff16565b5b610ed98460200151856103800151610ed460028860400151611c9390919063ffffffff16565b611ba2565b7fac0cbef1a8ac246924422e9ff961ee097263dc73ccb13c5780e2d048c6e228c584600001518561028001518660c001518760400151604051610f1f949392919061440f565b60405180910390a15050505050565b600081806020019051810190610f449190613a65565b9050610f818160e0015151826101800151518360200151846040015185606001518660a00151876101400151886101000151896101a00151611d19565b6000806000808460a00151111561112f57836080015173ffffffffffffffffffffffffffffffffffffffff16846020015173ffffffffffffffffffffffffffffffffffffffff161415610fda578360a00151925061112b565b83610100015115611062578360c001519250836060015173ffffffffffffffffffffffffffffffffffffffff16638d7ef9bb30856040518363ffffffff1660e01b815260040161102b92919061416e565b600060405180830381600087803b15801561104557600080fd5b505af1158015611059573d6000803e3d6000fd5b5050505061112a565b836040015173ffffffffffffffffffffffffffffffffffffffff166338ed17398560a0015160008760e00151308961038001516040518663ffffffff1660e01b81526004016110b5959493929190614506565b600060405180830381600087803b1580156110cf57600080fd5b505af11580156110e3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061110c9190613a24565b60018560e0015151038151811061111f57fe5b602002602001015192505b5b8290505b600084610140015111156112dd5783610120015173ffffffffffffffffffffffffffffffffffffffff16846020015173ffffffffffffffffffffffffffffffffffffffff1614156111875783610140015191506112dc565b836101a0015115611210578361016001519150836060015173ffffffffffffffffffffffffffffffffffffffff16638d7ef9bb30846040518363ffffffff1660e01b81526004016111d992919061416e565b600060405180830381600087803b1580156111f357600080fd5b505af1158015611207573d6000803e3d6000fd5b505050506112db565b836040015173ffffffffffffffffffffffffffffffffffffffff166338ed17398561014001516000876101800151308961038001516040518663ffffffff1660e01b8152600401611265959493929190614506565b600060405180830381600087803b15801561127f57600080fd5b505af1158015611293573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906112bc9190613a24565b60018561018001515103815181106112d057fe5b602002602001015191505b5b5b60006112f783866101e0015161190090919063ffffffff16565b111561155d576113278460800151856040015161132286886101c0015161190090919063ffffffff16565b611ba2565b611352846101200151856040015161134d85886101e0015161190090919063ffffffff16565b611ba2565b6000806000866040015173ffffffffffffffffffffffffffffffffffffffff1663e8e33700886080015189610120015161139a8a8c6101c0015161190090919063ffffffff16565b6113b28a8d6101e0015161190090919063ffffffff16565b600080308f61038001516040518963ffffffff1660e01b81526004016113df98979695949392919061431c565b606060405180830381600087803b1580156113f957600080fd5b505af115801561140d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114319190613b8d565b925092509250809350600061146684611458898b6101c0015161190090919063ffffffff16565b611dd390919063ffffffff16565b11156114c9576114c8876000015161149e856114908a8c6101c0015161190090919063ffffffff16565b611dd390919063ffffffff16565b896080015173ffffffffffffffffffffffffffffffffffffffff1661179d9092919063ffffffff16565b5b60006114f5836114e7888b6101e0015161190090919063ffffffff16565b611dd390919063ffffffff16565b111561155957611558876000015161152d8461151f898c6101e0015161190090919063ffffffff16565b611dd390919063ffffffff16565b89610120015173ffffffffffffffffffffffffffffffffffffffff1661179d9092919063ffffffff16565b5b5050505b8361020001518110156115a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159c9061448b565b60405180910390fd5b60006115bf8286610220015161190090919063ffffffff16565b9050611606856102400151866102600151876102800151886102a00151896102c001518a6102e001518b61030001518c6103200151898e61034001518f6103600151611e56565b61163c8560200151600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876103400151611ba2565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461173157600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663651b8cb6866000015187602001518861034001516040518463ffffffff1660e01b81526004016116fe93929190614276565b600060405180830381600087803b15801561171857600080fd5b505af115801561172c573d6000803e3d6000fd5b505050505b61174a8560200151866103a00151876103400151611ba2565b7f992628f13bc2e3ecd138e194a77dfb9fb7a85e5cb3823b6d5f1030f3dc5fc2b485600001518661032001518388610340015160405161178d949392919061440f565b60405180910390a1505050505050565b61183a8363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611f76565b505050565b6118fa846323b872dd60e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611f76565b50505050565b60008082840190508381101561197e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b60008060008360400151506119ce846101e001518561020001518661022001518761024001518861026001518961028001518a60c001518b604001518c60200151612065565b600080611b34604051806102200160405280886102a0015173ffffffffffffffffffffffffffffffffffffffff168152602001886060015173ffffffffffffffffffffffffffffffffffffffff168152602001886080015173ffffffffffffffffffffffffffffffffffffffff1681526020018860a0015173ffffffffffffffffffffffffffffffffffffffff1681526020018860e0015181526020018861018001518152602001886101a001518152602001886101c0015181526020018861010001518152602001886101200151815260200188610140015181526020018861016001518152602001886102e0015173ffffffffffffffffffffffffffffffffffffffff16815260200188610300015173ffffffffffffffffffffffffffffffffffffffff16815260200188610320015173ffffffffffffffffffffffffffffffffffffffff168152602001886103400151815260200188610360015181525061217f565b9150915060008073ffffffffffffffffffffffffffffffffffffffff168760a0015173ffffffffffffffffffffffffffffffffffffffff1614611b8f57611b8c8760e001518860c00151611dd390919063ffffffff16565b90505b8282829550955095505050509193909250565b808373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401611bde929190614145565b60206040518083038186803b158015611bf657600080fd5b505afa158015611c0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2e9190613b28565b1015611c8e57611c608260008573ffffffffffffffffffffffffffffffffffffffff166126d09092919063ffffffff16565b611c8d826000198573ffffffffffffffffffffffffffffffffffffffff166126d09092919063ffffffff16565b5b505050565b600080831415611ca65760009050611d13565b6000828402905082848281611cb757fe5b0414611d0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180614a796021913960400191505060405180910390fd5b809150505b92915050565b60008060008b1115611d5c578315611d4557611d3e868261190090919063ffffffff16565b9050611d5b565b611d58868361190090919063ffffffff16565b91505b5b60008a1115611d9c578215611d8557611d7e858261190090919063ffffffff16565b9050611d9b565b611d98858361190090919063ffffffff16565b91505b5b6000821115611db157611db0898984611ba2565b5b6000811115611dc657611dc5898883611ba2565b5b5050505050505050505050565b600082821115611e4b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b611e618b8b85611ba2565b8973ffffffffffffffffffffffffffffffffffffffff16631cff79cd8a8a8a8a8a8a8a8a8a604051602401611e9d989796959493929190614197565b6040516020818303038152906040527fcbd4be3f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401611f379291906143df565b600060405180830381600087803b158015611f5157600080fd5b505af1158015611f65573d6000803e3d6000fd5b505050505050505050505050505050565b6000611fd8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166128959092919063ffffffff16565b905060008151111561206057808060200190516020811015611ff957600080fd5b810190808051906020019092919050505061205f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180614a9a602a913960400191505060405180910390fd5b5b505050565b612070818a84611ba2565b8873ffffffffffffffffffffffffffffffffffffffff16631cff79cd898989898989896040516024016120a896959493929190614215565b6040516020818303038152906040527fa6add011000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b81526004016121429291906143df565b600060405180830381600087803b15801561215c57600080fd5b505af1158015612170573d6000803e3d6000fd5b50505050505050505050505050565b600080600080600080600073ffffffffffffffffffffffffffffffffffffffff16876040015173ffffffffffffffffffffffffffffffffffffffff1614612492576121d7876060015188600001518960800151611ba2565b866000015173ffffffffffffffffffffffffffffffffffffffff1663baa2abde886020015189604001518a60800151600080308e60e001516040518863ffffffff1660e01b815260040161223197969594939291906142ad565b6040805180830381600087803b15801561224a57600080fd5b505af115801561225e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122829190613b51565b80945081955050506000876101200151111561248d5760008761016001515114156122b457866101200151905061248c565b866040015173ffffffffffffffffffffffffffffffffffffffff1687610180015173ffffffffffffffffffffffffffffffffffffffff16141561238e5761230a8760400151886101a00151896101e00151611ba2565b866101c0015173ffffffffffffffffffffffffffffffffffffffff16639599127630896101e001516040518363ffffffff1660e01b815260040161234f92919061416e565b600060405180830381600087803b15801561236957600080fd5b505af115801561237d573d6000803e3d6000fd5b50505050866101e00151905061248b565b6123b4876040015188600001516123af600287611c9390919063ffffffff16565b611ba2565b866000015173ffffffffffffffffffffffffffffffffffffffff16638803dbee8861012001516123f18a60c0015187611dd390919063ffffffff16565b8a6101600151308c60e001516040518663ffffffff1660e01b815260040161241d959493929190614560565b600060405180830381600087803b15801561243757600080fd5b505af115801561244b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906124749190613a24565b60008151811061248057fe5b602002602001015190505b5b5b61249a565b866080015193505b6000876101000151111561269d5760008761014001515114156124c457866101000151915061269c565b866020015173ffffffffffffffffffffffffffffffffffffffff1687610180015173ffffffffffffffffffffffffffffffffffffffff16141561259e5761251a8760200151886101a00151896101e00151611ba2565b866101c0015173ffffffffffffffffffffffffffffffffffffffff16639599127630896101e001516040518363ffffffff1660e01b815260040161255f92919061416e565b600060405180830381600087803b15801561257957600080fd5b505af115801561258d573d6000803e3d6000fd5b50505050866101e00151915061269b565b6125c4876020015188600001516125bf600288611c9390919063ffffffff16565b611ba2565b866000015173ffffffffffffffffffffffffffffffffffffffff16638803dbee8861010001516126018a60a0015188611dd390919063ffffffff16565b8a6101400151308c60e001516040518663ffffffff1660e01b815260040161262d959493929190614560565b600060405180830381600087803b15801561264757600080fd5b505af115801561265b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906126849190613a24565b60008151811061269057fe5b602002602001015191505b5b5b6126b08285611dd390919063ffffffff16565b6126c38285611dd390919063ffffffff16565b9550955050505050915091565b600081148061279e575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561276157600080fd5b505afa158015612775573d6000803e3d6000fd5b505050506040513d602081101561278b57600080fd5b8101908080519060200190929190505050145b6127f3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526036815260200180614ac46036913960400191505060405180910390fd5b6128908363095ea7b360e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611f76565b505050565b60606128a484846000856128ad565b90509392505050565b606082471015612908576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180614a536026913960400191505060405180910390fd5b61291185612a55565b612983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106129d257805182526020820191506020810190506020830392506129af565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612a34576040519150601f19603f3d011682016040523d82523d6000602084013e612a39565b606091505b5091509150612a49828286612a68565b92505050949350505050565b600080823b905060008111915050919050565b60608315612a7857829050612b2d565b600083511115612a8b5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612af2578082015181840152602081019050612ad7565b50505050905090810190601f168015612b1f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b6000612b47612b4284614606565b6145d5565b90508083825260208201905082856020860282011115612b6657600080fd5b60005b85811015612b965781612b7c8882612e29565b845260208401935060208301925050600181019050612b69565b5050509392505050565b6000612bb3612bae84614606565b6145d5565b90508083825260208201905082856020860282011115612bd257600080fd5b60005b85811015612c025781612be88882612e3e565b845260208401935060208301925050600181019050612bd5565b5050509392505050565b6000612c1f612c1a84614632565b6145d5565b9050808382526020820190508260005b85811015612c5f5781358501612c458882613021565b845260208401935060208301925050600181019050612c2f565b5050509392505050565b6000612c7c612c778461465e565b6145d5565b90508083825260208201905082856040860282011115612c9b57600080fd5b60005b85811015612ccb5781612cb18882613176565b845260208401935060408301925050600181019050612c9e565b5050509392505050565b6000612ce8612ce38461468a565b6145d5565b90508083825260208201905082856020860282011115612d0757600080fd5b60005b85811015612d375781612d1d88826137c4565b845260208401935060208301925050600181019050612d0a565b5050509392505050565b6000612d54612d4f8461468a565b6145d5565b90508083825260208201905082856020860282011115612d7357600080fd5b60005b85811015612da35781612d8988826137d9565b845260208401935060208301925050600181019050612d76565b5050509392505050565b6000612dc0612dbb846146b6565b6145d5565b905082815260208101848484011115612dd857600080fd5b612de38482856148f8565b509392505050565b6000612dfe612df9846146b6565b6145d5565b905082815260208101848484011115612e1657600080fd5b612e21848285614907565b509392505050565b600081359050612e3881614989565b92915050565b600081519050612e4d81614989565b92915050565b600081359050612e62816149a0565b92915050565b600082601f830112612e7957600080fd5b8135612e89848260208601612b34565b91505092915050565b600082601f830112612ea357600080fd5b8151612eb3848260208601612ba0565b91505092915050565b600082601f830112612ecd57600080fd5b8135612edd848260208601612c0c565b91505092915050565b600082601f830112612ef757600080fd5b8135612f07848260208601612c69565b91505092915050565b600082601f830112612f2157600080fd5b8135612f31848260208601612cd5565b91505092915050565b600082601f830112612f4b57600080fd5b8151612f5b848260208601612d41565b91505092915050565b600081359050612f73816149b7565b92915050565b600081519050612f88816149b7565b92915050565b600082601f830112612f9f57600080fd5b8135612faf848260208601612dad565b91505092915050565b600082601f830112612fc957600080fd5b8151612fd9848260208601612deb565b91505092915050565b600081359050612ff1816149ce565b92915050565b600081359050613006816149de565b92915050565b60008135905061301b816149ee565b92915050565b6000610160828403121561303457600080fd5b61303f6101006145d5565b9050600061304f84828501612fe2565b6000830152506020613063848285016137c4565b602083015250604061307784828501613102565b60408301525060c061308b848285016137c4565b60608301525060e061309f848285016137c4565b6080830152506101006130b484828501612e29565b60a0830152506101206130c9848285016137c4565b60c08301525061014082013567ffffffffffffffff8111156130ea57600080fd5b6130f684828501612f8e565b60e08301525092915050565b60006080828403121561311457600080fd5b61311e60806145d5565b9050600061312e84828501612f64565b600083015250602061314284828501612ff7565b60208301525060406131568482850161300c565b604083015250606061316a848285016137c4565b60608301525092915050565b60006040828403121561318857600080fd5b61319260406145d5565b905060006131a284828501612e29565b60008301525060206131b6848285016137c4565b60208301525092915050565b60006103c082840312156131d557600080fd5b6131e06103c06145d5565b905060006131f084828501612e3e565b600083015250602061320484828501612e3e565b602083015250604061321884828501612e3e565b604083015250606061322c84828501612e3e565b606083015250608061324084828501612e3e565b60808301525060a0613254848285016137d9565b60a08301525060c0613268848285016137d9565b60c08301525060e082015167ffffffffffffffff81111561328857600080fd5b61329484828501612e92565b60e0830152506101006132a984828501612f79565b610100830152506101206132bf84828501612e3e565b610120830152506101406132d5848285016137d9565b610140830152506101606132eb848285016137d9565b6101608301525061018082015167ffffffffffffffff81111561330d57600080fd5b61331984828501612e92565b610180830152506101a061332f84828501612f79565b6101a0830152506101c0613345848285016137d9565b6101c0830152506101e061335b848285016137d9565b6101e083015250610200613371848285016137d9565b61020083015250610220613387848285016137d9565b6102208301525061024061339d84828501612e3e565b610240830152506102606133b384828501612e3e565b610260830152506102806133c984828501612e3e565b610280830152506102a06133df84828501612e3e565b6102a0830152506102c06133f584828501612e3e565b6102c0830152506102e061340b84828501612e3e565b6102e08301525061030061342184828501612e3e565b61030083015250610320613437848285016137d9565b6103208301525061034061344d848285016137d9565b6103408301525061036061346384828501612f79565b61036083015250610380613479848285016137d9565b610380830152506103a061348f84828501612e3e565b6103a08301525092915050565b6000604082840312156134ae57600080fd5b6134b860406145d5565b905060006134c8848285016137ee565b600083015250602082015167ffffffffffffffff8111156134e857600080fd5b6134f484828501612fb8565b60208301525092915050565b60006103a0828403121561351357600080fd5b61351e6103a06145d5565b9050600061352e84828501612e3e565b600083015250602061354284828501612e3e565b6020830152506040613556848285016137d9565b604083015250606061356a84828501612e3e565b606083015250608061357e84828501612e3e565b60808301525060a061359284828501612e3e565b60a08301525060c06135a6848285016137d9565b60c08301525060e06135ba848285016137d9565b60e0830152506101006135cf848285016137d9565b610100830152506101206135e5848285016137d9565b6101208301525061014082015167ffffffffffffffff81111561360757600080fd5b61361384828501612e92565b6101408301525061016082015167ffffffffffffffff81111561363557600080fd5b61364184828501612e92565b61016083015250610180613657848285016137d9565b610180830152506101a061366d848285016137d9565b6101a0830152506101c0613683848285016137d9565b6101c0830152506101e061369984828501612e3e565b6101e0830152506102006136af84828501612e3e565b610200830152506102206136c584828501612e3e565b610220830152506102406136db84828501612e3e565b610240830152506102606136f184828501612e3e565b61026083015250610280613707848285016137d9565b610280830152506102a061371d84828501612e3e565b6102a0830152506102c061373384828501612e3e565b6102c0830152506102e061374984828501612e3e565b6102e08301525061030061375f84828501612e3e565b6103008301525061032061377584828501612e3e565b6103208301525061034061378b848285016137d9565b610340830152506103606137a1848285016137d9565b610360830152506103806137b784828501612e3e565b6103808301525092915050565b6000813590506137d3816149fe565b92915050565b6000815190506137e8816149fe565b92915050565b6000815190506137fd81614a15565b92915050565b60006020828403121561381557600080fd5b600061382384828501612e29565b91505092915050565b600080600080600080600080610100898b03121561384957600080fd5b60006138578b828c01612e29565b98505060206138688b828c01612e53565b975050604089013567ffffffffffffffff81111561388557600080fd5b6138918b828c01612e68565b965050606089013567ffffffffffffffff8111156138ae57600080fd5b6138ba8b828c01612f10565b95505060806138cb8b828c01612e29565b94505060a089013567ffffffffffffffff8111156138e857600080fd5b6138f48b828c01612ee6565b93505060c089013567ffffffffffffffff81111561391157600080fd5b61391d8b828c01612ebc565b92505060e061392e8b828c01612e29565b9150509295985092959890939650565b60008060006060848603121561395357600080fd5b600061396186828701612e29565b935050602084013567ffffffffffffffff81111561397e57600080fd5b61398a86828701612ee6565b925050604084013567ffffffffffffffff8111156139a757600080fd5b6139b386828701612ebc565b9150509250925092565b6000806000608084860312156139d257600080fd5b60006139e086828701612e29565b93505060206139f186828701613176565b925050606084013567ffffffffffffffff811115613a0e57600080fd5b613a1a86828701612f8e565b9150509250925092565b600060208284031215613a3657600080fd5b600082015167ffffffffffffffff811115613a5057600080fd5b613a5c84828501612f3a565b91505092915050565b600060208284031215613a7757600080fd5b600082015167ffffffffffffffff811115613a9157600080fd5b613a9d848285016131c2565b91505092915050565b600060208284031215613ab857600080fd5b600082015167ffffffffffffffff811115613ad257600080fd5b613ade8482850161349c565b91505092915050565b600060208284031215613af957600080fd5b600082015167ffffffffffffffff811115613b1357600080fd5b613b1f84828501613500565b91505092915050565b600060208284031215613b3a57600080fd5b6000613b48848285016137d9565b91505092915050565b60008060408385031215613b6457600080fd5b6000613b72858286016137d9565b9250506020613b83858286016137d9565b9150509250929050565b600080600060608486031215613ba257600080fd5b6000613bb0868287016137d9565b9350506020613bc1868287016137d9565b9250506040613bd2868287016137d9565b9150509250925092565b6000613be88383613c2f565b60208301905092915050565b6000613c008383613f96565b905092915050565b6000613c14838361409e565b60408301905092915050565b613c298161487a565b82525050565b613c38816147da565b82525050565b613c47816147da565b82525050565b6000613c5882614716565b613c628185614769565b9350613c6d836146e6565b8060005b83811015613c9e578151613c858882613bdc565b9750613c9083614742565b925050600181019050613c71565b5085935050505092915050565b6000613cb682614721565b613cc0818561477a565b935083602082028501613cd2856146f6565b8060005b85811015613d0e5784840389528151613cef8582613bf4565b9450613cfa8361474f565b925060208a01995050600181019050613cd6565b50829750879550505050505092915050565b6000613d2b8261472c565b613d35818561478b565b9350613d4083614706565b8060005b83811015613d71578151613d588882613c08565b9750613d638361475c565b925050600181019050613d44565b5085935050505092915050565b613d87816147fe565b82525050565b613d96816147fe565b82525050565b6000613da782614737565b613db1818561479c565b9350613dc1818560208601614907565b613dca8161493c565b840191505092915050565b6000613de082614737565b613dea81856147ad565b9350613dfa818560208601614907565b613e038161493c565b840191505092915050565b613e178161488c565b82525050565b613e268161489e565b82525050565b613e35816148b0565b82525050565b613e44816148c2565b82525050565b6000613e576041836147c9565b91507f4465756e6966693a20426f7567687420636f6c6c61746572616c206c6f77657260008301527f207468616e20657870656374656420636f6c6c61746572616c20746f2062757960208301527f2e000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000613ee3602d836147c9565b91507f4465756e6966693a2052656d61696e696e6720746f6b656e206c6f776572207460008301527f68616e2065787065637465642e000000000000000000000000000000000000006020830152604082019050919050565b6000613f496000836147be565b9150600082019050919050565b6000613f63601b836147c9565b91507f4465756e6966693a20496e76616c6964206f7065726174696f6e2e00000000006000830152602082019050919050565b600061016083016000830151613faf6000860182613e0e565b506020830151613fc260208601826140cd565b506040830151613fd56040860182614049565b506060830151613fe860c08601826140cd565b506080830151613ffb60e08601826140cd565b5060a083015161400f610100860182613c2f565b5060c08301516140236101208601826140cd565b5060e083015184820361014086015261403c8282613d9c565b9150508091505092915050565b60808201600082015161405f6000850182613d7e565b5060208201516140726020850182613e1d565b5060408201516140856040850182613e2c565b50606082015161409860608501826140cd565b50505050565b6040820160008201516140b46000850182613c2f565b5060208201516140c760208501826140cd565b50505050565b6140d681614863565b82525050565b6140e581614863565b82525050565b6140f48161486d565b82525050565b600061410582613f3c565b9150819050919050565b60006020820190506141246000830184613c3e565b92915050565b600060208201905061413f6000830184613c20565b92915050565b600060408201905061415a6000830185613c20565b6141676020830184613c3e565b9392505050565b60006040820190506141836000830185613c20565b61419060208301846140dc565b9392505050565b6000610100820190506141ad600083018b613c3e565b6141ba602083018a613c3e565b6141c76040830189613c3e565b6141d46060830188613c3e565b6141e160808301876140dc565b6141ee60a08301866140dc565b6141fb60c08301856140dc565b61420860e0830184613d8d565b9998505050505050505050565b600060c08201905061422a6000830189613c3e565b6142376020830188613c3e565b6142446040830187613c3e565b61425160608301866140dc565b61425e60808301856140dc565b61426b60a08301846140dc565b979650505050505050565b600060608201905061428b6000830186613c3e565b6142986020830185613c3e565b6142a560408301846140dc565b949350505050565b600060e0820190506142c2600083018a613c3e565b6142cf6020830189613c3e565b6142dc60408301886140dc565b6142e96060830187613e3b565b6142f66080830186613e3b565b61430360a0830185613c20565b61431060c08301846140dc565b98975050505050505050565b600061010082019050614332600083018b613c3e565b61433f602083018a613c3e565b61434c60408301896140dc565b61435960608301886140dc565b6143666080830187613e3b565b61437360a0830186613e3b565b61438060c0830185613c20565b61438d60e08301846140dc565b9998505050505050505050565b60006060820190506143af6000830186613c3e565b81810360208301526143c18185613d20565b905081810360408301526143d58184613cab565b9050949350505050565b60006040820190506143f46000830185613c3e565b81810360208301526144068184613dd5565b90509392505050565b60006080820190506144246000830187613c3e565b61443160208301866140dc565b61443e60408301856140dc565b61444b60608301846140dc565b95945050505050565b6000604082019050818103600083015261446e8185613d20565b905081810360208301526144828184613cab565b90509392505050565b600060208201905081810360008301526144a481613e4a565b9050919050565b600060208201905081810360008301526144c481613ed6565b9050919050565b600060208201905081810360008301526144e481613f56565b9050919050565b600060208201905061450060008301846140dc565b92915050565b600060a08201905061451b60008301886140dc565b6145286020830187613e3b565b818103604083015261453a8186613c4d565b90506145496060830185613c20565b61455660808301846140dc565b9695505050505050565b600060a08201905061457560008301886140dc565b61458260208301876140dc565b81810360408301526145948186613c4d565b90506145a36060830185613c20565b6145b060808301846140dc565b9695505050505050565b60006020820190506145cf60008301846140eb565b92915050565b6000604051905081810181811067ffffffffffffffff821117156145fc576145fb61493a565b5b8060405250919050565b600067ffffffffffffffff8211156146215761462061493a565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561464d5761464c61493a565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156146795761467861493a565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156146a5576146a461493a565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156146d1576146d061493a565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006147e582614843565b9050919050565b60006147f782614843565b9050919050565b60008115159050919050565b60008190506148188261494d565b919050565b600081905061482b82614961565b919050565b600081905061483e82614975565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000614885826148d4565b9050919050565b60006148978261480a565b9050919050565b60006148a98261481d565b9050919050565b60006148bb82614830565b9050919050565b60006148cd82614863565b9050919050565b60006148df826148e6565b9050919050565b60006148f182614843565b9050919050565b82818337600083830152505050565b60005b8381101561492557808201518184015260208101905061490a565b83811115614934576000848401525b50505050565bfe5b6000601f19601f8301169050919050565b6009811061495e5761495d61493a565b5b50565b600281106149725761497161493a565b5b50565b600281106149865761498561493a565b5b50565b614992816147da565b811461499d57600080fd5b50565b6149a9816147ec565b81146149b457600080fd5b50565b6149c0816147fe565b81146149cb57600080fd5b50565b600981106149db57600080fd5b50565b600281106149eb57600080fd5b50565b600281106149fb57600080fd5b50565b614a0781614863565b8114614a1257600080fd5b50565b614a1e8161486d565b8114614a2957600080fd5b5056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a264697066735822122039389754773011348b1fea4b559f76064225d7566356089377f20281b668dd4564736f6c63430007060033",
  "deployedBytecode": "0x6080604052600436106100955760003560e01c80638da5cb5b116100595780638da5cb5b146101575780639165ad8b14610182578063a281e17a146101ab578063d0fb0203146101c7578063f2fde38b146101f257610096565b806308a4279714610098578063472d35b9146100c3578063715018a6146100ec5780638348d034146101035780638b4187131461012e57610096565b5b005b3480156100a457600080fd5b506100ad61021b565b6040516100ba91906145ba565b60405180910390f35b3480156100cf57600080fd5b506100ea60048036038101906100e59190613803565b610220565b005b3480156100f857600080fd5b50610101610313565b005b34801561010f57600080fd5b50610118610480565b60405161012591906145ba565b60405180910390f35b34801561013a57600080fd5b50610155600480360381019061015091906139bd565b610485565b005b34801561016357600080fd5b5061016c610529565b604051610179919061410f565b60405180910390f35b34801561018e57600080fd5b506101a960048036038101906101a4919061393e565b610552565b005b6101c560048036038101906101c0919061382c565b6105c4565b005b3480156101d357600080fd5b506101dc610824565b6040516101e9919061410f565b60405180910390f35b3480156101fe57600080fd5b5061021960048036038101906102149190613803565b61084a565b005b600281565b610228610a3c565b73ffffffffffffffffffffffffffffffffffffffff16610246610529565b73ffffffffffffffffffffffffffffffffffffffff16146102cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61031b610a3c565b73ffffffffffffffffffffffffffffffffffffffff16610339610529565b73ffffffffffffffffffffffffffffffffffffffff16146103c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600181565b60008180602001905181019061049b9190613aa6565b9050600160ff16816000015160ff1614156104c2576104bd8160200151610a44565b610523565b600260ff16816000015160ff1614156104e7576104e28160200151610f2e565b610522565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610519906144cb565b60405180910390fd5b5b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b8273ffffffffffffffffffffffffffffffffffffffff1663a67a6a4583836040518363ffffffff1660e01b815260040161058d929190614454565b600060405180830381600087803b1580156105a757600080fd5b505af11580156105bb573d6000803e3d6000fd5b50505050505050565b600034111561065a578073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561061557600080fd5b505af1158015610629573d6000803e3d6000fd5b505050505061065987348373ffffffffffffffffffffffffffffffffffffffff1661179d9092919063ffffffff16565b5b3073ffffffffffffffffffffffffffffffffffffffff166313af4035886040518263ffffffff1660e01b8152600401610693919061412a565b600060405180830381600087803b1580156106ad57600080fd5b505af11580156106c1573d6000803e3d6000fd5b5050505060005b865181101561073f5761072489898884815181106106e257fe5b60200260200101518a85815181106106f657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1661183f909392919063ffffffff16565b61073860018261190090919063ffffffff16565b90506106c8565b508673ffffffffffffffffffffffffffffffffffffffff16639165ad8b8585856040518463ffffffff1660e01b815260040161077d9392919061439a565b600060405180830381600087803b15801561079757600080fd5b505af11580156107ab573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff166313af4035896040518263ffffffff1660e01b81526004016107e8919061410f565b600060405180830381600087803b15801561080257600080fd5b505af1158015610816573d6000803e3d6000fd5b505050505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610852610a3c565b73ffffffffffffffffffffffffffffffffffffffff16610870610529565b73ffffffffffffffffffffffffffffffffffffffff16146108f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561097f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180614a2d6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600081806020019051810190610a5a9190613ae7565b90506000806000610a6a84611988565b925092509250836101800151831015610ab8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aaf906144ab565b60405180910390fd5b836101a00151821015610b00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af7906144ab565b60405180910390fd5b610b358460200151600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660400151611ba2565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c2957600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663651b8cb68560000151866020015187604001516040518463ffffffff1660e01b8152600401610bf693929190614276565b600060405180830381600087803b158015610c1057600080fd5b505af1158015610c24573d6000803e3d6000fd5b505050505b600073ffffffffffffffffffffffffffffffffffffffff16846102c0015173ffffffffffffffffffffffffffffffffffffffff1614610dd7576000846102c0015173ffffffffffffffffffffffffffffffffffffffff16856060015173ffffffffffffffffffffffffffffffffffffffff161415610ca957839050600093505b846102c0015173ffffffffffffffffffffffffffffffffffffffff16856080015173ffffffffffffffffffffffffffffffffffffffff161415610cee57829050600092505b6000811115610dd557846102c0015173ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b8152600401610d3591906144eb565b600060405180830381600087803b158015610d4f57600080fd5b505af1158015610d63573d6000803e3d6000fd5b50505050846000015173ffffffffffffffffffffffffffffffffffffffff1681604051610d8f906140fa565b60006040518083038185875af1925050503d8060008114610dcc576040519150601f19603f3d011682016040523d82523d6000602084013e610dd1565b606091505b5050505b505b6000831180610deb57506000846101800151115b15610e2457610e23846000015184866060015173ffffffffffffffffffffffffffffffffffffffff1661179d9092919063ffffffff16565b5b6000821180610e3857506000846101a00151115b15610e7157610e70846000015183866080015173ffffffffffffffffffffffffffffffffffffffff1661179d9092919063ffffffff16565b5b6000811115610eae57610ead8460000151828660a0015173ffffffffffffffffffffffffffffffffffffffff1661179d9092919063ffffffff16565b5b610ed98460200151856103800151610ed460028860400151611c9390919063ffffffff16565b611ba2565b7fac0cbef1a8ac246924422e9ff961ee097263dc73ccb13c5780e2d048c6e228c584600001518561028001518660c001518760400151604051610f1f949392919061440f565b60405180910390a15050505050565b600081806020019051810190610f449190613a65565b9050610f818160e0015151826101800151518360200151846040015185606001518660a00151876101400151886101000151896101a00151611d19565b6000806000808460a00151111561112f57836080015173ffffffffffffffffffffffffffffffffffffffff16846020015173ffffffffffffffffffffffffffffffffffffffff161415610fda578360a00151925061112b565b83610100015115611062578360c001519250836060015173ffffffffffffffffffffffffffffffffffffffff16638d7ef9bb30856040518363ffffffff1660e01b815260040161102b92919061416e565b600060405180830381600087803b15801561104557600080fd5b505af1158015611059573d6000803e3d6000fd5b5050505061112a565b836040015173ffffffffffffffffffffffffffffffffffffffff166338ed17398560a0015160008760e00151308961038001516040518663ffffffff1660e01b81526004016110b5959493929190614506565b600060405180830381600087803b1580156110cf57600080fd5b505af11580156110e3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061110c9190613a24565b60018560e0015151038151811061111f57fe5b602002602001015192505b5b8290505b600084610140015111156112dd5783610120015173ffffffffffffffffffffffffffffffffffffffff16846020015173ffffffffffffffffffffffffffffffffffffffff1614156111875783610140015191506112dc565b836101a0015115611210578361016001519150836060015173ffffffffffffffffffffffffffffffffffffffff16638d7ef9bb30846040518363ffffffff1660e01b81526004016111d992919061416e565b600060405180830381600087803b1580156111f357600080fd5b505af1158015611207573d6000803e3d6000fd5b505050506112db565b836040015173ffffffffffffffffffffffffffffffffffffffff166338ed17398561014001516000876101800151308961038001516040518663ffffffff1660e01b8152600401611265959493929190614506565b600060405180830381600087803b15801561127f57600080fd5b505af1158015611293573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906112bc9190613a24565b60018561018001515103815181106112d057fe5b602002602001015191505b5b5b60006112f783866101e0015161190090919063ffffffff16565b111561155d576113278460800151856040015161132286886101c0015161190090919063ffffffff16565b611ba2565b611352846101200151856040015161134d85886101e0015161190090919063ffffffff16565b611ba2565b6000806000866040015173ffffffffffffffffffffffffffffffffffffffff1663e8e33700886080015189610120015161139a8a8c6101c0015161190090919063ffffffff16565b6113b28a8d6101e0015161190090919063ffffffff16565b600080308f61038001516040518963ffffffff1660e01b81526004016113df98979695949392919061431c565b606060405180830381600087803b1580156113f957600080fd5b505af115801561140d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114319190613b8d565b925092509250809350600061146684611458898b6101c0015161190090919063ffffffff16565b611dd390919063ffffffff16565b11156114c9576114c8876000015161149e856114908a8c6101c0015161190090919063ffffffff16565b611dd390919063ffffffff16565b896080015173ffffffffffffffffffffffffffffffffffffffff1661179d9092919063ffffffff16565b5b60006114f5836114e7888b6101e0015161190090919063ffffffff16565b611dd390919063ffffffff16565b111561155957611558876000015161152d8461151f898c6101e0015161190090919063ffffffff16565b611dd390919063ffffffff16565b89610120015173ffffffffffffffffffffffffffffffffffffffff1661179d9092919063ffffffff16565b5b5050505b8361020001518110156115a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159c9061448b565b60405180910390fd5b60006115bf8286610220015161190090919063ffffffff16565b9050611606856102400151866102600151876102800151886102a00151896102c001518a6102e001518b61030001518c6103200151898e61034001518f6103600151611e56565b61163c8560200151600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876103400151611ba2565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461173157600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663651b8cb6866000015187602001518861034001516040518463ffffffff1660e01b81526004016116fe93929190614276565b600060405180830381600087803b15801561171857600080fd5b505af115801561172c573d6000803e3d6000fd5b505050505b61174a8560200151866103a00151876103400151611ba2565b7f992628f13bc2e3ecd138e194a77dfb9fb7a85e5cb3823b6d5f1030f3dc5fc2b485600001518661032001518388610340015160405161178d949392919061440f565b60405180910390a1505050505050565b61183a8363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611f76565b505050565b6118fa846323b872dd60e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611f76565b50505050565b60008082840190508381101561197e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b60008060008360400151506119ce846101e001518561020001518661022001518761024001518861026001518961028001518a60c001518b604001518c60200151612065565b600080611b34604051806102200160405280886102a0015173ffffffffffffffffffffffffffffffffffffffff168152602001886060015173ffffffffffffffffffffffffffffffffffffffff168152602001886080015173ffffffffffffffffffffffffffffffffffffffff1681526020018860a0015173ffffffffffffffffffffffffffffffffffffffff1681526020018860e0015181526020018861018001518152602001886101a001518152602001886101c0015181526020018861010001518152602001886101200151815260200188610140015181526020018861016001518152602001886102e0015173ffffffffffffffffffffffffffffffffffffffff16815260200188610300015173ffffffffffffffffffffffffffffffffffffffff16815260200188610320015173ffffffffffffffffffffffffffffffffffffffff168152602001886103400151815260200188610360015181525061217f565b9150915060008073ffffffffffffffffffffffffffffffffffffffff168760a0015173ffffffffffffffffffffffffffffffffffffffff1614611b8f57611b8c8760e001518860c00151611dd390919063ffffffff16565b90505b8282829550955095505050509193909250565b808373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401611bde929190614145565b60206040518083038186803b158015611bf657600080fd5b505afa158015611c0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2e9190613b28565b1015611c8e57611c608260008573ffffffffffffffffffffffffffffffffffffffff166126d09092919063ffffffff16565b611c8d826000198573ffffffffffffffffffffffffffffffffffffffff166126d09092919063ffffffff16565b5b505050565b600080831415611ca65760009050611d13565b6000828402905082848281611cb757fe5b0414611d0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180614a796021913960400191505060405180910390fd5b809150505b92915050565b60008060008b1115611d5c578315611d4557611d3e868261190090919063ffffffff16565b9050611d5b565b611d58868361190090919063ffffffff16565b91505b5b60008a1115611d9c578215611d8557611d7e858261190090919063ffffffff16565b9050611d9b565b611d98858361190090919063ffffffff16565b91505b5b6000821115611db157611db0898984611ba2565b5b6000811115611dc657611dc5898883611ba2565b5b5050505050505050505050565b600082821115611e4b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b611e618b8b85611ba2565b8973ffffffffffffffffffffffffffffffffffffffff16631cff79cd8a8a8a8a8a8a8a8a8a604051602401611e9d989796959493929190614197565b6040516020818303038152906040527fcbd4be3f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401611f379291906143df565b600060405180830381600087803b158015611f5157600080fd5b505af1158015611f65573d6000803e3d6000fd5b505050505050505050505050505050565b6000611fd8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166128959092919063ffffffff16565b905060008151111561206057808060200190516020811015611ff957600080fd5b810190808051906020019092919050505061205f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180614a9a602a913960400191505060405180910390fd5b5b505050565b612070818a84611ba2565b8873ffffffffffffffffffffffffffffffffffffffff16631cff79cd898989898989896040516024016120a896959493929190614215565b6040516020818303038152906040527fa6add011000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b81526004016121429291906143df565b600060405180830381600087803b15801561215c57600080fd5b505af1158015612170573d6000803e3d6000fd5b50505050505050505050505050565b600080600080600080600073ffffffffffffffffffffffffffffffffffffffff16876040015173ffffffffffffffffffffffffffffffffffffffff1614612492576121d7876060015188600001518960800151611ba2565b866000015173ffffffffffffffffffffffffffffffffffffffff1663baa2abde886020015189604001518a60800151600080308e60e001516040518863ffffffff1660e01b815260040161223197969594939291906142ad565b6040805180830381600087803b15801561224a57600080fd5b505af115801561225e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122829190613b51565b80945081955050506000876101200151111561248d5760008761016001515114156122b457866101200151905061248c565b866040015173ffffffffffffffffffffffffffffffffffffffff1687610180015173ffffffffffffffffffffffffffffffffffffffff16141561238e5761230a8760400151886101a00151896101e00151611ba2565b866101c0015173ffffffffffffffffffffffffffffffffffffffff16639599127630896101e001516040518363ffffffff1660e01b815260040161234f92919061416e565b600060405180830381600087803b15801561236957600080fd5b505af115801561237d573d6000803e3d6000fd5b50505050866101e00151905061248b565b6123b4876040015188600001516123af600287611c9390919063ffffffff16565b611ba2565b866000015173ffffffffffffffffffffffffffffffffffffffff16638803dbee8861012001516123f18a60c0015187611dd390919063ffffffff16565b8a6101600151308c60e001516040518663ffffffff1660e01b815260040161241d959493929190614560565b600060405180830381600087803b15801561243757600080fd5b505af115801561244b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906124749190613a24565b60008151811061248057fe5b602002602001015190505b5b5b61249a565b866080015193505b6000876101000151111561269d5760008761014001515114156124c457866101000151915061269c565b866020015173ffffffffffffffffffffffffffffffffffffffff1687610180015173ffffffffffffffffffffffffffffffffffffffff16141561259e5761251a8760200151886101a00151896101e00151611ba2565b866101c0015173ffffffffffffffffffffffffffffffffffffffff16639599127630896101e001516040518363ffffffff1660e01b815260040161255f92919061416e565b600060405180830381600087803b15801561257957600080fd5b505af115801561258d573d6000803e3d6000fd5b50505050866101e00151915061269b565b6125c4876020015188600001516125bf600288611c9390919063ffffffff16565b611ba2565b866000015173ffffffffffffffffffffffffffffffffffffffff16638803dbee8861010001516126018a60a0015188611dd390919063ffffffff16565b8a6101400151308c60e001516040518663ffffffff1660e01b815260040161262d959493929190614560565b600060405180830381600087803b15801561264757600080fd5b505af115801561265b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906126849190613a24565b60008151811061269057fe5b602002602001015191505b5b5b6126b08285611dd390919063ffffffff16565b6126c38285611dd390919063ffffffff16565b9550955050505050915091565b600081148061279e575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561276157600080fd5b505afa158015612775573d6000803e3d6000fd5b505050506040513d602081101561278b57600080fd5b8101908080519060200190929190505050145b6127f3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526036815260200180614ac46036913960400191505060405180910390fd5b6128908363095ea7b360e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611f76565b505050565b60606128a484846000856128ad565b90509392505050565b606082471015612908576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180614a536026913960400191505060405180910390fd5b61291185612a55565b612983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106129d257805182526020820191506020810190506020830392506129af565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612a34576040519150601f19603f3d011682016040523d82523d6000602084013e612a39565b606091505b5091509150612a49828286612a68565b92505050949350505050565b600080823b905060008111915050919050565b60608315612a7857829050612b2d565b600083511115612a8b5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612af2578082015181840152602081019050612ad7565b50505050905090810190601f168015612b1f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b6000612b47612b4284614606565b6145d5565b90508083825260208201905082856020860282011115612b6657600080fd5b60005b85811015612b965781612b7c8882612e29565b845260208401935060208301925050600181019050612b69565b5050509392505050565b6000612bb3612bae84614606565b6145d5565b90508083825260208201905082856020860282011115612bd257600080fd5b60005b85811015612c025781612be88882612e3e565b845260208401935060208301925050600181019050612bd5565b5050509392505050565b6000612c1f612c1a84614632565b6145d5565b9050808382526020820190508260005b85811015612c5f5781358501612c458882613021565b845260208401935060208301925050600181019050612c2f565b5050509392505050565b6000612c7c612c778461465e565b6145d5565b90508083825260208201905082856040860282011115612c9b57600080fd5b60005b85811015612ccb5781612cb18882613176565b845260208401935060408301925050600181019050612c9e565b5050509392505050565b6000612ce8612ce38461468a565b6145d5565b90508083825260208201905082856020860282011115612d0757600080fd5b60005b85811015612d375781612d1d88826137c4565b845260208401935060208301925050600181019050612d0a565b5050509392505050565b6000612d54612d4f8461468a565b6145d5565b90508083825260208201905082856020860282011115612d7357600080fd5b60005b85811015612da35781612d8988826137d9565b845260208401935060208301925050600181019050612d76565b5050509392505050565b6000612dc0612dbb846146b6565b6145d5565b905082815260208101848484011115612dd857600080fd5b612de38482856148f8565b509392505050565b6000612dfe612df9846146b6565b6145d5565b905082815260208101848484011115612e1657600080fd5b612e21848285614907565b509392505050565b600081359050612e3881614989565b92915050565b600081519050612e4d81614989565b92915050565b600081359050612e62816149a0565b92915050565b600082601f830112612e7957600080fd5b8135612e89848260208601612b34565b91505092915050565b600082601f830112612ea357600080fd5b8151612eb3848260208601612ba0565b91505092915050565b600082601f830112612ecd57600080fd5b8135612edd848260208601612c0c565b91505092915050565b600082601f830112612ef757600080fd5b8135612f07848260208601612c69565b91505092915050565b600082601f830112612f2157600080fd5b8135612f31848260208601612cd5565b91505092915050565b600082601f830112612f4b57600080fd5b8151612f5b848260208601612d41565b91505092915050565b600081359050612f73816149b7565b92915050565b600081519050612f88816149b7565b92915050565b600082601f830112612f9f57600080fd5b8135612faf848260208601612dad565b91505092915050565b600082601f830112612fc957600080fd5b8151612fd9848260208601612deb565b91505092915050565b600081359050612ff1816149ce565b92915050565b600081359050613006816149de565b92915050565b60008135905061301b816149ee565b92915050565b6000610160828403121561303457600080fd5b61303f6101006145d5565b9050600061304f84828501612fe2565b6000830152506020613063848285016137c4565b602083015250604061307784828501613102565b60408301525060c061308b848285016137c4565b60608301525060e061309f848285016137c4565b6080830152506101006130b484828501612e29565b60a0830152506101206130c9848285016137c4565b60c08301525061014082013567ffffffffffffffff8111156130ea57600080fd5b6130f684828501612f8e565b60e08301525092915050565b60006080828403121561311457600080fd5b61311e60806145d5565b9050600061312e84828501612f64565b600083015250602061314284828501612ff7565b60208301525060406131568482850161300c565b604083015250606061316a848285016137c4565b60608301525092915050565b60006040828403121561318857600080fd5b61319260406145d5565b905060006131a284828501612e29565b60008301525060206131b6848285016137c4565b60208301525092915050565b60006103c082840312156131d557600080fd5b6131e06103c06145d5565b905060006131f084828501612e3e565b600083015250602061320484828501612e3e565b602083015250604061321884828501612e3e565b604083015250606061322c84828501612e3e565b606083015250608061324084828501612e3e565b60808301525060a0613254848285016137d9565b60a08301525060c0613268848285016137d9565b60c08301525060e082015167ffffffffffffffff81111561328857600080fd5b61329484828501612e92565b60e0830152506101006132a984828501612f79565b610100830152506101206132bf84828501612e3e565b610120830152506101406132d5848285016137d9565b610140830152506101606132eb848285016137d9565b6101608301525061018082015167ffffffffffffffff81111561330d57600080fd5b61331984828501612e92565b610180830152506101a061332f84828501612f79565b6101a0830152506101c0613345848285016137d9565b6101c0830152506101e061335b848285016137d9565b6101e083015250610200613371848285016137d9565b61020083015250610220613387848285016137d9565b6102208301525061024061339d84828501612e3e565b610240830152506102606133b384828501612e3e565b610260830152506102806133c984828501612e3e565b610280830152506102a06133df84828501612e3e565b6102a0830152506102c06133f584828501612e3e565b6102c0830152506102e061340b84828501612e3e565b6102e08301525061030061342184828501612e3e565b61030083015250610320613437848285016137d9565b6103208301525061034061344d848285016137d9565b6103408301525061036061346384828501612f79565b61036083015250610380613479848285016137d9565b610380830152506103a061348f84828501612e3e565b6103a08301525092915050565b6000604082840312156134ae57600080fd5b6134b860406145d5565b905060006134c8848285016137ee565b600083015250602082015167ffffffffffffffff8111156134e857600080fd5b6134f484828501612fb8565b60208301525092915050565b60006103a0828403121561351357600080fd5b61351e6103a06145d5565b9050600061352e84828501612e3e565b600083015250602061354284828501612e3e565b6020830152506040613556848285016137d9565b604083015250606061356a84828501612e3e565b606083015250608061357e84828501612e3e565b60808301525060a061359284828501612e3e565b60a08301525060c06135a6848285016137d9565b60c08301525060e06135ba848285016137d9565b60e0830152506101006135cf848285016137d9565b610100830152506101206135e5848285016137d9565b6101208301525061014082015167ffffffffffffffff81111561360757600080fd5b61361384828501612e92565b6101408301525061016082015167ffffffffffffffff81111561363557600080fd5b61364184828501612e92565b61016083015250610180613657848285016137d9565b610180830152506101a061366d848285016137d9565b6101a0830152506101c0613683848285016137d9565b6101c0830152506101e061369984828501612e3e565b6101e0830152506102006136af84828501612e3e565b610200830152506102206136c584828501612e3e565b610220830152506102406136db84828501612e3e565b610240830152506102606136f184828501612e3e565b61026083015250610280613707848285016137d9565b610280830152506102a061371d84828501612e3e565b6102a0830152506102c061373384828501612e3e565b6102c0830152506102e061374984828501612e3e565b6102e08301525061030061375f84828501612e3e565b6103008301525061032061377584828501612e3e565b6103208301525061034061378b848285016137d9565b610340830152506103606137a1848285016137d9565b610360830152506103806137b784828501612e3e565b6103808301525092915050565b6000813590506137d3816149fe565b92915050565b6000815190506137e8816149fe565b92915050565b6000815190506137fd81614a15565b92915050565b60006020828403121561381557600080fd5b600061382384828501612e29565b91505092915050565b600080600080600080600080610100898b03121561384957600080fd5b60006138578b828c01612e29565b98505060206138688b828c01612e53565b975050604089013567ffffffffffffffff81111561388557600080fd5b6138918b828c01612e68565b965050606089013567ffffffffffffffff8111156138ae57600080fd5b6138ba8b828c01612f10565b95505060806138cb8b828c01612e29565b94505060a089013567ffffffffffffffff8111156138e857600080fd5b6138f48b828c01612ee6565b93505060c089013567ffffffffffffffff81111561391157600080fd5b61391d8b828c01612ebc565b92505060e061392e8b828c01612e29565b9150509295985092959890939650565b60008060006060848603121561395357600080fd5b600061396186828701612e29565b935050602084013567ffffffffffffffff81111561397e57600080fd5b61398a86828701612ee6565b925050604084013567ffffffffffffffff8111156139a757600080fd5b6139b386828701612ebc565b9150509250925092565b6000806000608084860312156139d257600080fd5b60006139e086828701612e29565b93505060206139f186828701613176565b925050606084013567ffffffffffffffff811115613a0e57600080fd5b613a1a86828701612f8e565b9150509250925092565b600060208284031215613a3657600080fd5b600082015167ffffffffffffffff811115613a5057600080fd5b613a5c84828501612f3a565b91505092915050565b600060208284031215613a7757600080fd5b600082015167ffffffffffffffff811115613a9157600080fd5b613a9d848285016131c2565b91505092915050565b600060208284031215613ab857600080fd5b600082015167ffffffffffffffff811115613ad257600080fd5b613ade8482850161349c565b91505092915050565b600060208284031215613af957600080fd5b600082015167ffffffffffffffff811115613b1357600080fd5b613b1f84828501613500565b91505092915050565b600060208284031215613b3a57600080fd5b6000613b48848285016137d9565b91505092915050565b60008060408385031215613b6457600080fd5b6000613b72858286016137d9565b9250506020613b83858286016137d9565b9150509250929050565b600080600060608486031215613ba257600080fd5b6000613bb0868287016137d9565b9350506020613bc1868287016137d9565b9250506040613bd2868287016137d9565b9150509250925092565b6000613be88383613c2f565b60208301905092915050565b6000613c008383613f96565b905092915050565b6000613c14838361409e565b60408301905092915050565b613c298161487a565b82525050565b613c38816147da565b82525050565b613c47816147da565b82525050565b6000613c5882614716565b613c628185614769565b9350613c6d836146e6565b8060005b83811015613c9e578151613c858882613bdc565b9750613c9083614742565b925050600181019050613c71565b5085935050505092915050565b6000613cb682614721565b613cc0818561477a565b935083602082028501613cd2856146f6565b8060005b85811015613d0e5784840389528151613cef8582613bf4565b9450613cfa8361474f565b925060208a01995050600181019050613cd6565b50829750879550505050505092915050565b6000613d2b8261472c565b613d35818561478b565b9350613d4083614706565b8060005b83811015613d71578151613d588882613c08565b9750613d638361475c565b925050600181019050613d44565b5085935050505092915050565b613d87816147fe565b82525050565b613d96816147fe565b82525050565b6000613da782614737565b613db1818561479c565b9350613dc1818560208601614907565b613dca8161493c565b840191505092915050565b6000613de082614737565b613dea81856147ad565b9350613dfa818560208601614907565b613e038161493c565b840191505092915050565b613e178161488c565b82525050565b613e268161489e565b82525050565b613e35816148b0565b82525050565b613e44816148c2565b82525050565b6000613e576041836147c9565b91507f4465756e6966693a20426f7567687420636f6c6c61746572616c206c6f77657260008301527f207468616e20657870656374656420636f6c6c61746572616c20746f2062757960208301527f2e000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000613ee3602d836147c9565b91507f4465756e6966693a2052656d61696e696e6720746f6b656e206c6f776572207460008301527f68616e2065787065637465642e000000000000000000000000000000000000006020830152604082019050919050565b6000613f496000836147be565b9150600082019050919050565b6000613f63601b836147c9565b91507f4465756e6966693a20496e76616c6964206f7065726174696f6e2e00000000006000830152602082019050919050565b600061016083016000830151613faf6000860182613e0e565b506020830151613fc260208601826140cd565b506040830151613fd56040860182614049565b506060830151613fe860c08601826140cd565b506080830151613ffb60e08601826140cd565b5060a083015161400f610100860182613c2f565b5060c08301516140236101208601826140cd565b5060e083015184820361014086015261403c8282613d9c565b9150508091505092915050565b60808201600082015161405f6000850182613d7e565b5060208201516140726020850182613e1d565b5060408201516140856040850182613e2c565b50606082015161409860608501826140cd565b50505050565b6040820160008201516140b46000850182613c2f565b5060208201516140c760208501826140cd565b50505050565b6140d681614863565b82525050565b6140e581614863565b82525050565b6140f48161486d565b82525050565b600061410582613f3c565b9150819050919050565b60006020820190506141246000830184613c3e565b92915050565b600060208201905061413f6000830184613c20565b92915050565b600060408201905061415a6000830185613c20565b6141676020830184613c3e565b9392505050565b60006040820190506141836000830185613c20565b61419060208301846140dc565b9392505050565b6000610100820190506141ad600083018b613c3e565b6141ba602083018a613c3e565b6141c76040830189613c3e565b6141d46060830188613c3e565b6141e160808301876140dc565b6141ee60a08301866140dc565b6141fb60c08301856140dc565b61420860e0830184613d8d565b9998505050505050505050565b600060c08201905061422a6000830189613c3e565b6142376020830188613c3e565b6142446040830187613c3e565b61425160608301866140dc565b61425e60808301856140dc565b61426b60a08301846140dc565b979650505050505050565b600060608201905061428b6000830186613c3e565b6142986020830185613c3e565b6142a560408301846140dc565b949350505050565b600060e0820190506142c2600083018a613c3e565b6142cf6020830189613c3e565b6142dc60408301886140dc565b6142e96060830187613e3b565b6142f66080830186613e3b565b61430360a0830185613c20565b61431060c08301846140dc565b98975050505050505050565b600061010082019050614332600083018b613c3e565b61433f602083018a613c3e565b61434c60408301896140dc565b61435960608301886140dc565b6143666080830187613e3b565b61437360a0830186613e3b565b61438060c0830185613c20565b61438d60e08301846140dc565b9998505050505050505050565b60006060820190506143af6000830186613c3e565b81810360208301526143c18185613d20565b905081810360408301526143d58184613cab565b9050949350505050565b60006040820190506143f46000830185613c3e565b81810360208301526144068184613dd5565b90509392505050565b60006080820190506144246000830187613c3e565b61443160208301866140dc565b61443e60408301856140dc565b61444b60608301846140dc565b95945050505050565b6000604082019050818103600083015261446e8185613d20565b905081810360208301526144828184613cab565b90509392505050565b600060208201905081810360008301526144a481613e4a565b9050919050565b600060208201905081810360008301526144c481613ed6565b9050919050565b600060208201905081810360008301526144e481613f56565b9050919050565b600060208201905061450060008301846140dc565b92915050565b600060a08201905061451b60008301886140dc565b6145286020830187613e3b565b818103604083015261453a8186613c4d565b90506145496060830185613c20565b61455660808301846140dc565b9695505050505050565b600060a08201905061457560008301886140dc565b61458260208301876140dc565b81810360408301526145948186613c4d565b90506145a36060830185613c20565b6145b060808301846140dc565b9695505050505050565b60006020820190506145cf60008301846140eb565b92915050565b6000604051905081810181811067ffffffffffffffff821117156145fc576145fb61493a565b5b8060405250919050565b600067ffffffffffffffff8211156146215761462061493a565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561464d5761464c61493a565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156146795761467861493a565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156146a5576146a461493a565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156146d1576146d061493a565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006147e582614843565b9050919050565b60006147f782614843565b9050919050565b60008115159050919050565b60008190506148188261494d565b919050565b600081905061482b82614961565b919050565b600081905061483e82614975565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000614885826148d4565b9050919050565b60006148978261480a565b9050919050565b60006148a98261481d565b9050919050565b60006148bb82614830565b9050919050565b60006148cd82614863565b9050919050565b60006148df826148e6565b9050919050565b60006148f182614843565b9050919050565b82818337600083830152505050565b60005b8381101561492557808201518184015260208101905061490a565b83811115614934576000848401525b50505050565bfe5b6000601f19601f8301169050919050565b6009811061495e5761495d61493a565b5b50565b600281106149725761497161493a565b5b50565b600281106149865761498561493a565b5b50565b614992816147da565b811461499d57600080fd5b50565b6149a9816147ec565b81146149b457600080fd5b50565b6149c0816147fe565b81146149cb57600080fd5b50565b600981106149db57600080fd5b50565b600281106149eb57600080fd5b50565b600281106149fb57600080fd5b50565b614a0781614863565b8114614a1257600080fd5b50565b614a1e8161486d565b8114614a2957600080fd5b5056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a264697066735822122039389754773011348b1fea4b559f76064225d7566356089377f20281b668dd4564736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "callOperate(address,(address,uint256)[],(uint8,uint256,(bool,uint8,uint8,uint256),uint256,uint256,address,uint256,bytes)[])": {
        "notice": "To call SoloMargin.operate from Deunifi, instead of DssProxy (required by SoloMargin)."
      },
      "flashLoanFromDSProxy(address,address,address[],uint256[],address,(address,uint256)[],(uint8,uint256,(bool,uint8,uint8,uint256),uint256,uint256,address,uint256,bytes)[],address)": {
        "notice": "Executed as DSProxy."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Deunifi.sol:Deunifi",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1829,
        "contract": "contracts/Deunifi.sol:Deunifi",
        "label": "feeManager",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}