{
  "address": "0x5eb3Bc0a489C5A8288765d2336659EbCA68FCd00",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ok",
          "type": "uint256"
        }
      ],
      "name": "cdpAllow",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "apt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "urn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "daiJoin_join",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "jug",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "daiJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "draw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        }
      ],
      "name": "enter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "apt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "urn",
          "type": "address"
        }
      ],
      "name": "ethJoin_join",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ethJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "exitETH",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gemJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "exitGem",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "flux",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ethJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "freeETH",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gemJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "freeGem",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "dink",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "dart",
          "type": "int256"
        }
      ],
      "name": "frob",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "apt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "urn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "transferFrom",
          "type": "bool"
        }
      ],
      "name": "gemJoin_join",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "give",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "proxyRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        }
      ],
      "name": "giveToProxy",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "obj",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "hope",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ethJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        }
      ],
      "name": "lockETH",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "jug",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ethJoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "daiJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wadD",
          "type": "uint256"
        }
      ],
      "name": "lockETHAndDraw",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gemJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "transferFrom",
          "type": "bool"
        }
      ],
      "name": "lockGem",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "jug",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gemJoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "daiJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wadC",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wadD",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "transferFrom",
          "type": "bool"
        }
      ],
      "name": "lockGemAndDraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "gemJoin",
          "type": "address"
        }
      ],
      "name": "makeGemBag",
      "outputs": [
        {
          "internalType": "address",
          "name": "bag",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rad",
          "type": "uint256"
        }
      ],
      "name": "move",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "obj",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "nope",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ilk",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "open",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "jug",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ethJoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "daiJoin",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ilk",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "wadD",
          "type": "uint256"
        }
      ],
      "name": "openLockETHAndDraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "jug",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gntJoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "daiJoin",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ilk",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "wadC",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wadD",
          "type": "uint256"
        }
      ],
      "name": "openLockGNTAndDraw",
      "outputs": [
        {
          "internalType": "address",
          "name": "bag",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "jug",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gemJoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "daiJoin",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ilk",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "wadC",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wadD",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "transferFrom",
          "type": "bool"
        }
      ],
      "name": "openLockGemAndDraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        }
      ],
      "name": "quit",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ethJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "safeLockETH",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gemJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "transferFrom",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "safeLockGem",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "daiJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "safeWipe",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "daiJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "safeWipeAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdpSrc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cdpOrg",
          "type": "uint256"
        }
      ],
      "name": "shift",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "gem",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ok",
          "type": "uint256"
        }
      ],
      "name": "urnAllow",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "daiJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "wipe",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "daiJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        }
      ],
      "name": "wipeAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ethJoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "daiJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wadC",
          "type": "uint256"
        }
      ],
      "name": "wipeAllAndFreeETH",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gemJoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "daiJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wadC",
          "type": "uint256"
        }
      ],
      "name": "wipeAllAndFreeGem",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ethJoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "daiJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wadC",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wadD",
          "type": "uint256"
        }
      ],
      "name": "wipeAndFreeETH",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gemJoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "daiJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wadC",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wadD",
          "type": "uint256"
        }
      ],
      "name": "wipeAndFreeGem",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9fff35ac5e18f7a2266c3e187fa4ee63ef07c9cc9f9c38b00b66ee0ab6da4c27",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5eb3Bc0a489C5A8288765d2336659EbCA68FCd00",
    "transactionIndex": 0,
    "gasUsed": "6329446",
    "logsBloom": "0x
    "blockHash": "0xc0ac1b5e6896384a3a08fbccea983985b304132eb3e455e1e4cf6a71fec744fc",
    "transactionHash": "0x9fff35ac5e18f7a2266c3e187fa4ee63ef07c9cc9f9c38b00b66ee0ab6da4c27",
    "logs": [],
    "blockNumber": 12770173,
    "cumulativeGasUsed": "6329446",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "49dbd8b6dfd23a09d47a1c5628f47c08",
  "metadata": "{\"compiler\":{\"version\":\"0.5.12+commit.7709ece9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ok\",\"type\":\"uint256\"}],\"name\":\"cdpAllow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"apt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"urn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"daiJoin_join\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jug\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"draw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"name\":\"enter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"apt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"urn\",\"type\":\"address\"}],\"name\":\"ethJoin_join\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"exitETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"exitGem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"flux\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"freeETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"freeGem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"dink\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dart\",\"type\":\"int256\"}],\"name\":\"frob\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"apt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"urn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferFrom\",\"type\":\"bool\"}],\"name\":\"gemJoin_join\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"give\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"giveToProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"obj\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"hope\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"name\":\"lockETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jug\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"}],\"name\":\"lockETHAndDraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferFrom\",\"type\":\"bool\"}],\"name\":\"lockGem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jug\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferFrom\",\"type\":\"bool\"}],\"name\":\"lockGemAndDraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"}],\"name\":\"makeGemBag\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bag\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"move\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"obj\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"nope\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"open\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jug\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"}],\"name\":\"openLockETHAndDraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jug\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gntJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"wadC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"}],\"name\":\"openLockGNTAndDraw\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bag\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jug\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"wadC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferFrom\",\"type\":\"bool\"}],\"name\":\"openLockGemAndDraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"quit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"safeLockETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferFrom\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"safeLockGem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"safeWipe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"safeWipeAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdpSrc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cdpOrg\",\"type\":\"uint256\"}],\"name\":\"shift\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"gem\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ok\",\"type\":\"uint256\"}],\"name\":\"urnAllow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"wipe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"name\":\"wipeAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadC\",\"type\":\"uint256\"}],\"name\":\"wipeAllAndFreeETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadC\",\"type\":\"uint256\"}],\"name\":\"wipeAllAndFreeGem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"}],\"name\":\"wipeAndFreeETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"}],\"name\":\"wipeAndFreeGem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/test/DssProxyActions.sol\":\"DssProxyActions\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/test/DssProxyActions.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2019-11-14\\n*/\\n\\n// hevm: flattened sources of /nix/store/sxr9nv6bdacjzw8vhns72bxjga458x34-dss-proxy-actions-53f1d75/src/DssProxyActions.sol\\npragma solidity =0.5.12;\\n\\n////// /nix/store/sxr9nv6bdacjzw8vhns72bxjga458x34-dss-proxy-actions-53f1d75/src/DssProxyActions.sol\\n/* pragma solidity 0.5.12; */\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract GemLike {\\n    function approve(address, uint) public;\\n    function transfer(address, uint) public;\\n    function transferFrom(address, address, uint) public;\\n    function deposit() public payable;\\n    function withdraw(uint) public;\\n}\\n\\ncontract ManagerLike {\\n    function cdpCan(address, uint, address) public view returns (uint);\\n    function ilks(uint) public view returns (bytes32);\\n    function owns(uint) public view returns (address);\\n    function urns(uint) public view returns (address);\\n    function vat() public view returns (address);\\n    function open(bytes32, address) public returns (uint);\\n    function give(uint, address) public;\\n    function cdpAllow(uint, address, uint) public;\\n    function urnAllow(address, uint) public;\\n    function frob(uint, int, int) public;\\n    function flux(uint, address, uint) public;\\n    function move(uint, address, uint) public;\\n    function exit(address, uint, address, uint) public;\\n    function quit(uint, address) public;\\n    function enter(address, uint) public;\\n    function shift(uint, uint) public;\\n}\\n\\ncontract VatLike {\\n    function can(address, address) public view returns (uint);\\n    function ilks(bytes32) public view returns (uint, uint, uint, uint, uint);\\n    function dai(address) public view returns (uint);\\n    function urns(bytes32, address) public view returns (uint, uint);\\n    function frob(bytes32, address, address, address, int, int) public;\\n    function hope(address) public;\\n    function move(address, address, uint) public;\\n}\\n\\ncontract GemJoinLike {\\n    function dec() public returns (uint);\\n    function gem() public returns (GemLike);\\n    function join(address, uint) public payable;\\n    function exit(address, uint) public;\\n}\\n\\ncontract GNTJoinLike {\\n    function bags(address) public view returns (address);\\n    function make(address) public returns (address);\\n}\\n\\ncontract DaiJoinLike {\\n    function vat() public returns (VatLike);\\n    function dai() public returns (GemLike);\\n    function join(address, uint) public payable;\\n    function exit(address, uint) public;\\n}\\n\\ncontract HopeLike {\\n    function hope(address) public;\\n    function nope(address) public;\\n}\\n\\ncontract EndLike {\\n    function fix(bytes32) public view returns (uint);\\n    function cash(bytes32, uint) public;\\n    function free(bytes32) public;\\n    function pack(uint) public;\\n    function skim(bytes32, address) public;\\n}\\n\\ncontract JugLike {\\n    function drip(bytes32) public returns (uint);\\n}\\n\\ncontract PotLike {\\n    function pie(address) public view returns (uint);\\n    function drip() public returns (uint);\\n    function join(uint) public;\\n    function exit(uint) public;\\n}\\n\\ncontract ProxyRegistryLike {\\n    function proxies(address) public view returns (address);\\n    function build(address) public returns (address);\\n}\\n\\ncontract ProxyLike {\\n    function owner() public view returns (address);\\n}\\n\\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\n// WARNING: These functions meant to be used as a a library for a DSProxy. Some are unsafe if you call them directly.\\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\n\\ncontract Common {\\n    uint256 constant RAY = 10 ** 27;\\n\\n    // Internal functions\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"mul-overflow\\\");\\n    }\\n\\n    // Public functions\\n\\n    function daiJoin_join(address apt, address urn, uint wad) public {\\n        // Gets DAI from the user's wallet\\n        DaiJoinLike(apt).dai().transferFrom(msg.sender, address(this), wad);\\n        // Approves adapter to take the DAI amount\\n        DaiJoinLike(apt).dai().approve(apt, wad);\\n        // Joins DAI into the vat\\n        DaiJoinLike(apt).join(urn, wad);\\n    }\\n}\\n\\ncontract DssProxyActions is Common {\\n    // Internal functions\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, \\\"sub-overflow\\\");\\n    }\\n\\n    function toInt(uint x) internal pure returns (int y) {\\n        y = int(x);\\n        require(y >= 0, \\\"int-overflow\\\");\\n    }\\n\\n    function toRad(uint wad) internal pure returns (uint rad) {\\n        rad = mul(wad, 10 ** 27);\\n    }\\n\\n    function convertTo18(address gemJoin, uint256 amt) internal returns (uint256 wad) {\\n        // For those collaterals that have less than 18 decimals precision we need to do the conversion before passing to frob function\\n        // Adapters will automatically handle the difference of precision\\n        wad = mul(\\n            amt,\\n            10 ** (18 - GemJoinLike(gemJoin).dec())\\n        );\\n    }\\n\\n    function _getDrawDart(\\n        address vat,\\n        address jug,\\n        address urn,\\n        bytes32 ilk,\\n        uint wad\\n    ) internal returns (int dart) {\\n        // Updates stability fee rate\\n        uint rate = JugLike(jug).drip(ilk);\\n\\n        // Gets DAI balance of the urn in the vat\\n        uint dai = VatLike(vat).dai(urn);\\n\\n        // If there was already enough DAI in the vat balance, just exits it without adding more debt\\n        if (dai < mul(wad, RAY)) {\\n            // Calculates the needed dart so together with the existing dai in the vat is enough to exit wad amount of DAI tokens\\n            dart = toInt(sub(mul(wad, RAY), dai) / rate);\\n            // This is neeeded due lack of precision. It might need to sum an extra dart wei (for the given DAI wad amount)\\n            dart = mul(uint(dart), rate) < mul(wad, RAY) ? dart + 1 : dart;\\n        }\\n    }\\n\\n    function _getWipeDart(\\n        address vat,\\n        uint dai,\\n        address urn,\\n        bytes32 ilk\\n    ) internal view returns (int dart) {\\n        // Gets actual rate from the vat\\n        (, uint rate,,,) = VatLike(vat).ilks(ilk);\\n        // Gets actual art value of the urn\\n        (, uint art) = VatLike(vat).urns(ilk, urn);\\n\\n        // Uses the whole dai balance in the vat to reduce the debt\\n        dart = toInt(dai / rate);\\n        // Checks the calculated dart is not higher than urn.art (total debt), otherwise uses its value\\n        dart = uint(dart) <= art ? - dart : - toInt(art);\\n    }\\n\\n    function _getWipeAllWad(\\n        address vat,\\n        address usr,\\n        address urn,\\n        bytes32 ilk\\n    ) internal view returns (uint wad) {\\n        // Gets actual rate from the vat\\n        (, uint rate,,,) = VatLike(vat).ilks(ilk);\\n        // Gets actual art value of the urn\\n        (, uint art) = VatLike(vat).urns(ilk, urn);\\n        // Gets actual dai amount in the urn\\n        uint dai = VatLike(vat).dai(usr);\\n\\n        uint rad = sub(mul(art, rate), dai);\\n        wad = rad / RAY;\\n\\n        // If the rad precision has some dust, it will need to request for 1 extra wad wei\\n        wad = mul(wad, RAY) < rad ? wad + 1 : wad;\\n    }\\n\\n    // Public functions\\n\\n    function transfer(address gem, address dst, uint wad) public {\\n        GemLike(gem).transfer(dst, wad);\\n    }\\n\\n    function ethJoin_join(address apt, address urn) public payable {\\n        // Wraps ETH in WETH\\n        GemJoinLike(apt).gem().deposit.value(msg.value)();\\n        // Approves adapter to take the WETH amount\\n        GemJoinLike(apt).gem().approve(address(apt), msg.value);\\n        // Joins WETH collateral into the vat\\n        GemJoinLike(apt).join(urn, msg.value);\\n    }\\n\\n    function gemJoin_join(address apt, address urn, uint wad, bool transferFrom) public {\\n        // Only executes for tokens that have approval/transferFrom implementation\\n        if (transferFrom) {\\n            // Gets token from the user's wallet\\n            GemJoinLike(apt).gem().transferFrom(msg.sender, address(this), wad);\\n            // Approves adapter to take the token amount\\n            GemJoinLike(apt).gem().approve(apt, wad);\\n        }\\n        // Joins token collateral into the vat\\n        GemJoinLike(apt).join(urn, wad);\\n    }\\n\\n    function hope(\\n        address obj,\\n        address usr\\n    ) public {\\n        HopeLike(obj).hope(usr);\\n    }\\n\\n    function nope(\\n        address obj,\\n        address usr\\n    ) public {\\n        HopeLike(obj).nope(usr);\\n    }\\n\\n    function open(\\n        address manager,\\n        bytes32 ilk,\\n        address usr\\n    ) public returns (uint cdp) {\\n        cdp = ManagerLike(manager).open(ilk, usr);\\n    }\\n\\n    function give(\\n        address manager,\\n        uint cdp,\\n        address usr\\n    ) public {\\n        ManagerLike(manager).give(cdp, usr);\\n    }\\n\\n    function giveToProxy(\\n        address proxyRegistry,\\n        address manager,\\n        uint cdp,\\n        address dst\\n    ) public {\\n        // Gets actual proxy address\\n        address proxy = ProxyRegistryLike(proxyRegistry).proxies(dst);\\n        // Checks if the proxy address already existed and dst address is still the owner\\n        if (proxy == address(0) || ProxyLike(proxy).owner() != dst) {\\n            uint csize;\\n            assembly {\\n                csize := extcodesize(dst)\\n            }\\n            // We want to avoid creating a proxy for a contract address that might not be able to handle proxies, then losing the CDP\\n            require(csize == 0, \\\"Dst-is-a-contract\\\");\\n            // Creates the proxy for the dst address\\n            proxy = ProxyRegistryLike(proxyRegistry).build(dst);\\n        }\\n        // Transfers CDP to the dst proxy\\n        give(manager, cdp, proxy);\\n    }\\n\\n    function cdpAllow(\\n        address manager,\\n        uint cdp,\\n        address usr,\\n        uint ok\\n    ) public {\\n        ManagerLike(manager).cdpAllow(cdp, usr, ok);\\n    }\\n\\n    function urnAllow(\\n        address manager,\\n        address usr,\\n        uint ok\\n    ) public {\\n        ManagerLike(manager).urnAllow(usr, ok);\\n    }\\n\\n    function flux(\\n        address manager,\\n        uint cdp,\\n        address dst,\\n        uint wad\\n    ) public {\\n        ManagerLike(manager).flux(cdp, dst, wad);\\n    }\\n\\n    function move(\\n        address manager,\\n        uint cdp,\\n        address dst,\\n        uint rad\\n    ) public {\\n        ManagerLike(manager).move(cdp, dst, rad);\\n    }\\n\\n    function frob(\\n        address manager,\\n        uint cdp,\\n        int dink,\\n        int dart\\n    ) public {\\n        ManagerLike(manager).frob(cdp, dink, dart);\\n    }\\n\\n    function quit(\\n        address manager,\\n        uint cdp,\\n        address dst\\n    ) public {\\n        ManagerLike(manager).quit(cdp, dst);\\n    }\\n\\n    function enter(\\n        address manager,\\n        address src,\\n        uint cdp\\n    ) public {\\n        ManagerLike(manager).enter(src, cdp);\\n    }\\n\\n    function shift(\\n        address manager,\\n        uint cdpSrc,\\n        uint cdpOrg\\n    ) public {\\n        ManagerLike(manager).shift(cdpSrc, cdpOrg);\\n    }\\n\\n    function makeGemBag(\\n        address gemJoin\\n    ) public returns (address bag) {\\n        bag = GNTJoinLike(gemJoin).make(address(this));\\n    }\\n\\n    function lockETH(\\n        address manager,\\n        address ethJoin,\\n        uint cdp\\n    ) public payable {\\n        // Receives ETH amount, converts it to WETH and joins it into the vat\\n        ethJoin_join(ethJoin, address(this));\\n        // Locks WETH amount into the CDP\\n        VatLike(ManagerLike(manager).vat()).frob(\\n            ManagerLike(manager).ilks(cdp),\\n            ManagerLike(manager).urns(cdp),\\n            address(this),\\n            address(this),\\n            toInt(msg.value),\\n            0\\n        );\\n    }\\n\\n    function safeLockETH(\\n        address manager,\\n        address ethJoin,\\n        uint cdp,\\n        address owner\\n    ) public payable {\\n        require(ManagerLike(manager).owns(cdp) == owner, \\\"owner-missmatch\\\");\\n        lockETH(manager, ethJoin, cdp);\\n    }\\n\\n    function lockGem(\\n        address manager,\\n        address gemJoin,\\n        uint cdp,\\n        uint wad,\\n        bool transferFrom\\n    ) public {\\n        // Takes token amount from user's wallet and joins into the vat\\n        gemJoin_join(gemJoin, address(this), wad, transferFrom);\\n        // Locks token amount into the CDP\\n        VatLike(ManagerLike(manager).vat()).frob(\\n            ManagerLike(manager).ilks(cdp),\\n            ManagerLike(manager).urns(cdp),\\n            address(this),\\n            address(this),\\n            toInt(convertTo18(gemJoin, wad)),\\n            0\\n        );\\n    }\\n\\n    function safeLockGem(\\n        address manager,\\n        address gemJoin,\\n        uint cdp,\\n        uint wad,\\n        bool transferFrom,\\n        address owner\\n    ) public {\\n        require(ManagerLike(manager).owns(cdp) == owner, \\\"owner-missmatch\\\");\\n        lockGem(manager, gemJoin, cdp, wad, transferFrom);\\n    }\\n\\n    function freeETH(\\n        address manager,\\n        address ethJoin,\\n        uint cdp,\\n        uint wad\\n    ) public {\\n        // Unlocks WETH amount from the CDP\\n        frob(manager, cdp, -toInt(wad), 0);\\n        // Moves the amount from the CDP urn to proxy's address\\n        flux(manager, cdp, address(this), wad);\\n        // Exits WETH amount to proxy address as a token\\n        GemJoinLike(ethJoin).exit(address(this), wad);\\n        // Converts WETH to ETH\\n        GemJoinLike(ethJoin).gem().withdraw(wad);\\n        // Sends ETH back to the user's wallet\\n        msg.sender.transfer(wad);\\n    }\\n\\n    function freeGem(\\n        address manager,\\n        address gemJoin,\\n        uint cdp,\\n        uint wad\\n    ) public {\\n        uint wad18 = convertTo18(gemJoin, wad);\\n        // Unlocks token amount from the CDP\\n        frob(manager, cdp, -toInt(wad18), 0);\\n        // Moves the amount from the CDP urn to proxy's address\\n        flux(manager, cdp, address(this), wad18);\\n        // Exits token amount to the user's wallet as a token\\n        GemJoinLike(gemJoin).exit(msg.sender, wad);\\n    }\\n\\n    function exitETH(\\n        address manager,\\n        address ethJoin,\\n        uint cdp,\\n        uint wad\\n    ) public {\\n        // Moves the amount from the CDP urn to proxy's address\\n        flux(manager, cdp, address(this), wad);\\n\\n        // Exits WETH amount to proxy address as a token\\n        GemJoinLike(ethJoin).exit(address(this), wad);\\n        // Converts WETH to ETH\\n        GemJoinLike(ethJoin).gem().withdraw(wad);\\n        // Sends ETH back to the user's wallet\\n        msg.sender.transfer(wad);\\n    }\\n\\n    function exitGem(\\n        address manager,\\n        address gemJoin,\\n        uint cdp,\\n        uint wad\\n    ) public {\\n        // Moves the amount from the CDP urn to proxy's address\\n        flux(manager, cdp, address(this), convertTo18(gemJoin, wad));\\n\\n        // Exits token amount to the user's wallet as a token\\n        GemJoinLike(gemJoin).exit(msg.sender, wad);\\n    }\\n\\n    function draw(\\n        address manager,\\n        address jug,\\n        address daiJoin,\\n        uint cdp,\\n        uint wad\\n    ) public {\\n        address urn = ManagerLike(manager).urns(cdp);\\n        address vat = ManagerLike(manager).vat();\\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\\n        // Generates debt in the CDP\\n        frob(manager, cdp, 0, _getDrawDart(vat, jug, urn, ilk, wad));\\n        // Moves the DAI amount (balance in the vat in rad) to proxy's address\\n        move(manager, cdp, address(this), toRad(wad));\\n        // Allows adapter to access to proxy's DAI balance in the vat\\n        if (VatLike(vat).can(address(this), address(daiJoin)) == 0) {\\n            VatLike(vat).hope(daiJoin);\\n        }\\n        // Exits DAI to the user's wallet as a token\\n        DaiJoinLike(daiJoin).exit(msg.sender, wad);\\n    }\\n\\n    function wipe(\\n        address manager,\\n        address daiJoin,\\n        uint cdp,\\n        uint wad\\n    ) public {\\n        address vat = ManagerLike(manager).vat();\\n        address urn = ManagerLike(manager).urns(cdp);\\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\\n\\n        address own = ManagerLike(manager).owns(cdp);\\n        if (own == address(this) || ManagerLike(manager).cdpCan(own, cdp, address(this)) == 1) {\\n            // Joins DAI amount into the vat\\n            daiJoin_join(daiJoin, urn, wad);\\n            // Paybacks debt to the CDP\\n            frob(manager, cdp, 0, _getWipeDart(vat, VatLike(vat).dai(urn), urn, ilk));\\n        } else {\\n             // Joins DAI amount into the vat\\n            daiJoin_join(daiJoin, address(this), wad);\\n            // Paybacks debt to the CDP\\n            VatLike(vat).frob(\\n                ilk,\\n                urn,\\n                address(this),\\n                address(this),\\n                0,\\n                _getWipeDart(vat, wad * RAY, urn, ilk)\\n            );\\n        }\\n    }\\n\\n    function safeWipe(\\n        address manager,\\n        address daiJoin,\\n        uint cdp,\\n        uint wad,\\n        address owner\\n    ) public {\\n        require(ManagerLike(manager).owns(cdp) == owner, \\\"owner-missmatch\\\");\\n        wipe(manager, daiJoin, cdp, wad);\\n    }\\n\\n    function wipeAll(\\n        address manager,\\n        address daiJoin,\\n        uint cdp\\n    ) public {\\n        address vat = ManagerLike(manager).vat();\\n        address urn = ManagerLike(manager).urns(cdp);\\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\\n        (, uint art) = VatLike(vat).urns(ilk, urn);\\n\\n        address own = ManagerLike(manager).owns(cdp);\\n        if (own == address(this) || ManagerLike(manager).cdpCan(own, cdp, address(this)) == 1) {\\n            // Joins DAI amount into the vat\\n            daiJoin_join(daiJoin, urn, _getWipeAllWad(vat, urn, urn, ilk));\\n            // Paybacks debt to the CDP\\n            frob(manager, cdp, 0, -int(art));\\n        } else {\\n            // Joins DAI amount into the vat\\n            daiJoin_join(daiJoin, address(this), _getWipeAllWad(vat, address(this), urn, ilk));\\n            // Paybacks debt to the CDP\\n            VatLike(vat).frob(\\n                ilk,\\n                urn,\\n                address(this),\\n                address(this),\\n                0,\\n                -int(art)\\n            );\\n        }\\n    }\\n\\n    function safeWipeAll(\\n        address manager,\\n        address daiJoin,\\n        uint cdp,\\n        address owner\\n    ) public {\\n        require(ManagerLike(manager).owns(cdp) == owner, \\\"owner-missmatch\\\");\\n        wipeAll(manager, daiJoin, cdp);\\n    }\\n\\n    function lockETHAndDraw(\\n        address manager,\\n        address jug,\\n        address ethJoin,\\n        address daiJoin,\\n        uint cdp,\\n        uint wadD\\n    ) public payable {\\n        address urn = ManagerLike(manager).urns(cdp);\\n        address vat = ManagerLike(manager).vat();\\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\\n        // Receives ETH amount, converts it to WETH and joins it into the vat\\n        ethJoin_join(ethJoin, urn);\\n        // Locks WETH amount into the CDP and generates debt\\n        frob(manager, cdp, toInt(msg.value), _getDrawDart(vat, jug, urn, ilk, wadD));\\n        // Moves the DAI amount (balance in the vat in rad) to proxy's address\\n        move(manager, cdp, address(this), toRad(wadD));\\n        // Allows adapter to access to proxy's DAI balance in the vat\\n        if (VatLike(vat).can(address(this), address(daiJoin)) == 0) {\\n            VatLike(vat).hope(daiJoin);\\n        }\\n        // Exits DAI to the user's wallet as a token\\n        DaiJoinLike(daiJoin).exit(msg.sender, wadD);\\n    }\\n\\n    function openLockETHAndDraw(\\n        address manager,\\n        address jug,\\n        address ethJoin,\\n        address daiJoin,\\n        bytes32 ilk,\\n        uint wadD\\n    ) public payable returns (uint cdp) {\\n        cdp = open(manager, ilk, address(this));\\n        lockETHAndDraw(manager, jug, ethJoin, daiJoin, cdp, wadD);\\n    }\\n\\n    function lockGemAndDraw(\\n        address manager,\\n        address jug,\\n        address gemJoin,\\n        address daiJoin,\\n        uint cdp,\\n        uint wadC,\\n        uint wadD,\\n        bool transferFrom\\n    ) public {\\n        address urn = ManagerLike(manager).urns(cdp);\\n        address vat = ManagerLike(manager).vat();\\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\\n        // Takes token amount from user's wallet and joins into the vat\\n        gemJoin_join(gemJoin, urn, wadC, transferFrom);\\n        // Locks token amount into the CDP and generates debt\\n        frob(manager, cdp, toInt(convertTo18(gemJoin, wadC)), _getDrawDart(vat, jug, urn, ilk, wadD));\\n        // Moves the DAI amount (balance in the vat in rad) to proxy's address\\n        move(manager, cdp, address(this), toRad(wadD));\\n        // Allows adapter to access to proxy's DAI balance in the vat\\n        if (VatLike(vat).can(address(this), address(daiJoin)) == 0) {\\n            VatLike(vat).hope(daiJoin);\\n        }\\n        // Exits DAI to the user's wallet as a token\\n        DaiJoinLike(daiJoin).exit(msg.sender, wadD);\\n    }\\n\\n    function openLockGemAndDraw(\\n        address manager,\\n        address jug,\\n        address gemJoin,\\n        address daiJoin,\\n        bytes32 ilk,\\n        uint wadC,\\n        uint wadD,\\n        bool transferFrom\\n    ) public returns (uint cdp) {\\n        cdp = open(manager, ilk, address(this));\\n        lockGemAndDraw(manager, jug, gemJoin, daiJoin, cdp, wadC, wadD, transferFrom);\\n    }\\n\\n    function openLockGNTAndDraw(\\n        address manager,\\n        address jug,\\n        address gntJoin,\\n        address daiJoin,\\n        bytes32 ilk,\\n        uint wadC,\\n        uint wadD\\n    ) public returns (address bag, uint cdp) {\\n        // Creates bag (if doesn't exist) to hold GNT\\n        bag = GNTJoinLike(gntJoin).bags(address(this));\\n        if (bag == address(0)) {\\n            bag = makeGemBag(gntJoin);\\n        }\\n        // Transfer funds to the funds which previously were sent to the proxy\\n        GemLike(GemJoinLike(gntJoin).gem()).transfer(bag, wadC);\\n        cdp = openLockGemAndDraw(manager, jug, gntJoin, daiJoin, ilk, wadC, wadD, false);\\n    }\\n\\n    function wipeAndFreeETH(\\n        address manager,\\n        address ethJoin,\\n        address daiJoin,\\n        uint cdp,\\n        uint wadC,\\n        uint wadD\\n    ) public {\\n        address urn = ManagerLike(manager).urns(cdp);\\n        // Joins DAI amount into the vat\\n        daiJoin_join(daiJoin, urn, wadD);\\n        // Paybacks debt to the CDP and unlocks WETH amount from it\\n        frob(\\n            manager,\\n            cdp,\\n            -toInt(wadC),\\n            _getWipeDart(ManagerLike(manager).vat(), VatLike(ManagerLike(manager).vat()).dai(urn), urn, ManagerLike(manager).ilks(cdp))\\n        );\\n        // Moves the amount from the CDP urn to proxy's address\\n        flux(manager, cdp, address(this), wadC);\\n        // Exits WETH amount to proxy address as a token\\n        GemJoinLike(ethJoin).exit(address(this), wadC);\\n        // Converts WETH to ETH\\n        GemJoinLike(ethJoin).gem().withdraw(wadC);\\n        // Sends ETH back to the user's wallet\\n        msg.sender.transfer(wadC);\\n    }\\n\\n    function wipeAllAndFreeETH(\\n        address manager,\\n        address ethJoin,\\n        address daiJoin,\\n        uint cdp,\\n        uint wadC\\n    ) public {\\n        address vat = ManagerLike(manager).vat();\\n        address urn = ManagerLike(manager).urns(cdp);\\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\\n        (, uint art) = VatLike(vat).urns(ilk, urn);\\n\\n        // Joins DAI amount into the vat\\n        daiJoin_join(daiJoin, urn, _getWipeAllWad(vat, urn, urn, ilk));\\n        // Paybacks debt to the CDP and unlocks WETH amount from it\\n        frob(\\n            manager,\\n            cdp,\\n            -toInt(wadC),\\n            -int(art)\\n        );\\n        // Moves the amount from the CDP urn to proxy's address\\n        flux(manager, cdp, address(this), wadC);\\n        // Exits WETH amount to proxy address as a token\\n        GemJoinLike(ethJoin).exit(address(this), wadC);\\n        // Converts WETH to ETH\\n        GemJoinLike(ethJoin).gem().withdraw(wadC);\\n        // Sends ETH back to the user's wallet\\n        msg.sender.transfer(wadC);\\n    }\\n\\n    function wipeAndFreeGem(\\n        address manager,\\n        address gemJoin,\\n        address daiJoin,\\n        uint cdp,\\n        uint wadC,\\n        uint wadD\\n    ) public {\\n        address urn = ManagerLike(manager).urns(cdp);\\n        // Joins DAI amount into the vat\\n        daiJoin_join(daiJoin, urn, wadD);\\n        uint wad18 = convertTo18(gemJoin, wadC);\\n        // Paybacks debt to the CDP and unlocks token amount from it\\n        frob(\\n            manager,\\n            cdp,\\n            -toInt(wad18),\\n            _getWipeDart(ManagerLike(manager).vat(), VatLike(ManagerLike(manager).vat()).dai(urn), urn, ManagerLike(manager).ilks(cdp))\\n        );\\n        // Moves the amount from the CDP urn to proxy's address\\n        flux(manager, cdp, address(this), wad18);\\n        // Exits token amount to the user's wallet as a token\\n        GemJoinLike(gemJoin).exit(msg.sender, wadC);\\n    }\\n\\n    function wipeAllAndFreeGem(\\n        address manager,\\n        address gemJoin,\\n        address daiJoin,\\n        uint cdp,\\n        uint wadC\\n    ) public {\\n        address vat = ManagerLike(manager).vat();\\n        address urn = ManagerLike(manager).urns(cdp);\\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\\n        (, uint art) = VatLike(vat).urns(ilk, urn);\\n\\n        // Joins DAI amount into the vat\\n        daiJoin_join(daiJoin, urn, _getWipeAllWad(vat, urn, urn, ilk));\\n        uint wad18 = convertTo18(gemJoin, wadC);\\n        // Paybacks debt to the CDP and unlocks token amount from it\\n        frob(\\n            manager,\\n            cdp,\\n            -toInt(wad18),\\n            -int(art)\\n        );\\n        // Moves the amount from the CDP urn to proxy's address\\n        flux(manager, cdp, address(this), wad18);\\n        // Exits token amount to the user's wallet as a token\\n        GemJoinLike(gemJoin).exit(msg.sender, wadC);\\n    }\\n}\\n\\ncontract DssProxyActionsEnd is Common {\\n    // Internal functions\\n\\n    function _free(\\n        address manager,\\n        address end,\\n        uint cdp\\n    ) internal returns (uint ink) {\\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\\n        address urn = ManagerLike(manager).urns(cdp);\\n        VatLike vat = VatLike(ManagerLike(manager).vat());\\n        uint art;\\n        (ink, art) = vat.urns(ilk, urn);\\n\\n        // If CDP still has debt, it needs to be paid\\n        if (art > 0) {\\n            EndLike(end).skim(ilk, urn);\\n            (ink,) = vat.urns(ilk, urn);\\n        }\\n        // Approves the manager to transfer the position to proxy's address in the vat\\n        if (vat.can(address(this), address(manager)) == 0) {\\n            vat.hope(manager);\\n        }\\n        // Transfers position from CDP to the proxy address\\n        ManagerLike(manager).quit(cdp, address(this));\\n        // Frees the position and recovers the collateral in the vat registry\\n        EndLike(end).free(ilk);\\n    }\\n\\n    // Public functions\\n    function freeETH(\\n        address manager,\\n        address ethJoin,\\n        address end,\\n        uint cdp\\n    ) public {\\n        uint wad = _free(manager, end, cdp);\\n        // Exits WETH amount to proxy address as a token\\n        GemJoinLike(ethJoin).exit(address(this), wad);\\n        // Converts WETH to ETH\\n        GemJoinLike(ethJoin).gem().withdraw(wad);\\n        // Sends ETH back to the user's wallet\\n        msg.sender.transfer(wad);\\n    }\\n\\n    function freeGem(\\n        address manager,\\n        address gemJoin,\\n        address end,\\n        uint cdp\\n    ) public {\\n        uint wad = _free(manager, end, cdp);\\n        // Exits token amount to the user's wallet as a token\\n        GemJoinLike(gemJoin).exit(msg.sender, wad);\\n    }\\n\\n    function pack(\\n        address daiJoin,\\n        address end,\\n        uint wad\\n    ) public {\\n        daiJoin_join(daiJoin, address(this), wad);\\n        VatLike vat = DaiJoinLike(daiJoin).vat();\\n        // Approves the end to take out DAI from the proxy's balance in the vat\\n        if (vat.can(address(this), address(end)) == 0) {\\n            vat.hope(end);\\n        }\\n        EndLike(end).pack(wad);\\n    }\\n\\n    function cashETH(\\n        address ethJoin,\\n        address end,\\n        bytes32 ilk,\\n        uint wad\\n    ) public {\\n        EndLike(end).cash(ilk, wad);\\n        uint wadC = mul(wad, EndLike(end).fix(ilk)) / RAY;\\n        // Exits WETH amount to proxy address as a token\\n        GemJoinLike(ethJoin).exit(address(this), wadC);\\n        // Converts WETH to ETH\\n        GemJoinLike(ethJoin).gem().withdraw(wadC);\\n        // Sends ETH back to the user's wallet\\n        msg.sender.transfer(wadC);\\n    }\\n\\n    function cashGem(\\n        address gemJoin,\\n        address end,\\n        bytes32 ilk,\\n        uint wad\\n    ) public {\\n        EndLike(end).cash(ilk, wad);\\n        // Exits token amount to the user's wallet as a token\\n        GemJoinLike(gemJoin).exit(msg.sender, mul(wad, EndLike(end).fix(ilk)) / RAY);\\n    }\\n}\\n\\ncontract DssProxyActionsDsr is Common {\\n    function join(\\n        address daiJoin,\\n        address pot,\\n        uint wad\\n    ) public {\\n        VatLike vat = DaiJoinLike(daiJoin).vat();\\n        // Executes drip to get the chi rate updated to rho == now, otherwise join will fail\\n        uint chi = PotLike(pot).drip();\\n        // Joins wad amount to the vat balance\\n        daiJoin_join(daiJoin, address(this), wad);\\n        // Approves the pot to take out DAI from the proxy's balance in the vat\\n        if (vat.can(address(this), address(pot)) == 0) {\\n            vat.hope(pot);\\n        }\\n        // Joins the pie value (equivalent to the DAI wad amount) in the pot\\n        PotLike(pot).join(mul(wad, RAY) / chi);\\n    }\\n\\n    function exit(\\n        address daiJoin,\\n        address pot,\\n        uint wad\\n    ) public {\\n        VatLike vat = DaiJoinLike(daiJoin).vat();\\n        // Executes drip to count the savings accumulated until this moment\\n        uint chi = PotLike(pot).drip();\\n        // Calculates the pie value in the pot equivalent to the DAI wad amount\\n        uint pie = mul(wad, RAY) / chi;\\n        // Exits DAI from the pot\\n        PotLike(pot).exit(pie);\\n        // Checks the actual balance of DAI in the vat after the pot exit\\n        uint bal = DaiJoinLike(daiJoin).vat().dai(address(this));\\n        // Allows adapter to access to proxy's DAI balance in the vat\\n        if (vat.can(address(this), address(daiJoin)) == 0) {\\n            vat.hope(daiJoin);\\n        }\\n        // It is necessary to check if due rounding the exact wad amount can be exited by the adapter.\\n        // Otherwise it will do the maximum DAI balance in the vat\\n        DaiJoinLike(daiJoin).exit(\\n            msg.sender,\\n            bal >= mul(wad, RAY) ? wad : bal / RAY\\n        );\\n    }\\n\\n    function exitAll(\\n        address daiJoin,\\n        address pot\\n    ) public {\\n        VatLike vat = DaiJoinLike(daiJoin).vat();\\n        // Executes drip to count the savings accumulated until this moment\\n        uint chi = PotLike(pot).drip();\\n        // Gets the total pie belonging to the proxy address\\n        uint pie = PotLike(pot).pie(address(this));\\n        // Exits DAI from the pot\\n        PotLike(pot).exit(pie);\\n        // Allows adapter to access to proxy's DAI balance in the vat\\n        if (vat.can(address(this), address(daiJoin)) == 0) {\\n            vat.hope(daiJoin);\\n        }\\n        // Exits the DAI amount corresponding to the value of pie\\n        DaiJoinLike(daiJoin).exit(msg.sender, mul(chi, pie) / RAY);\\n    }\\n}\",\"keccak256\":\"0xf2f6c41b313501de0848f42c5088b392836daf74dfbe2abe80c1c6b4b1f10b8f\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061719e80620000216000396000f3fe60806040526004361061023b5760003560e01c806396e8d72c1161012e578063c0791710116100ab578063e685cc041161006f578063e685cc041461163b578063ead6472914611707578063eb0b9a85146117b8578063ee28457614611833578063fba7591d146118c15761023b565b8063c079171014611270578063c56167c614611386578063cbd4be3f14611401578063db802a32146114dd578063e205c108146115cd5761023b565b8063b50a5869116100f2578063b50a586914610fab578063ba727a951461101c578063bcd6deec146110a1578063be5e6c0314611146578063beabacc8146111f55761023b565b806396e8d72c14610d135780639f6f3d5b14610d825780639f887fde14610e27578063a033df1214610e98578063a6add01114610efc5761023b565b80634592aca7116101bc5780636ab6a491116101805780636ab6a49114610a785780636d68b70b14610afd5780637b5a3b4314610ba25780637bc3bd5314610c275780637df2eb2514610c8c5761023b565b80634592aca7146107d3578063493c20491461084e5780634b666199146108e95780635f6ef4471461096e5780636aa3ee11146109e95761023b565b80631d10f231116102035780631d10f2311461051857806325cf37d0146105935780632958f8a5146106185780633e29e565146106bd57806342dd11bb1461074e5761023b565b8063036a23951461024057806308f00e34146102bb5780630aee8dec146103405780631558b048146103db5780631c02d84614610460575b600080fd5b34801561024c57600080fd5b506102b96004803603606081101561026357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611952565b005b3480156102c757600080fd5b5061033e600480360360808110156102de57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050611eee565b005b34801561034c57600080fd5b506103d96004803603608081101561036357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506120d3565b005b3480156103e757600080fd5b5061045e600480360360808110156103fe57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612210565b005b610516600480360360c081101561047657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506122bd565b005b34801561052457600080fd5b506105916004803603606081101561053b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506126d6565b005b34801561059f57600080fd5b50610616600480360360808110156105b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061277a565b005b34801561062457600080fd5b506106bb600480360360a081101561063b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612827565b005b3480156106c957600080fd5b5061074c600480360360a08110156106e057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803515159060200190929190505050612966565b005b34801561075a57600080fd5b506107d16004803603608081101561077157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050612c38565b005b3480156107df57600080fd5b5061084c600480360360608110156107f657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612cf2565b005b34801561085a57600080fd5b506108e76004803603608081101561087157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612d96565b005b3480156108f557600080fd5b5061096c6004803603608081101561090c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919050505061308a565b005b34801561097a57600080fd5b506109e76004803603606081101561099157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613617565b005b3480156109f557600080fd5b50610a6260048036036060811015610a0c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506136bb565b6040518082815260200191505060405180910390f35b348015610a8457600080fd5b50610afb60048036036080811015610a9b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050613788565b005b348015610b0957600080fd5b50610ba0600480360360a0811015610b2057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050613860565b005b348015610bae57600080fd5b50610c2560048036036080811015610bc557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050613ced565b005b348015610c3357600080fd5b50610c8a60048036036060811015610c4a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050613eea565b005b348015610c9857600080fd5b50610d1160048036036080811015610caf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803515159060200190929190505050613f62565b005b348015610d1f57600080fd5b50610d8060048036036080811015610d3657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190505050614284565b005b348015610d8e57600080fd5b50610e25600480360360a0811015610da557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050614305565b005b348015610e3357600080fd5b50610e9660048036036040811015610e4a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061470c565b005b610efa60048036036040811015610eae57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506147a7565b005b348015610f0857600080fd5b50610fa9600480360360c0811015610f1f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190505050614a4e565b005b348015610fb757600080fd5b5061101a60048036036040811015610fce57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614e10565b005b34801561102857600080fd5b5061109f6004803603608081101561103f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050614eab565b005b3480156110ad57600080fd5b50611144600480360360a08110156110c457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050614f58565b005b34801561115257600080fd5b506111f3600480360360c081101561116957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001909291905050506152c0565b005b34801561120157600080fd5b5061126e6004803603606081101561121857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506157a7565b005b34801561127c57600080fd5b5061133d600480360360e081101561129357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919050505061584b565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b34801561139257600080fd5b506113ff600480360360608110156113a957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050615a89565b005b34801561140d57600080fd5b506114db600480360361010081101561142557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190803515159060200190929190505050615da3565b005b3480156114e957600080fd5b506115b7600480360361010081101561150157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001909291908035151590602001909291905050506161c9565b6040518082815260200191505060405180910390f35b611639600480360360608110156115e357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506161f4565b005b6116f1600480360360c081101561165157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506164b9565b6040518082815260200191505060405180910390f35b34801561171357600080fd5b506117b6600480360360c081101561172a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803515159060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506164e0565b005b3480156117c457600080fd5b50611831600480360360608110156117db57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050616621565b005b6118bf6004803603608081101561184957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506166c5565b005b3480156118cd57600080fd5b50611910600480360360208110156118e457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050616802565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60008373ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561199a57600080fd5b505afa1580156119ae573d6000803e3d6000fd5b505050506040513d60208110156119c457600080fd5b8101908080519060200190929190505050905060008473ffffffffffffffffffffffffffffffffffffffff16632726b073846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611a2a57600080fd5b505afa158015611a3e573d6000803e3d6000fd5b505050506040513d6020811015611a5457600080fd5b8101908080519060200190929190505050905060008573ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd856040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611aba57600080fd5b505afa158015611ace573d6000803e3d6000fd5b505050506040513d6020811015611ae457600080fd5b8101908080519060200190929190505050905060008373ffffffffffffffffffffffffffffffffffffffff16632424be5c83856040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050604080518083038186803b158015611b7d57600080fd5b505afa158015611b91573d6000803e3d6000fd5b505050506040513d6040811015611ba757600080fd5b81019080805190602001909291908051906020019092919050505091505060008773ffffffffffffffffffffffffffffffffffffffff16638161b120876040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611c1857600080fd5b505afa158015611c2c573d6000803e3d6000fd5b505050506040513d6020811015611c4257600080fd5b810190808051906020019092919050505090503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480611d82575060018873ffffffffffffffffffffffffffffffffffffffff16635aebb4608389306040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060206040518083038186803b158015611d4557600080fd5b505afa158015611d59573d6000803e3d6000fd5b505050506040513d6020811015611d6f57600080fd5b8101908080519060200190929190505050145b15611db257611d9d8785611d98888889896168c5565b615a89565b611dad8887600085600003614284565b611ee4565b611dc88730611dc3883089896168c5565b615a89565b8473ffffffffffffffffffffffffffffffffffffffff166376088703848630306000886000036040518763ffffffff1660e01b8152600401808781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019650505050505050600060405180830381600087803b158015611ecb57600080fd5b505af1158015611edf573d6000803e3d6000fd5b505050505b5050505050505050565b611efa84833084612210565b8273ffffffffffffffffffffffffffffffffffffffff1663ef693bed30836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015611f8157600080fd5b505af1158015611f95573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611fe157600080fd5b505af1158015611ff5573d6000803e3d6000fd5b505050506040513d602081101561200b57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561206e57600080fd5b505af1158015612082573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156120cc573d6000803e3d6000fd5b5050505050565b8073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16638161b120846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561213b57600080fd5b505afa15801561214f573d6000803e3d6000fd5b505050506040513d602081101561216557600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16146121ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6f776e65722d6d6973736d61746368000000000000000000000000000000000081525060200191505060405180910390fd5b61220a848484611952565b50505050565b8373ffffffffffffffffffffffffffffffffffffffff16639bb8f8388484846040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561229f57600080fd5b505af11580156122b3573d6000803e3d6000fd5b5050505050505050565b60008673ffffffffffffffffffffffffffffffffffffffff16632726b073846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561231057600080fd5b505afa158015612324573d6000803e3d6000fd5b505050506040513d602081101561233a57600080fd5b8101908080519060200190929190505050905060008773ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561239557600080fd5b505afa1580156123a9573d6000803e3d6000fd5b505050506040513d60208110156123bf57600080fd5b8101908080519060200190929190505050905060008873ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd866040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561242557600080fd5b505afa158015612439573d6000803e3d6000fd5b505050506040513d602081101561244f57600080fd5b8101908080519060200190929190505050905061246c87846147a7565b61248c898661247a34616b70565b612487868d89888c616bf1565b614284565b6124a089863061249b88616dcd565b61277a565b60008273ffffffffffffffffffffffffffffffffffffffff16634538c4eb30896040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561255357600080fd5b505afa158015612567573d6000803e3d6000fd5b505050506040513d602081101561257d57600080fd5b8101908080519060200190929190505050141561262c578173ffffffffffffffffffffffffffffffffffffffff1663a3b22fc4876040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561261357600080fd5b505af1158015612627573d6000803e3d6000fd5b505050505b8573ffffffffffffffffffffffffffffffffffffffff1663ef693bed33866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156126b357600080fd5b505af11580156126c7573d6000803e3d6000fd5b50505050505050505050505050565b8273ffffffffffffffffffffffffffffffffffffffff1663fcafcc6883836040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561275d57600080fd5b505af1158015612771573d6000803e3d6000fd5b50505050505050565b8373ffffffffffffffffffffffffffffffffffffffff1663f9f30db68484846040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561280957600080fd5b505af115801561281d573d6000803e3d6000fd5b5050505050505050565b8073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16638161b120856040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561288f57600080fd5b505afa1580156128a3573d6000803e3d6000fd5b505050506040513d60208110156128b957600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614612953576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6f776e65722d6d6973736d61746368000000000000000000000000000000000081525060200191505060405180910390fd5b61295f8585858561308a565b5050505050565b61297284308484613f62565b8473ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156129b857600080fd5b505afa1580156129cc573d6000803e3d6000fd5b505050506040513d60208110156129e257600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663760887038673ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd866040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015612a5f57600080fd5b505afa158015612a73573d6000803e3d6000fd5b505050506040513d6020811015612a8957600080fd5b81019080805190602001909291905050508773ffffffffffffffffffffffffffffffffffffffff16632726b073876040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015612aeb57600080fd5b505afa158015612aff573d6000803e3d6000fd5b505050506040513d6020811015612b1557600080fd5b81019080805190602001909291905050503030612b3a612b358b8a616dec565b616b70565b60006040518763ffffffff1660e01b8152600401808781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019650505050505050600060405180830381600087803b158015612c1957600080fd5b505af1158015612c2d573d6000803e3d6000fd5b505050505050505050565b612c4d848330612c488786616dec565b612210565b8273ffffffffffffffffffffffffffffffffffffffff1663ef693bed33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015612cd457600080fd5b505af1158015612ce8573d6000803e3d6000fd5b5050505050505050565b8273ffffffffffffffffffffffffffffffffffffffff16631b0dbf7283836040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b158015612d7957600080fd5b505af1158015612d8d573d6000803e3d6000fd5b50505050505050565b60008473ffffffffffffffffffffffffffffffffffffffff1663c4552791836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612e1557600080fd5b505afa158015612e29573d6000803e3d6000fd5b505050506040513d6020811015612e3f57600080fd5b81019080805190602001909291905050509050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480612f3957508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ee557600080fd5b505afa158015612ef9573d6000803e3d6000fd5b505050506040513d6020811015612f0f57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614155b15613078576000823b905060008114612fba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4473742d69732d612d636f6e747261637400000000000000000000000000000081525060200191505060405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff1663f3701da2846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561303957600080fd5b505af115801561304d573d6000803e3d6000fd5b505050506040513d602081101561306357600080fd5b81019080805190602001909291905050509150505b6130838484836126d6565b5050505050565b60008473ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156130d257600080fd5b505afa1580156130e6573d6000803e3d6000fd5b505050506040513d60208110156130fc57600080fd5b8101908080519060200190929190505050905060008573ffffffffffffffffffffffffffffffffffffffff16632726b073856040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561316257600080fd5b505afa158015613176573d6000803e3d6000fd5b505050506040513d602081101561318c57600080fd5b8101908080519060200190929190505050905060008673ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd866040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156131f257600080fd5b505afa158015613206573d6000803e3d6000fd5b505050506040513d602081101561321c57600080fd5b8101908080519060200190929190505050905060008773ffffffffffffffffffffffffffffffffffffffff16638161b120876040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561328257600080fd5b505afa158015613296573d6000803e3d6000fd5b505050506040513d60208110156132ac57600080fd5b810190808051906020019092919050505090503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806133ec575060018873ffffffffffffffffffffffffffffffffffffffff16635aebb4608389306040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060206040518083038186803b1580156133af57600080fd5b505afa1580156133c3573d6000803e3d6000fd5b505050506040513d60208110156133d957600080fd5b8101908080519060200190929190505050145b156134d0576133fc878487615a89565b6134cb888760006134c6888973ffffffffffffffffffffffffffffffffffffffff16636c25b3468a6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561348457600080fd5b505afa158015613498573d6000803e3d6000fd5b505050506040513d60208110156134ae57600080fd5b81019080805190602001909291905050508989616e88565b614284565b61360d565b6134db873087615a89565b8373ffffffffffffffffffffffffffffffffffffffff1663760887038385303060006135178b6b033b2e3c9fd0803ce80000008e028c8c616e88565b6040518763ffffffff1660e01b8152600401808781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019650505050505050600060405180830381600087803b1580156135f457600080fd5b505af1158015613608573d6000803e3d6000fd5b505050505b5050505050505050565b8273ffffffffffffffffffffffffffffffffffffffff1663b68f400483836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561369e57600080fd5b505af11580156136b2573d6000803e3d6000fd5b50505050505050565b60008373ffffffffffffffffffffffffffffffffffffffff16636090dec584846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561374457600080fd5b505af1158015613758573d6000803e3d6000fd5b505050506040513d602081101561376e57600080fd5b810190808051906020019092919050505090509392505050565b60006137948483616dec565b90506137ae85846137a484616b70565b6000036000614284565b6137ba85843084612210565b8373ffffffffffffffffffffffffffffffffffffffff1663ef693bed33846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561384157600080fd5b505af1158015613855573d6000803e3d6000fd5b505050505050505050565b60008573ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156138a857600080fd5b505afa1580156138bc573d6000803e3d6000fd5b505050506040513d60208110156138d257600080fd5b8101908080519060200190929190505050905060008673ffffffffffffffffffffffffffffffffffffffff16632726b073856040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561393857600080fd5b505afa15801561394c573d6000803e3d6000fd5b505050506040513d602081101561396257600080fd5b8101908080519060200190929190505050905060008773ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd866040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156139c857600080fd5b505afa1580156139dc573d6000803e3d6000fd5b505050506040513d60208110156139f257600080fd5b8101908080519060200190929190505050905060008373ffffffffffffffffffffffffffffffffffffffff16632424be5c83856040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050604080518083038186803b158015613a8b57600080fd5b505afa158015613a9f573d6000803e3d6000fd5b505050506040513d6040811015613ab557600080fd5b810190808051906020019092919080519060200190929190505050915050613ae98784613ae4878788886168c5565b615a89565b613b038987613af788616b70565b60000384600003614284565b613b0f89873088612210565b8773ffffffffffffffffffffffffffffffffffffffff1663ef693bed30876040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015613b9657600080fd5b505af1158015613baa573d6000803e3d6000fd5b505050508773ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613bf657600080fd5b505af1158015613c0a573d6000803e3d6000fd5b505050506040513d6020811015613c2057600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d866040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015613c8357600080fd5b505af1158015613c97573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050158015613ce1573d6000803e3d6000fd5b50505050505050505050565b613d058483613cfb84616b70565b6000036000614284565b613d1184833084612210565b8273ffffffffffffffffffffffffffffffffffffffff1663ef693bed30836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015613d9857600080fd5b505af1158015613dac573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613df857600080fd5b505af1158015613e0c573d6000803e3d6000fd5b505050506040513d6020811015613e2257600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015613e8557600080fd5b505af1158015613e99573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015613ee3573d6000803e3d6000fd5b5050505050565b8273ffffffffffffffffffffffffffffffffffffffff1663e50322a283836040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b158015613f4557600080fd5b505af1158015613f59573d6000803e3d6000fd5b50505050505050565b80156141df578373ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613fb057600080fd5b505af1158015613fc4573d6000803e3d6000fd5b505050506040513d6020811015613fda57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1580156140a557600080fd5b505af11580156140b9573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561410557600080fd5b505af1158015614119573d6000803e3d6000fd5b505050506040513d602081101561412f57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663095ea7b385846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156141c657600080fd5b505af11580156141da573d6000803e3d6000fd5b505050505b8373ffffffffffffffffffffffffffffffffffffffff16633b4da69f84846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561426657600080fd5b505af115801561427a573d6000803e3d6000fd5b5050505050505050565b8373ffffffffffffffffffffffffffffffffffffffff166345e6bdcd8484846040518463ffffffff1660e01b8152600401808481526020018381526020018281526020019350505050600060405180830381600087803b1580156142e757600080fd5b505af11580156142fb573d6000803e3d6000fd5b5050505050505050565b60008573ffffffffffffffffffffffffffffffffffffffff16632726b073846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561435857600080fd5b505afa15801561436c573d6000803e3d6000fd5b505050506040513d602081101561438257600080fd5b8101908080519060200190929190505050905060008673ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156143dd57600080fd5b505afa1580156143f1573d6000803e3d6000fd5b505050506040513d602081101561440757600080fd5b8101908080519060200190929190505050905060008773ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd866040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561446d57600080fd5b505afa158015614481573d6000803e3d6000fd5b505050506040513d602081101561449757600080fd5b810190808051906020019092919050505090506144c3888660006144be868c89888c616bf1565b614284565b6144d78886306144d288616dcd565b61277a565b60008273ffffffffffffffffffffffffffffffffffffffff16634538c4eb30896040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561458a57600080fd5b505afa15801561459e573d6000803e3d6000fd5b505050506040513d60208110156145b457600080fd5b81019080805190602001909291905050501415614663578173ffffffffffffffffffffffffffffffffffffffff1663a3b22fc4876040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561464a57600080fd5b505af115801561465e573d6000803e3d6000fd5b505050505b8573ffffffffffffffffffffffffffffffffffffffff1663ef693bed33866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156146ea57600080fd5b505af11580156146fe573d6000803e3d6000fd5b505050505050505050505050565b8173ffffffffffffffffffffffffffffffffffffffff1663dc4d20fa826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561478b57600080fd5b505af115801561479f573d6000803e3d6000fd5b505050505050565b8173ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156147ef57600080fd5b505af1158015614803573d6000803e3d6000fd5b505050506040513d602081101561481957600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561487157600080fd5b505af1158015614885573d6000803e3d6000fd5b50505050508173ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156148d257600080fd5b505af11580156148e6573d6000803e3d6000fd5b505050506040513d60208110156148fc57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663095ea7b383346040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561499357600080fd5b505af11580156149a7573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16633b4da69f82346040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015614a3257600080fd5b505af1158015614a46573d6000803e3d6000fd5b505050505050565b60008673ffffffffffffffffffffffffffffffffffffffff16632726b073856040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015614aa157600080fd5b505afa158015614ab5573d6000803e3d6000fd5b505050506040513d6020811015614acb57600080fd5b81019080805190602001909291905050509050614ae9858284615a89565b6000614af58785616dec565b9050614d5b8886614b0584616b70565b600003614d568c73ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015614b5157600080fd5b505afa158015614b65573d6000803e3d6000fd5b505050506040513d6020811015614b7b57600080fd5b81019080805190602001909291905050508d73ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015614bd257600080fd5b505afa158015614be6573d6000803e3d6000fd5b505050506040513d6020811015614bfc57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16636c25b346896040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015614c8957600080fd5b505afa158015614c9d573d6000803e3d6000fd5b505050506040513d6020811015614cb357600080fd5b8101908080519060200190929190505050888f73ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd8e6040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015614d1657600080fd5b505afa158015614d2a573d6000803e3d6000fd5b505050506040513d6020811015614d4057600080fd5b8101908080519060200190929190505050616e88565b614284565b614d6788863084612210565b8673ffffffffffffffffffffffffffffffffffffffff1663ef693bed33866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015614dee57600080fd5b505af1158015614e02573d6000803e3d6000fd5b505050505050505050505050565b8173ffffffffffffffffffffffffffffffffffffffff1663a3b22fc4826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015614e8f57600080fd5b505af1158015614ea3573d6000803e3d6000fd5b505050505050565b8373ffffffffffffffffffffffffffffffffffffffff16630b63fb628484846040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015614f3a57600080fd5b505af1158015614f4e573d6000803e3d6000fd5b5050505050505050565b60008573ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015614fa057600080fd5b505afa158015614fb4573d6000803e3d6000fd5b505050506040513d6020811015614fca57600080fd5b8101908080519060200190929190505050905060008673ffffffffffffffffffffffffffffffffffffffff16632726b073856040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561503057600080fd5b505afa158015615044573d6000803e3d6000fd5b505050506040513d602081101561505a57600080fd5b8101908080519060200190929190505050905060008773ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd866040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156150c057600080fd5b505afa1580156150d4573d6000803e3d6000fd5b505050506040513d60208110156150ea57600080fd5b8101908080519060200190929190505050905060008373ffffffffffffffffffffffffffffffffffffffff16632424be5c83856040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050604080518083038186803b15801561518357600080fd5b505afa158015615197573d6000803e3d6000fd5b505050506040513d60408110156151ad57600080fd5b8101908080519060200190929190805190602001909291905050509150506151e187846151dc878788886168c5565b615a89565b60006151ed8987616dec565b90506152098a886151fd84616b70565b60000385600003614284565b6152158a883084612210565b8873ffffffffffffffffffffffffffffffffffffffff1663ef693bed33886040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561529c57600080fd5b505af11580156152b0573d6000803e3d6000fd5b5050505050505050505050505050565b60008673ffffffffffffffffffffffffffffffffffffffff16632726b073856040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561531357600080fd5b505afa158015615327573d6000803e3d6000fd5b505050506040513d602081101561533d57600080fd5b8101908080519060200190929190505050905061535b858284615a89565b6155bf878561536986616b70565b6000036155ba8b73ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156153b557600080fd5b505afa1580156153c9573d6000803e3d6000fd5b505050506040513d60208110156153df57600080fd5b81019080805190602001909291905050508c73ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561543657600080fd5b505afa15801561544a573d6000803e3d6000fd5b505050506040513d602081101561546057600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16636c25b346886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156154ed57600080fd5b505afa158015615501573d6000803e3d6000fd5b505050506040513d602081101561551757600080fd5b8101908080519060200190929190505050878e73ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd8d6040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561557a57600080fd5b505afa15801561558e573d6000803e3d6000fd5b505050506040513d60208110156155a457600080fd5b8101908080519060200190929190505050616e88565b614284565b6155cb87853086612210565b8573ffffffffffffffffffffffffffffffffffffffff1663ef693bed30856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561565257600080fd5b505af1158015615666573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156156b257600080fd5b505af11580156156c6573d6000803e3d6000fd5b505050506040513d60208110156156dc57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d846040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561573f57600080fd5b505af1158015615753573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f1935050505015801561579d573d6000803e3d6000fd5b5050505050505050565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561582e57600080fd5b505af1158015615842573d6000803e3d6000fd5b50505050505050565b6000808673ffffffffffffffffffffffffffffffffffffffff16638c4c2801306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156158cb57600080fd5b505afa1580156158df573d6000803e3d6000fd5b505050506040513d60208110156158f557600080fd5b81019080805190602001909291905050509150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156159495761594687616802565b91505b8673ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561599157600080fd5b505af11580156159a5573d6000803e3d6000fd5b505050506040513d60208110156159bb57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015615a5257600080fd5b505af1158015615a66573d6000803e3d6000fd5b50505050615a7b8989898989898960006161c9565b905097509795505050505050565b8273ffffffffffffffffffffffffffffffffffffffff1663f4b9fa756040518163ffffffff1660e01b8152600401602060405180830381600087803b158015615ad157600080fd5b505af1158015615ae5573d6000803e3d6000fd5b505050506040513d6020811015615afb57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015615bc657600080fd5b505af1158015615bda573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663f4b9fa756040518163ffffffff1660e01b8152600401602060405180830381600087803b158015615c2657600080fd5b505af1158015615c3a573d6000803e3d6000fd5b505050506040513d6020811015615c5057600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663095ea7b384836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015615ce757600080fd5b505af1158015615cfb573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16633b4da69f83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015615d8657600080fd5b505af1158015615d9a573d6000803e3d6000fd5b50505050505050565b60008873ffffffffffffffffffffffffffffffffffffffff16632726b073866040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015615df657600080fd5b505afa158015615e0a573d6000803e3d6000fd5b505050506040513d6020811015615e2057600080fd5b8101908080519060200190929190505050905060008973ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015615e7b57600080fd5b505afa158015615e8f573d6000803e3d6000fd5b505050506040513d6020811015615ea557600080fd5b8101908080519060200190929190505050905060008a73ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd886040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015615f0b57600080fd5b505afa158015615f1f573d6000803e3d6000fd5b505050506040513d6020811015615f3557600080fd5b81019080805190602001909291905050509050615f5489848887613f62565b615f7d8b88615f6b615f668d8b616dec565b616b70565b615f78868f89888d616bf1565b614284565b615f918b8830615f8c89616dcd565b61277a565b60008273ffffffffffffffffffffffffffffffffffffffff16634538c4eb308b6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561604457600080fd5b505afa158015616058573d6000803e3d6000fd5b505050506040513d602081101561606e57600080fd5b8101908080519060200190929190505050141561611d578173ffffffffffffffffffffffffffffffffffffffff1663a3b22fc4896040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561610457600080fd5b505af1158015616118573d6000803e3d6000fd5b505050505b8773ffffffffffffffffffffffffffffffffffffffff1663ef693bed33876040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156161a457600080fd5b505af11580156161b8573d6000803e3d6000fd5b505050505050505050505050505050565b60006161d68986306136bb565b90506161e88989898985898989615da3565b98975050505050505050565b6161fe82306147a7565b8273ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561624457600080fd5b505afa158015616258573d6000803e3d6000fd5b505050506040513d602081101561626e57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663760887038473ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156162eb57600080fd5b505afa1580156162ff573d6000803e3d6000fd5b505050506040513d602081101561631557600080fd5b81019080805190602001909291905050508573ffffffffffffffffffffffffffffffffffffffff16632726b073856040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561637757600080fd5b505afa15801561638b573d6000803e3d6000fd5b505050506040513d60208110156163a157600080fd5b810190808051906020019092919050505030306163bd34616b70565b60006040518763ffffffff1660e01b8152600401808781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019650505050505050600060405180830381600087803b15801561649c57600080fd5b505af11580156164b0573d6000803e3d6000fd5b50505050505050565b60006164c68784306136bb565b90506164d68787878785876122bd565b9695505050505050565b8073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16638161b120866040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561654857600080fd5b505afa15801561655c573d6000803e3d6000fd5b505050506040513d602081101561657257600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161461660c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6f776e65722d6d6973736d61746368000000000000000000000000000000000081525060200191505060405180910390fd5b6166198686868686612966565b505050505050565b8273ffffffffffffffffffffffffffffffffffffffff16637e348b7d83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156166a857600080fd5b505af11580156166bc573d6000803e3d6000fd5b50505050505050565b8073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16638161b120846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561672d57600080fd5b505afa158015616741573d6000803e3d6000fd5b505050506040513d602081101561675757600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16146167f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6f776e65722d6d6973736d61746368000000000000000000000000000000000081525060200191505060405180910390fd5b6167fc8484846161f4565b50505050565b60008173ffffffffffffffffffffffffffffffffffffffff16631060930d306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561688357600080fd5b505af1158015616897573d6000803e3d6000fd5b505050506040513d60208110156168ad57600080fd5b81019080805190602001909291905050509050919050565b6000808573ffffffffffffffffffffffffffffffffffffffff1663d9638d36846040518263ffffffff1660e01b81526004018082815260200191505060a06040518083038186803b15801561691957600080fd5b505afa15801561692d573d6000803e3d6000fd5b505050506040513d60a081101561694357600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505050505091505060008673ffffffffffffffffffffffffffffffffffffffff16632424be5c85876040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050604080518083038186803b158015616a0857600080fd5b505afa158015616a1c573d6000803e3d6000fd5b505050506040513d6040811015616a3257600080fd5b81019080805190602001909291908051906020019092919050505091505060008773ffffffffffffffffffffffffffffffffffffffff16636c25b346886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015616acf57600080fd5b505afa158015616ae3573d6000803e3d6000fd5b505050506040513d6020811015616af957600080fd5b810190808051906020019092919050505090506000616b21616b1b8486617051565b836170e6565b90506b033b2e3c9fd0803ce80000008181616b3857fe5b04945080616b52866b033b2e3c9fd0803ce8000000617051565b10616b5d5784616b62565b600185015b945050505050949350505050565b60008190506000811215616bec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f696e742d6f766572666c6f77000000000000000000000000000000000000000081525060200191505060405180910390fd5b919050565b6000808573ffffffffffffffffffffffffffffffffffffffff166344e2a5a8856040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015616c4757600080fd5b505af1158015616c5b573d6000803e3d6000fd5b505050506040513d6020811015616c7157600080fd5b8101908080519060200190929190505050905060008773ffffffffffffffffffffffffffffffffffffffff16636c25b346876040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015616d0357600080fd5b505afa158015616d17573d6000803e3d6000fd5b505050506040513d6020811015616d2d57600080fd5b81019080805190602001909291905050509050616d56846b033b2e3c9fd0803ce8000000617051565b811015616dc257616d8d82616d80616d7a876b033b2e3c9fd0803ce8000000617051565b846170e6565b81616d8757fe5b04616b70565b9250616da5846b033b2e3c9fd0803ce8000000617051565b616daf8484617051565b10616dba5782616dbf565b600183015b92505b505095945050505050565b6000616de5826b033b2e3c9fd0803ce8000000617051565b9050919050565b6000616e80828473ffffffffffffffffffffffffffffffffffffffff1663b3bcfa826040518163ffffffff1660e01b8152600401602060405180830381600087803b158015616e3a57600080fd5b505af1158015616e4e573d6000803e3d6000fd5b505050506040513d6020811015616e6457600080fd5b8101908080519060200190929190505050601203600a0a617051565b905092915050565b6000808573ffffffffffffffffffffffffffffffffffffffff1663d9638d36846040518263ffffffff1660e01b81526004018082815260200191505060a06040518083038186803b158015616edc57600080fd5b505afa158015616ef0573d6000803e3d6000fd5b505050506040513d60a0811015616f0657600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505050505091505060008673ffffffffffffffffffffffffffffffffffffffff16632424be5c85876040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050604080518083038186803b158015616fcb57600080fd5b505afa158015616fdf573d6000803e3d6000fd5b505050506040513d6040811015616ff557600080fd5b81019080805190602001909291908051906020019092919050505091505061702582878161701f57fe5b04616b70565b9250808311156170405761703881616b70565b600003617045565b826000035b92505050949350505050565b60008082148061706e575082828385029250828161706b57fe5b04145b6170e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f6d756c2d6f766572666c6f77000000000000000000000000000000000000000081525060200191505060405180910390fd5b92915050565b6000828284039150811115617163576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f7375622d6f766572666c6f77000000000000000000000000000000000000000081525060200191505060405180910390fd5b9291505056fea265627a7a7231582036db1eac5835f2356c21c1fd3c3c8cc167925ff45382f585748eb2cfff35e48364736f6c634300050c0032",
  "deployedBytecode": "0x60806040526004361061023b5760003560e01c806396e8d72c1161012e578063c0791710116100ab578063e685cc041161006f578063e685cc041461163b578063ead6472914611707578063eb0b9a85146117b8578063ee28457614611833578063fba7591d146118c15761023b565b8063c079171014611270578063c56167c614611386578063cbd4be3f14611401578063db802a32146114dd578063e205c108146115cd5761023b565b8063b50a5869116100f2578063b50a586914610fab578063ba727a951461101c578063bcd6deec146110a1578063be5e6c0314611146578063beabacc8146111f55761023b565b806396e8d72c14610d135780639f6f3d5b14610d825780639f887fde14610e27578063a033df1214610e98578063a6add01114610efc5761023b565b80634592aca7116101bc5780636ab6a491116101805780636ab6a49114610a785780636d68b70b14610afd5780637b5a3b4314610ba25780637bc3bd5314610c275780637df2eb2514610c8c5761023b565b80634592aca7146107d3578063493c20491461084e5780634b666199146108e95780635f6ef4471461096e5780636aa3ee11146109e95761023b565b80631d10f231116102035780631d10f2311461051857806325cf37d0146105935780632958f8a5146106185780633e29e565146106bd57806342dd11bb1461074e5761023b565b8063036a23951461024057806308f00e34146102bb5780630aee8dec146103405780631558b048146103db5780631c02d84614610460575b600080fd5b34801561024c57600080fd5b506102b96004803603606081101561026357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611952565b005b3480156102c757600080fd5b5061033e600480360360808110156102de57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050611eee565b005b34801561034c57600080fd5b506103d96004803603608081101561036357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506120d3565b005b3480156103e757600080fd5b5061045e600480360360808110156103fe57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612210565b005b610516600480360360c081101561047657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506122bd565b005b34801561052457600080fd5b506105916004803603606081101561053b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506126d6565b005b34801561059f57600080fd5b50610616600480360360808110156105b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061277a565b005b34801561062457600080fd5b506106bb600480360360a081101561063b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612827565b005b3480156106c957600080fd5b5061074c600480360360a08110156106e057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803515159060200190929190505050612966565b005b34801561075a57600080fd5b506107d16004803603608081101561077157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050612c38565b005b3480156107df57600080fd5b5061084c600480360360608110156107f657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612cf2565b005b34801561085a57600080fd5b506108e76004803603608081101561087157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612d96565b005b3480156108f557600080fd5b5061096c6004803603608081101561090c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919050505061308a565b005b34801561097a57600080fd5b506109e76004803603606081101561099157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613617565b005b3480156109f557600080fd5b50610a6260048036036060811015610a0c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506136bb565b6040518082815260200191505060405180910390f35b348015610a8457600080fd5b50610afb60048036036080811015610a9b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050613788565b005b348015610b0957600080fd5b50610ba0600480360360a0811015610b2057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050613860565b005b348015610bae57600080fd5b50610c2560048036036080811015610bc557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050613ced565b005b348015610c3357600080fd5b50610c8a60048036036060811015610c4a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050613eea565b005b348015610c9857600080fd5b50610d1160048036036080811015610caf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803515159060200190929190505050613f62565b005b348015610d1f57600080fd5b50610d8060048036036080811015610d3657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190505050614284565b005b348015610d8e57600080fd5b50610e25600480360360a0811015610da557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050614305565b005b348015610e3357600080fd5b50610e9660048036036040811015610e4a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061470c565b005b610efa60048036036040811015610eae57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506147a7565b005b348015610f0857600080fd5b50610fa9600480360360c0811015610f1f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190505050614a4e565b005b348015610fb757600080fd5b5061101a60048036036040811015610fce57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614e10565b005b34801561102857600080fd5b5061109f6004803603608081101561103f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050614eab565b005b3480156110ad57600080fd5b50611144600480360360a08110156110c457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050614f58565b005b34801561115257600080fd5b506111f3600480360360c081101561116957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001909291905050506152c0565b005b34801561120157600080fd5b5061126e6004803603606081101561121857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506157a7565b005b34801561127c57600080fd5b5061133d600480360360e081101561129357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919050505061584b565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b34801561139257600080fd5b506113ff600480360360608110156113a957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050615a89565b005b34801561140d57600080fd5b506114db600480360361010081101561142557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190803515159060200190929190505050615da3565b005b3480156114e957600080fd5b506115b7600480360361010081101561150157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001909291908035151590602001909291905050506161c9565b6040518082815260200191505060405180910390f35b611639600480360360608110156115e357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506161f4565b005b6116f1600480360360c081101561165157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506164b9565b6040518082815260200191505060405180910390f35b34801561171357600080fd5b506117b6600480360360c081101561172a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803515159060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506164e0565b005b3480156117c457600080fd5b50611831600480360360608110156117db57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050616621565b005b6118bf6004803603608081101561184957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506166c5565b005b3480156118cd57600080fd5b50611910600480360360208110156118e457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050616802565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60008373ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561199a57600080fd5b505afa1580156119ae573d6000803e3d6000fd5b505050506040513d60208110156119c457600080fd5b8101908080519060200190929190505050905060008473ffffffffffffffffffffffffffffffffffffffff16632726b073846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611a2a57600080fd5b505afa158015611a3e573d6000803e3d6000fd5b505050506040513d6020811015611a5457600080fd5b8101908080519060200190929190505050905060008573ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd856040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611aba57600080fd5b505afa158015611ace573d6000803e3d6000fd5b505050506040513d6020811015611ae457600080fd5b8101908080519060200190929190505050905060008373ffffffffffffffffffffffffffffffffffffffff16632424be5c83856040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050604080518083038186803b158015611b7d57600080fd5b505afa158015611b91573d6000803e3d6000fd5b505050506040513d6040811015611ba757600080fd5b81019080805190602001909291908051906020019092919050505091505060008773ffffffffffffffffffffffffffffffffffffffff16638161b120876040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611c1857600080fd5b505afa158015611c2c573d6000803e3d6000fd5b505050506040513d6020811015611c4257600080fd5b810190808051906020019092919050505090503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480611d82575060018873ffffffffffffffffffffffffffffffffffffffff16635aebb4608389306040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060206040518083038186803b158015611d4557600080fd5b505afa158015611d59573d6000803e3d6000fd5b505050506040513d6020811015611d6f57600080fd5b8101908080519060200190929190505050145b15611db257611d9d8785611d98888889896168c5565b615a89565b611dad8887600085600003614284565b611ee4565b611dc88730611dc3883089896168c5565b615a89565b8473ffffffffffffffffffffffffffffffffffffffff166376088703848630306000886000036040518763ffffffff1660e01b8152600401808781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019650505050505050600060405180830381600087803b158015611ecb57600080fd5b505af1158015611edf573d6000803e3d6000fd5b505050505b5050505050505050565b611efa84833084612210565b8273ffffffffffffffffffffffffffffffffffffffff1663ef693bed30836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015611f8157600080fd5b505af1158015611f95573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611fe157600080fd5b505af1158015611ff5573d6000803e3d6000fd5b505050506040513d602081101561200b57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561206e57600080fd5b505af1158015612082573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156120cc573d6000803e3d6000fd5b5050505050565b8073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16638161b120846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561213b57600080fd5b505afa15801561214f573d6000803e3d6000fd5b505050506040513d602081101561216557600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16146121ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6f776e65722d6d6973736d61746368000000000000000000000000000000000081525060200191505060405180910390fd5b61220a848484611952565b50505050565b8373ffffffffffffffffffffffffffffffffffffffff16639bb8f8388484846040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561229f57600080fd5b505af11580156122b3573d6000803e3d6000fd5b5050505050505050565b60008673ffffffffffffffffffffffffffffffffffffffff16632726b073846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561231057600080fd5b505afa158015612324573d6000803e3d6000fd5b505050506040513d602081101561233a57600080fd5b8101908080519060200190929190505050905060008773ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561239557600080fd5b505afa1580156123a9573d6000803e3d6000fd5b505050506040513d60208110156123bf57600080fd5b8101908080519060200190929190505050905060008873ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd866040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561242557600080fd5b505afa158015612439573d6000803e3d6000fd5b505050506040513d602081101561244f57600080fd5b8101908080519060200190929190505050905061246c87846147a7565b61248c898661247a34616b70565b612487868d89888c616bf1565b614284565b6124a089863061249b88616dcd565b61277a565b60008273ffffffffffffffffffffffffffffffffffffffff16634538c4eb30896040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561255357600080fd5b505afa158015612567573d6000803e3d6000fd5b505050506040513d602081101561257d57600080fd5b8101908080519060200190929190505050141561262c578173ffffffffffffffffffffffffffffffffffffffff1663a3b22fc4876040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561261357600080fd5b505af1158015612627573d6000803e3d6000fd5b505050505b8573ffffffffffffffffffffffffffffffffffffffff1663ef693bed33866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156126b357600080fd5b505af11580156126c7573d6000803e3d6000fd5b50505050505050505050505050565b8273ffffffffffffffffffffffffffffffffffffffff1663fcafcc6883836040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561275d57600080fd5b505af1158015612771573d6000803e3d6000fd5b50505050505050565b8373ffffffffffffffffffffffffffffffffffffffff1663f9f30db68484846040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561280957600080fd5b505af115801561281d573d6000803e3d6000fd5b5050505050505050565b8073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16638161b120856040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561288f57600080fd5b505afa1580156128a3573d6000803e3d6000fd5b505050506040513d60208110156128b957600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614612953576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6f776e65722d6d6973736d61746368000000000000000000000000000000000081525060200191505060405180910390fd5b61295f8585858561308a565b5050505050565b61297284308484613f62565b8473ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156129b857600080fd5b505afa1580156129cc573d6000803e3d6000fd5b505050506040513d60208110156129e257600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663760887038673ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd866040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015612a5f57600080fd5b505afa158015612a73573d6000803e3d6000fd5b505050506040513d6020811015612a8957600080fd5b81019080805190602001909291905050508773ffffffffffffffffffffffffffffffffffffffff16632726b073876040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015612aeb57600080fd5b505afa158015612aff573d6000803e3d6000fd5b505050506040513d6020811015612b1557600080fd5b81019080805190602001909291905050503030612b3a612b358b8a616dec565b616b70565b60006040518763ffffffff1660e01b8152600401808781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019650505050505050600060405180830381600087803b158015612c1957600080fd5b505af1158015612c2d573d6000803e3d6000fd5b505050505050505050565b612c4d848330612c488786616dec565b612210565b8273ffffffffffffffffffffffffffffffffffffffff1663ef693bed33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015612cd457600080fd5b505af1158015612ce8573d6000803e3d6000fd5b5050505050505050565b8273ffffffffffffffffffffffffffffffffffffffff16631b0dbf7283836040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b158015612d7957600080fd5b505af1158015612d8d573d6000803e3d6000fd5b50505050505050565b60008473ffffffffffffffffffffffffffffffffffffffff1663c4552791836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612e1557600080fd5b505afa158015612e29573d6000803e3d6000fd5b505050506040513d6020811015612e3f57600080fd5b81019080805190602001909291905050509050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480612f3957508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ee557600080fd5b505afa158015612ef9573d6000803e3d6000fd5b505050506040513d6020811015612f0f57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614155b15613078576000823b905060008114612fba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4473742d69732d612d636f6e747261637400000000000000000000000000000081525060200191505060405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff1663f3701da2846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561303957600080fd5b505af115801561304d573d6000803e3d6000fd5b505050506040513d602081101561306357600080fd5b81019080805190602001909291905050509150505b6130838484836126d6565b5050505050565b60008473ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156130d257600080fd5b505afa1580156130e6573d6000803e3d6000fd5b505050506040513d60208110156130fc57600080fd5b8101908080519060200190929190505050905060008573ffffffffffffffffffffffffffffffffffffffff16632726b073856040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561316257600080fd5b505afa158015613176573d6000803e3d6000fd5b505050506040513d602081101561318c57600080fd5b8101908080519060200190929190505050905060008673ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd866040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156131f257600080fd5b505afa158015613206573d6000803e3d6000fd5b505050506040513d602081101561321c57600080fd5b8101908080519060200190929190505050905060008773ffffffffffffffffffffffffffffffffffffffff16638161b120876040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561328257600080fd5b505afa158015613296573d6000803e3d6000fd5b505050506040513d60208110156132ac57600080fd5b810190808051906020019092919050505090503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806133ec575060018873ffffffffffffffffffffffffffffffffffffffff16635aebb4608389306040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060206040518083038186803b1580156133af57600080fd5b505afa1580156133c3573d6000803e3d6000fd5b505050506040513d60208110156133d957600080fd5b8101908080519060200190929190505050145b156134d0576133fc878487615a89565b6134cb888760006134c6888973ffffffffffffffffffffffffffffffffffffffff16636c25b3468a6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561348457600080fd5b505afa158015613498573d6000803e3d6000fd5b505050506040513d60208110156134ae57600080fd5b81019080805190602001909291905050508989616e88565b614284565b61360d565b6134db873087615a89565b8373ffffffffffffffffffffffffffffffffffffffff1663760887038385303060006135178b6b033b2e3c9fd0803ce80000008e028c8c616e88565b6040518763ffffffff1660e01b8152600401808781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019650505050505050600060405180830381600087803b1580156135f457600080fd5b505af1158015613608573d6000803e3d6000fd5b505050505b5050505050505050565b8273ffffffffffffffffffffffffffffffffffffffff1663b68f400483836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561369e57600080fd5b505af11580156136b2573d6000803e3d6000fd5b50505050505050565b60008373ffffffffffffffffffffffffffffffffffffffff16636090dec584846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561374457600080fd5b505af1158015613758573d6000803e3d6000fd5b505050506040513d602081101561376e57600080fd5b810190808051906020019092919050505090509392505050565b60006137948483616dec565b90506137ae85846137a484616b70565b6000036000614284565b6137ba85843084612210565b8373ffffffffffffffffffffffffffffffffffffffff1663ef693bed33846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561384157600080fd5b505af1158015613855573d6000803e3d6000fd5b505050505050505050565b60008573ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156138a857600080fd5b505afa1580156138bc573d6000803e3d6000fd5b505050506040513d60208110156138d257600080fd5b8101908080519060200190929190505050905060008673ffffffffffffffffffffffffffffffffffffffff16632726b073856040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561393857600080fd5b505afa15801561394c573d6000803e3d6000fd5b505050506040513d602081101561396257600080fd5b8101908080519060200190929190505050905060008773ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd866040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156139c857600080fd5b505afa1580156139dc573d6000803e3d6000fd5b505050506040513d60208110156139f257600080fd5b8101908080519060200190929190505050905060008373ffffffffffffffffffffffffffffffffffffffff16632424be5c83856040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050604080518083038186803b158015613a8b57600080fd5b505afa158015613a9f573d6000803e3d6000fd5b505050506040513d6040811015613ab557600080fd5b810190808051906020019092919080519060200190929190505050915050613ae98784613ae4878788886168c5565b615a89565b613b038987613af788616b70565b60000384600003614284565b613b0f89873088612210565b8773ffffffffffffffffffffffffffffffffffffffff1663ef693bed30876040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015613b9657600080fd5b505af1158015613baa573d6000803e3d6000fd5b505050508773ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613bf657600080fd5b505af1158015613c0a573d6000803e3d6000fd5b505050506040513d6020811015613c2057600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d866040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015613c8357600080fd5b505af1158015613c97573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050158015613ce1573d6000803e3d6000fd5b50505050505050505050565b613d058483613cfb84616b70565b6000036000614284565b613d1184833084612210565b8273ffffffffffffffffffffffffffffffffffffffff1663ef693bed30836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015613d9857600080fd5b505af1158015613dac573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613df857600080fd5b505af1158015613e0c573d6000803e3d6000fd5b505050506040513d6020811015613e2257600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015613e8557600080fd5b505af1158015613e99573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015613ee3573d6000803e3d6000fd5b5050505050565b8273ffffffffffffffffffffffffffffffffffffffff1663e50322a283836040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b158015613f4557600080fd5b505af1158015613f59573d6000803e3d6000fd5b50505050505050565b80156141df578373ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613fb057600080fd5b505af1158015613fc4573d6000803e3d6000fd5b505050506040513d6020811015613fda57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1580156140a557600080fd5b505af11580156140b9573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561410557600080fd5b505af1158015614119573d6000803e3d6000fd5b505050506040513d602081101561412f57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663095ea7b385846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156141c657600080fd5b505af11580156141da573d6000803e3d6000fd5b505050505b8373ffffffffffffffffffffffffffffffffffffffff16633b4da69f84846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561426657600080fd5b505af115801561427a573d6000803e3d6000fd5b5050505050505050565b8373ffffffffffffffffffffffffffffffffffffffff166345e6bdcd8484846040518463ffffffff1660e01b8152600401808481526020018381526020018281526020019350505050600060405180830381600087803b1580156142e757600080fd5b505af11580156142fb573d6000803e3d6000fd5b5050505050505050565b60008573ffffffffffffffffffffffffffffffffffffffff16632726b073846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561435857600080fd5b505afa15801561436c573d6000803e3d6000fd5b505050506040513d602081101561438257600080fd5b8101908080519060200190929190505050905060008673ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156143dd57600080fd5b505afa1580156143f1573d6000803e3d6000fd5b505050506040513d602081101561440757600080fd5b8101908080519060200190929190505050905060008773ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd866040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561446d57600080fd5b505afa158015614481573d6000803e3d6000fd5b505050506040513d602081101561449757600080fd5b810190808051906020019092919050505090506144c3888660006144be868c89888c616bf1565b614284565b6144d78886306144d288616dcd565b61277a565b60008273ffffffffffffffffffffffffffffffffffffffff16634538c4eb30896040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561458a57600080fd5b505afa15801561459e573d6000803e3d6000fd5b505050506040513d60208110156145b457600080fd5b81019080805190602001909291905050501415614663578173ffffffffffffffffffffffffffffffffffffffff1663a3b22fc4876040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561464a57600080fd5b505af115801561465e573d6000803e3d6000fd5b505050505b8573ffffffffffffffffffffffffffffffffffffffff1663ef693bed33866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156146ea57600080fd5b505af11580156146fe573d6000803e3d6000fd5b505050505050505050505050565b8173ffffffffffffffffffffffffffffffffffffffff1663dc4d20fa826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561478b57600080fd5b505af115801561479f573d6000803e3d6000fd5b505050505050565b8173ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156147ef57600080fd5b505af1158015614803573d6000803e3d6000fd5b505050506040513d602081101561481957600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561487157600080fd5b505af1158015614885573d6000803e3d6000fd5b50505050508173ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156148d257600080fd5b505af11580156148e6573d6000803e3d6000fd5b505050506040513d60208110156148fc57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663095ea7b383346040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561499357600080fd5b505af11580156149a7573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16633b4da69f82346040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015614a3257600080fd5b505af1158015614a46573d6000803e3d6000fd5b505050505050565b60008673ffffffffffffffffffffffffffffffffffffffff16632726b073856040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015614aa157600080fd5b505afa158015614ab5573d6000803e3d6000fd5b505050506040513d6020811015614acb57600080fd5b81019080805190602001909291905050509050614ae9858284615a89565b6000614af58785616dec565b9050614d5b8886614b0584616b70565b600003614d568c73ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015614b5157600080fd5b505afa158015614b65573d6000803e3d6000fd5b505050506040513d6020811015614b7b57600080fd5b81019080805190602001909291905050508d73ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015614bd257600080fd5b505afa158015614be6573d6000803e3d6000fd5b505050506040513d6020811015614bfc57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16636c25b346896040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015614c8957600080fd5b505afa158015614c9d573d6000803e3d6000fd5b505050506040513d6020811015614cb357600080fd5b8101908080519060200190929190505050888f73ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd8e6040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015614d1657600080fd5b505afa158015614d2a573d6000803e3d6000fd5b505050506040513d6020811015614d4057600080fd5b8101908080519060200190929190505050616e88565b614284565b614d6788863084612210565b8673ffffffffffffffffffffffffffffffffffffffff1663ef693bed33866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015614dee57600080fd5b505af1158015614e02573d6000803e3d6000fd5b505050505050505050505050565b8173ffffffffffffffffffffffffffffffffffffffff1663a3b22fc4826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015614e8f57600080fd5b505af1158015614ea3573d6000803e3d6000fd5b505050505050565b8373ffffffffffffffffffffffffffffffffffffffff16630b63fb628484846040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015614f3a57600080fd5b505af1158015614f4e573d6000803e3d6000fd5b5050505050505050565b60008573ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015614fa057600080fd5b505afa158015614fb4573d6000803e3d6000fd5b505050506040513d6020811015614fca57600080fd5b8101908080519060200190929190505050905060008673ffffffffffffffffffffffffffffffffffffffff16632726b073856040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561503057600080fd5b505afa158015615044573d6000803e3d6000fd5b505050506040513d602081101561505a57600080fd5b8101908080519060200190929190505050905060008773ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd866040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156150c057600080fd5b505afa1580156150d4573d6000803e3d6000fd5b505050506040513d60208110156150ea57600080fd5b8101908080519060200190929190505050905060008373ffffffffffffffffffffffffffffffffffffffff16632424be5c83856040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050604080518083038186803b15801561518357600080fd5b505afa158015615197573d6000803e3d6000fd5b505050506040513d60408110156151ad57600080fd5b8101908080519060200190929190805190602001909291905050509150506151e187846151dc878788886168c5565b615a89565b60006151ed8987616dec565b90506152098a886151fd84616b70565b60000385600003614284565b6152158a883084612210565b8873ffffffffffffffffffffffffffffffffffffffff1663ef693bed33886040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561529c57600080fd5b505af11580156152b0573d6000803e3d6000fd5b5050505050505050505050505050565b60008673ffffffffffffffffffffffffffffffffffffffff16632726b073856040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561531357600080fd5b505afa158015615327573d6000803e3d6000fd5b505050506040513d602081101561533d57600080fd5b8101908080519060200190929190505050905061535b858284615a89565b6155bf878561536986616b70565b6000036155ba8b73ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156153b557600080fd5b505afa1580156153c9573d6000803e3d6000fd5b505050506040513d60208110156153df57600080fd5b81019080805190602001909291905050508c73ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561543657600080fd5b505afa15801561544a573d6000803e3d6000fd5b505050506040513d602081101561546057600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16636c25b346886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156154ed57600080fd5b505afa158015615501573d6000803e3d6000fd5b505050506040513d602081101561551757600080fd5b8101908080519060200190929190505050878e73ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd8d6040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561557a57600080fd5b505afa15801561558e573d6000803e3d6000fd5b505050506040513d60208110156155a457600080fd5b8101908080519060200190929190505050616e88565b614284565b6155cb87853086612210565b8573ffffffffffffffffffffffffffffffffffffffff1663ef693bed30856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561565257600080fd5b505af1158015615666573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156156b257600080fd5b505af11580156156c6573d6000803e3d6000fd5b505050506040513d60208110156156dc57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d846040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561573f57600080fd5b505af1158015615753573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f1935050505015801561579d573d6000803e3d6000fd5b5050505050505050565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561582e57600080fd5b505af1158015615842573d6000803e3d6000fd5b50505050505050565b6000808673ffffffffffffffffffffffffffffffffffffffff16638c4c2801306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156158cb57600080fd5b505afa1580156158df573d6000803e3d6000fd5b505050506040513d60208110156158f557600080fd5b81019080805190602001909291905050509150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156159495761594687616802565b91505b8673ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561599157600080fd5b505af11580156159a5573d6000803e3d6000fd5b505050506040513d60208110156159bb57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015615a5257600080fd5b505af1158015615a66573d6000803e3d6000fd5b50505050615a7b8989898989898960006161c9565b905097509795505050505050565b8273ffffffffffffffffffffffffffffffffffffffff1663f4b9fa756040518163ffffffff1660e01b8152600401602060405180830381600087803b158015615ad157600080fd5b505af1158015615ae5573d6000803e3d6000fd5b505050506040513d6020811015615afb57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015615bc657600080fd5b505af1158015615bda573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663f4b9fa756040518163ffffffff1660e01b8152600401602060405180830381600087803b158015615c2657600080fd5b505af1158015615c3a573d6000803e3d6000fd5b505050506040513d6020811015615c5057600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663095ea7b384836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015615ce757600080fd5b505af1158015615cfb573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16633b4da69f83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015615d8657600080fd5b505af1158015615d9a573d6000803e3d6000fd5b50505050505050565b60008873ffffffffffffffffffffffffffffffffffffffff16632726b073866040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015615df657600080fd5b505afa158015615e0a573d6000803e3d6000fd5b505050506040513d6020811015615e2057600080fd5b8101908080519060200190929190505050905060008973ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015615e7b57600080fd5b505afa158015615e8f573d6000803e3d6000fd5b505050506040513d6020811015615ea557600080fd5b8101908080519060200190929190505050905060008a73ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd886040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015615f0b57600080fd5b505afa158015615f1f573d6000803e3d6000fd5b505050506040513d6020811015615f3557600080fd5b81019080805190602001909291905050509050615f5489848887613f62565b615f7d8b88615f6b615f668d8b616dec565b616b70565b615f78868f89888d616bf1565b614284565b615f918b8830615f8c89616dcd565b61277a565b60008273ffffffffffffffffffffffffffffffffffffffff16634538c4eb308b6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561604457600080fd5b505afa158015616058573d6000803e3d6000fd5b505050506040513d602081101561606e57600080fd5b8101908080519060200190929190505050141561611d578173ffffffffffffffffffffffffffffffffffffffff1663a3b22fc4896040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561610457600080fd5b505af1158015616118573d6000803e3d6000fd5b505050505b8773ffffffffffffffffffffffffffffffffffffffff1663ef693bed33876040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156161a457600080fd5b505af11580156161b8573d6000803e3d6000fd5b505050505050505050505050505050565b60006161d68986306136bb565b90506161e88989898985898989615da3565b98975050505050505050565b6161fe82306147a7565b8273ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561624457600080fd5b505afa158015616258573d6000803e3d6000fd5b505050506040513d602081101561626e57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663760887038473ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156162eb57600080fd5b505afa1580156162ff573d6000803e3d6000fd5b505050506040513d602081101561631557600080fd5b81019080805190602001909291905050508573ffffffffffffffffffffffffffffffffffffffff16632726b073856040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561637757600080fd5b505afa15801561638b573d6000803e3d6000fd5b505050506040513d60208110156163a157600080fd5b810190808051906020019092919050505030306163bd34616b70565b60006040518763ffffffff1660e01b8152600401808781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019650505050505050600060405180830381600087803b15801561649c57600080fd5b505af11580156164b0573d6000803e3d6000fd5b50505050505050565b60006164c68784306136bb565b90506164d68787878785876122bd565b9695505050505050565b8073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16638161b120866040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561654857600080fd5b505afa15801561655c573d6000803e3d6000fd5b505050506040513d602081101561657257600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161461660c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6f776e65722d6d6973736d61746368000000000000000000000000000000000081525060200191505060405180910390fd5b6166198686868686612966565b505050505050565b8273ffffffffffffffffffffffffffffffffffffffff16637e348b7d83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156166a857600080fd5b505af11580156166bc573d6000803e3d6000fd5b50505050505050565b8073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16638161b120846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561672d57600080fd5b505afa158015616741573d6000803e3d6000fd5b505050506040513d602081101561675757600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16146167f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6f776e65722d6d6973736d61746368000000000000000000000000000000000081525060200191505060405180910390fd5b6167fc8484846161f4565b50505050565b60008173ffffffffffffffffffffffffffffffffffffffff16631060930d306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561688357600080fd5b505af1158015616897573d6000803e3d6000fd5b505050506040513d60208110156168ad57600080fd5b81019080805190602001909291905050509050919050565b6000808573ffffffffffffffffffffffffffffffffffffffff1663d9638d36846040518263ffffffff1660e01b81526004018082815260200191505060a06040518083038186803b15801561691957600080fd5b505afa15801561692d573d6000803e3d6000fd5b505050506040513d60a081101561694357600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505050505091505060008673ffffffffffffffffffffffffffffffffffffffff16632424be5c85876040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050604080518083038186803b158015616a0857600080fd5b505afa158015616a1c573d6000803e3d6000fd5b505050506040513d6040811015616a3257600080fd5b81019080805190602001909291908051906020019092919050505091505060008773ffffffffffffffffffffffffffffffffffffffff16636c25b346886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015616acf57600080fd5b505afa158015616ae3573d6000803e3d6000fd5b505050506040513d6020811015616af957600080fd5b810190808051906020019092919050505090506000616b21616b1b8486617051565b836170e6565b90506b033b2e3c9fd0803ce80000008181616b3857fe5b04945080616b52866b033b2e3c9fd0803ce8000000617051565b10616b5d5784616b62565b600185015b945050505050949350505050565b60008190506000811215616bec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f696e742d6f766572666c6f77000000000000000000000000000000000000000081525060200191505060405180910390fd5b919050565b6000808573ffffffffffffffffffffffffffffffffffffffff166344e2a5a8856040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015616c4757600080fd5b505af1158015616c5b573d6000803e3d6000fd5b505050506040513d6020811015616c7157600080fd5b8101908080519060200190929190505050905060008773ffffffffffffffffffffffffffffffffffffffff16636c25b346876040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015616d0357600080fd5b505afa158015616d17573d6000803e3d6000fd5b505050506040513d6020811015616d2d57600080fd5b81019080805190602001909291905050509050616d56846b033b2e3c9fd0803ce8000000617051565b811015616dc257616d8d82616d80616d7a876b033b2e3c9fd0803ce8000000617051565b846170e6565b81616d8757fe5b04616b70565b9250616da5846b033b2e3c9fd0803ce8000000617051565b616daf8484617051565b10616dba5782616dbf565b600183015b92505b505095945050505050565b6000616de5826b033b2e3c9fd0803ce8000000617051565b9050919050565b6000616e80828473ffffffffffffffffffffffffffffffffffffffff1663b3bcfa826040518163ffffffff1660e01b8152600401602060405180830381600087803b158015616e3a57600080fd5b505af1158015616e4e573d6000803e3d6000fd5b505050506040513d6020811015616e6457600080fd5b8101908080519060200190929190505050601203600a0a617051565b905092915050565b6000808573ffffffffffffffffffffffffffffffffffffffff1663d9638d36846040518263ffffffff1660e01b81526004018082815260200191505060a06040518083038186803b158015616edc57600080fd5b505afa158015616ef0573d6000803e3d6000fd5b505050506040513d60a0811015616f0657600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505050505091505060008673ffffffffffffffffffffffffffffffffffffffff16632424be5c85876040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050604080518083038186803b158015616fcb57600080fd5b505afa158015616fdf573d6000803e3d6000fd5b505050506040513d6040811015616ff557600080fd5b81019080805190602001909291908051906020019092919050505091505061702582878161701f57fe5b04616b70565b9250808311156170405761703881616b70565b600003617045565b826000035b92505050949350505050565b60008082148061706e575082828385029250828161706b57fe5b04145b6170e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f6d756c2d6f766572666c6f77000000000000000000000000000000000000000081525060200191505060405180910390fd5b92915050565b6000828284039150811115617163576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f7375622d6f766572666c6f77000000000000000000000000000000000000000081525060200191505060405180910390fd5b9291505056fea265627a7a7231582036db1eac5835f2356c21c1fd3c3c8cc167925ff45382f585748eb2cfff35e48364736f6c634300050c0032",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}