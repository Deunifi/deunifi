{
  "address": "0x9d4454B023096f34B160D6B654540c56A1F81688",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        }
      ],
      "name": "LockAndDraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        }
      ],
      "name": "WipeAndFree",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "LOCK_AND_DRAW",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WIPE_AND_FREE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "premiums",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "executeOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "ownerTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ownerAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "lendingPool",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "loanTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "loanAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "modes",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "useAave",
          "type": "bool"
        }
      ],
      "name": "flashLoanFromDSProxy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "onFlashLoan",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeManager",
          "type": "address"
        }
      ],
      "name": "setFeeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3e4ee68cfc6b0191b50e7d681507a98c32e5a40cd3aaaf741483b54af5939cf0",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9d4454B023096f34B160D6B654540c56A1F81688",
    "transactionIndex": 0,
    "gasUsed": "4061746",
    "logsBloom": "0x
    "blockHash": "0x3ad6cd02da6cca52710d4af791a75d0e9cb8039a5aa912b3755e24e22b7f739d",
    "transactionHash": "0x3e4ee68cfc6b0191b50e7d681507a98c32e5a40cd3aaaf741483b54af5939cf0",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12770172,
        "transactionHash": "0x3e4ee68cfc6b0191b50e7d681507a98c32e5a40cd3aaaf741483b54af5939cf0",
        "address": "0x9d4454B023096f34B160D6B654540c56A1F81688",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3ad6cd02da6cca52710d4af791a75d0e9cb8039a5aa912b3755e24e22b7f739d"
      }
    ],
    "blockNumber": 12770172,
    "cumulativeGasUsed": "4061746",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "a717c3f34280d4ab4bbaea83b8e26ae1",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"LockAndDraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"WipeAndFree\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"LOCK_AND_DRAW\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WIPE_AND_FREE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"ownerTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ownerAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"lendingPool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"loanTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"loanAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"modes\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useAave\",\"type\":\"bool\"}],\"name\":\"flashLoanFromDSProxy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"onFlashLoan\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"}],\"name\":\"setFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"flashLoanFromDSProxy(address,address,address[],uint256[],address,address[],uint256[],uint256[],bytes,address,bool)\":{\"notice\":\"Executed as DSProxy.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Deunifi.sol\":\"Deunifi\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xdb17a1fb73e261e736ae8862be2d9a32964fc4b3741f48980f5cdc9d92b99a96\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/Deunifi.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport { IUniswapV2Router02 } from '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\nimport { IUniswapV2Pair } from '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\nimport { IUniswapV2Callee } from '@uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol';\\n\\nimport { ILendingPool } from \\\"./ILendingPool.sol\\\";\\nimport { IFlashLoanReceiver } from \\\"./IFlashLoanReceiver.sol\\\";\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { IFeeManager } from \\\"./IFeeManager.sol\\\";\\n\\nimport { IERC3156FlashLender } from \\\"./IERC3156FlashLender.sol\\\";\\nimport { IERC3156FlashBorrower } from \\\"./IERC3156FlashBorrower.sol\\\";\\n\\n\\nuint256 constant MAX_UINT256 = ~uint256(0);\\n\\n\\n// // TODO Remove \\n// import \\\"hardhat/console.sol\\\";\\n\\ninterface IDSProxy{\\n\\n    function execute(address _target, bytes calldata _data)\\n        external\\n        payable;\\n\\n    function setOwner(address owner_)\\n        external;\\n\\n}\\n\\ninterface IWeth{\\n    function deposit() external payable;\\n    function withdraw(uint wad) external;\\n}\\n\\ninterface IPsm{\\n    function buyGem(address usr, uint256 gemAmt) external;\\n    function sellGem(address usr, uint256 gemAmt) external;\\n}\\n\\ncontract Deunifi is IERC3156FlashBorrower, IFlashLoanReceiver, Ownable {\\n\\n    event LockAndDraw(address sender, uint cdp, uint collateral, uint debt);\\n    event WipeAndFree(address sender, uint cdp, uint collateral, uint debt);\\n\\n    address public feeManager;\\n\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    uint8 public constant WIPE_AND_FREE = 1;\\n    uint8 public constant LOCK_AND_DRAW = 2;\\n\\n    fallback () external payable {}\\n\\n    function setFeeManager(address _feeManager) public onlyOwner{\\n        feeManager = _feeManager;\\n    }\\n\\n    struct PayBackParameters {\\n        address sender;\\n        address debtToken;\\n        uint debtToPay;\\n        address tokenA;\\n        address tokenB;\\n        address pairToken;\\n        uint collateralAmountToFree;\\n        uint collateralAmountToUseToPayDebt;\\n        uint debtToCoverWithTokenA;\\n        uint debtToCoverWithTokenB;\\n        address[] pathTokenAToDebtToken;\\n        address[] pathTokenBToDebtToken;\\n        uint minTokenAToRecive;\\n        uint minTokenBToRecive;\\n        uint deadline;\\n        address dsProxy;\\n        address dsProxyActions;\\n        address manager;\\n        address gemJoin;\\n        address daiJoin;\\n        uint cdp;\\n        address router02;\\n        address weth;\\n\\n        // PSM swap parameters\\n        address tokenToSwapWithPsm;\\n        address tokenJoinForSwapWithPsm;\\n        address psm;\\n        uint256 psmSellGemAmount;\\n        uint256 expectedDebtTokenFromPsmSellGemOperation;\\n\\n        address lendingPool;\\n    }\\n    \\n    function lockGemAndDraw(\\n        address gemToken,\\n        address dsProxy,\\n        address dsProxyActions,\\n        address manager,\\n        address jug,\\n        address gemJoin,\\n        address daiJoin, \\n        uint cdp,\\n        uint collateralToLock,\\n        uint daiToBorrow,\\n        bool transferFrom\\n        ) internal {\\n\\n        safeIncreaseMaxUint(gemToken, dsProxy, collateralToLock);\\n\\n        IDSProxy(dsProxy).execute(\\n            dsProxyActions,\\n            abi.encodeWithSignature(\\\"lockGemAndDraw(address,address,address,address,uint256,uint256,uint256,bool)\\\",\\n                manager, jug, gemJoin, daiJoin, cdp, collateralToLock, daiToBorrow, transferFrom)\\n        );\\n\\n    }\\n\\n    struct LockAndDrawParameters{\\n\\n        address sender;\\n\\n        address debtToken;\\n\\n        address router02;\\n        address psm;\\n\\n        address token0;\\n        uint256 debtTokenForToken0;\\n        uint256 token0FromDebtToken;\\n        address[] pathFromDebtTokenToToken0;\\n        bool usePsmForToken0;\\n\\n        address token1;\\n        uint256 debtTokenForToken1;\\n        uint256 token1FromDebtToken;\\n        address[] pathFromDebtTokenToToken1;\\n        bool usePsmForToken1;\\n\\n        uint256 token0FromUser;\\n        uint256 token1FromUser;\\n\\n        uint256 minCollateralToBuy;\\n        uint256 collateralFromUser;\\n\\n        address gemToken;\\n        address dsProxy;\\n        address dsProxyActions;\\n        address manager;\\n        address jug;\\n        address gemJoin;\\n        address daiJoin;\\n        uint256 cdp;\\n        uint256 debtTokenToDraw;\\n        bool transferFrom;\\n\\n        uint256 deadline;\\n\\n        address lendingPool;\\n\\n    }\\n\\n    function approveDebtToken(uint256 pathFromDebtTokenToToken0Length, uint256 pathFromDebtTokenToToken1Length,\\n        address debtToken, address router02, address psm,\\n        uint256 debtTokenForToken0, uint256 debtTokenForToken1,\\n        bool usePsmForToken0, bool usePsmForToken1) internal {\\n        \\n        uint256 amountToApproveRouter02 = 0;\\n        uint256 amountToApprovePsm = 0;\\n\\n        if (pathFromDebtTokenToToken0Length > 0){\\n            if (usePsmForToken0)\\n                amountToApprovePsm = amountToApprovePsm.add(debtTokenForToken0);\\n            else\\n                amountToApproveRouter02 = amountToApproveRouter02.add(debtTokenForToken0);\\n        }\\n\\n        if (pathFromDebtTokenToToken1Length > 0){\\n            if (usePsmForToken1)\\n                amountToApprovePsm = amountToApprovePsm.add(debtTokenForToken1);\\n            else\\n                amountToApproveRouter02 = amountToApproveRouter02.add(debtTokenForToken1);\\n        }\\n\\n        if (amountToApproveRouter02 > 0){\\n            safeIncreaseMaxUint(debtToken, router02, \\n                amountToApproveRouter02);\\n        }\\n\\n        if (amountToApprovePsm > 0){\\n            safeIncreaseMaxUint(debtToken, psm, \\n                amountToApprovePsm);\\n        }\\n\\n    }\\n\\n    function lockAndDrawOperation(bytes memory params) internal{\\n\\n        ( LockAndDrawParameters memory parameters) = abi.decode(params, (LockAndDrawParameters));\\n        \\n        approveDebtToken(parameters.pathFromDebtTokenToToken0.length, parameters.pathFromDebtTokenToToken1.length,\\n            parameters.debtToken, parameters.router02, parameters.psm,\\n            parameters.debtTokenForToken0, parameters.debtTokenForToken1,\\n            parameters.usePsmForToken0, parameters.usePsmForToken1);\\n\\n        uint token0FromDebtToken = 0;\\n        uint token1FromDebtToken = 0;\\n        uint boughtCollateral;\\n\\n        // Swap debt token for gems or one of tokens that compose gems.\\n        if (parameters.debtTokenForToken0 > 0){\\n\\n            if (parameters.debtToken == parameters.token0){\\n\\n                token0FromDebtToken = parameters.debtTokenForToken0;\\n\\n            } else {\\n\\n                if (parameters.usePsmForToken0){\\n\\n                    token0FromDebtToken = parameters.token0FromDebtToken;\\n                    \\n                    IPsm(parameters.psm).buyGem(address(this), token0FromDebtToken);\\n\\n                }else{\\n\\n                    token0FromDebtToken = IUniswapV2Router02(parameters.router02).swapExactTokensForTokens(\\n                        parameters.debtTokenForToken0, // exact amount for token 'from'\\n                        0, // min amount to recive for token 'to'\\n                        parameters.pathFromDebtTokenToToken0, // path of swap\\n                        address(this), // reciver\\n                        parameters.deadline\\n                        )[parameters.pathFromDebtTokenToToken0.length-1];\\n\\n                }\\n\\n            }\\n\\n            boughtCollateral = token0FromDebtToken;\\n\\n        }\\n\\n        // Swap debt token the other token that compose gems.\\n        if (parameters.debtTokenForToken1 > 0){\\n\\n            if (parameters.debtToken == parameters.token1){\\n\\n                token1FromDebtToken = parameters.debtTokenForToken1;\\n\\n            } else {\\n\\n                if (parameters.usePsmForToken1){\\n\\n                    token1FromDebtToken = parameters.token1FromDebtToken;\\n                    \\n                    IPsm(parameters.psm).buyGem(address(this), token1FromDebtToken);\\n\\n                }else{\\n\\n                    token1FromDebtToken = IUniswapV2Router02(parameters.router02).swapExactTokensForTokens(\\n                        parameters.debtTokenForToken1, // exact amount for token 'from'\\n                        0, // min amount to recive for token 'to'\\n                        parameters.pathFromDebtTokenToToken1, // path of swap\\n                        address(this), // reciver\\n                        parameters.deadline\\n                        )[parameters.pathFromDebtTokenToToken1.length-1];\\n\\n                }\\n\\n            }\\n\\n        }\\n\\n        if (parameters.token1FromUser.add(token1FromDebtToken) > 0){\\n\\n            safeIncreaseMaxUint(parameters.token0, parameters.router02,\\n                parameters.token0FromUser.add(token0FromDebtToken));\\n            safeIncreaseMaxUint(parameters.token1, parameters.router02,\\n                parameters.token1FromUser.add(token1FromDebtToken));\\n\\n            ( uint token0Used, uint token1Used, uint addedLiquidity) = IUniswapV2Router02(parameters.router02).addLiquidity(\\n                parameters.token0,\\n                parameters.token1,\\n                parameters.token0FromUser.add(token0FromDebtToken),\\n                parameters.token1FromUser.add(token1FromDebtToken),\\n                0,\\n                0,\\n                address(this), // reciver\\n                parameters.deadline\\n            );\\n\\n            boughtCollateral = addedLiquidity;\\n\\n            // Remaining tokens are returned to user.\\n\\n            if (parameters.token0FromUser.add(token0FromDebtToken).sub(token0Used) > 0)\\n                IERC20(parameters.token0).safeTransfer(\\n                    parameters.sender,\\n                    parameters.token0FromUser.add(token0FromDebtToken).sub(token0Used));\\n\\n            if (parameters.token1FromUser.add(token1FromDebtToken).sub(token1Used) > 0)\\n                IERC20(parameters.token1).safeTransfer(\\n                    parameters.sender,\\n                    parameters.token1FromUser.add(token1FromDebtToken).sub(token1Used));\\n\\n        }\\n\\n        require(boughtCollateral >= parameters.minCollateralToBuy, \\\"Deunifi: Bought collateral lower than expected collateral to buy.\\\");\\n\\n        uint collateralToLock = parameters.collateralFromUser.add(boughtCollateral);\\n\\n        lockGemAndDraw(\\n            parameters.gemToken,\\n            parameters.dsProxy,\\n            parameters.dsProxyActions,\\n            parameters.manager, \\n            parameters.jug,\\n            parameters.gemJoin,\\n            parameters.daiJoin, \\n            parameters.cdp,\\n            collateralToLock,\\n            parameters.debtTokenToDraw,\\n            parameters.transferFrom\\n        );\\n\\n        // Fee Service Payment\\n        safeIncreaseMaxUint(parameters.debtToken, feeManager, \\n            parameters.debtTokenToDraw); // We are passing an amount higher so it is not necessary to calculate the fee.\\n\\n        if (feeManager!=address(0))\\n            // TODO parameters.sender\\n            IFeeManager(feeManager).collectFee(parameters.sender, parameters.debtToken, parameters.debtTokenToDraw);\\n\\n        // Approve lending pool to collect flash loan + fees.\\n        safeIncreaseMaxUint(parameters.debtToken, parameters.lendingPool,\\n            parameters.debtTokenToDraw); // We are passing an amount higher so it is not necessary to calculate the fee.\\n\\n        emit LockAndDraw(parameters.sender, parameters.cdp, collateralToLock, parameters.debtTokenToDraw);\\n        \\n    }\\n\\n    function paybackDebt(PayBackParameters memory parameters) internal\\n        returns (uint freeTokenA, uint freeTokenB, uint freePairToken){\\n\\n        parameters.debtToPay;\\n\\n        wipeAndFreeGem(\\n            parameters.dsProxy,\\n            parameters.dsProxyActions,\\n            parameters.manager,\\n            parameters.gemJoin,\\n            parameters.daiJoin,\\n            parameters.cdp,\\n            parameters.collateralAmountToFree,\\n            parameters.debtToPay,\\n            parameters.debtToken\\n        );\\n\\n        (uint remainingTokenA, uint remainingTokenB) = swapCollateralForTokens(\\n            SwapCollateralForTokensParameters(\\n                parameters.router02,\\n                parameters.tokenA,\\n                parameters.tokenB, // Optional in case of Uniswap Pair Collateral\\n                parameters.pairToken,\\n                parameters.collateralAmountToUseToPayDebt, // Amount of tokenA or liquidity to remove \\n                                    // of pair(tokenA, tokenB)\\n                parameters.minTokenAToRecive, // Min amount remaining after swap tokenA for debtToken\\n                            // (this has more sense when we are working with pairs)\\n                parameters.minTokenBToRecive, // Optional in case of Uniswap Pair Collateral\\n                parameters.deadline,\\n                parameters.debtToCoverWithTokenA, // amount in debt token\\n                parameters.debtToCoverWithTokenB, // Optional in case of Uniswap Pair Collateral\\n                parameters.pathTokenAToDebtToken, // Path to perform the swap.\\n                parameters.pathTokenBToDebtToken, // Optional in case of Uniswap Pair Collateral\\n                parameters.tokenToSwapWithPsm,\\n                parameters.tokenJoinForSwapWithPsm,\\n                parameters.psm,\\n                parameters.psmSellGemAmount,\\n                parameters.expectedDebtTokenFromPsmSellGemOperation\\n            )\\n        );\\n\\n        uint pairRemaining = 0;\\n\\n        if (parameters.pairToken != address(0)){\\n            pairRemaining = parameters.collateralAmountToFree\\n                .sub(parameters.collateralAmountToUseToPayDebt);\\n        }\\n\\n        return (remainingTokenA, remainingTokenB, pairRemaining);\\n\\n    }\\n\\n    function safeIncreaseMaxUint(address token, address spender, uint amount) internal {\\n        if (IERC20(token).allowance(address(this), spender) < amount){\\n            IERC20(token).safeApprove(spender, 0);\\n            IERC20(token).safeApprove(spender, MAX_UINT256);\\n        } \\n    }\\n\\n    /**\\n    Preconditions:\\n    - this should have enough `wadD` DAI.\\n    - DAI.allowance(this, daiJoin) >= wadD\\n    - All addresses should correspond with the expected contracts.\\n    */\\n    function wipeAndFreeGem(\\n        address dsProxy,\\n        address dsProxyActions,\\n        address manager,\\n        address gemJoin,\\n        address daiJoin,\\n        uint256 cdp,\\n        uint256 wadC,\\n        uint256 wadD,\\n        address daiToken\\n    ) internal {\\n\\n        safeIncreaseMaxUint(daiToken, dsProxy, wadD);\\n\\n        IDSProxy(dsProxy).execute(\\n            dsProxyActions,\\n            abi.encodeWithSignature(\\\"wipeAndFreeGem(address,address,address,uint256,uint256,uint256)\\\",\\n                manager, gemJoin, daiJoin, cdp, wadC, wadD)\\n        );\\n\\n    }\\n    \\n    struct SwapCollateralForTokensParameters{\\n        address router02; // Uniswap V2 Router\\n        address tokenA; // Token to be swap for debtToken\\n        address tokenB; // Optional in case of Uniswap Pair Collateral\\n        address pairToken;\\n        uint amountToUseToPayDebt; // Amount of tokenA or liquidity to remove \\n                                   // of pair(tokenA, tokenB)\\n        uint amountAMin; // Min amount remaining after swap tokenA for debtToken\\n                         // (this has more sense when we are working with pairs)\\n        uint amountBMin; // Optional in case of Uniswap Pair Collateral\\n        uint deadline;\\n        uint debtToCoverWithTokenA; // amount in debt token\\n        uint debtToCoverWithTokenB; // Optional in case of Uniswap Pair Collateral\\n        address[] pathTokenAToDebtToken; // Path to perform the swap.\\n        address[] pathTokenBToDebtToken; // Optional in case of Uniswap Pair Collateral\\n\\n        address tokenToSwapWithPsm;\\n        address tokenJoinForSwapWithPsm;\\n        address psm;\\n        uint256 psmSellGemAmount;\\n        uint256 expectedDebtTokenFromPsmSellGemOperation;\\n    }\\n\\n    /**\\n    Preconditions:\\n    - this should have enough amountToUseToPayDebt, \\n        tokenA for debtToCoverWithTokenA and \\n        tokenb for debtToCoverWithTokenB and \\n    - pair(tokenA, tokenB).allowance(this, router02) >= amountToUseToPayDebt.\\n    - tokenA.allowance(this, router02) >= (debtToCoverWithTokenA in token A)\\n    - tokenB.allowance(this, router02) >= (debtToCoverWithTokenB in token B)\\n    - All addresses should correspond with the expected contracts.\\n    - pair(tokenA, tokenB) should be a valid Uniswap V2 pair.\\n    */\\n    function swapCollateralForTokens(\\n        SwapCollateralForTokensParameters memory parameters\\n    ) internal returns (uint remainingTokenA, uint remainingTokenB) {\\n        \\n        uint amountA = 0;\\n        uint amountB = 0;\\n        uint amountACoveringDebt = 0;\\n        uint amountBCoveringDebt = 0;\\n\\n        if (parameters.tokenB!=address(0)){\\n\\n            safeIncreaseMaxUint(parameters.pairToken, parameters.router02, parameters.amountToUseToPayDebt);\\n\\n            (amountA, amountB) = IUniswapV2Router02(parameters.router02).removeLiquidity(      \\n                parameters.tokenA,\\n                parameters.tokenB,\\n                parameters.amountToUseToPayDebt,\\n                0, // Min amount of token A to recive\\n                0, // Min amount of token B to recive\\n                address(this),\\n                parameters.deadline\\n            );\\n\\n            if (parameters.debtToCoverWithTokenB > 0){\\n                \\n                if (parameters.pathTokenBToDebtToken.length == 0){\\n\\n                    amountBCoveringDebt = parameters.debtToCoverWithTokenB;\\n\\n                } else {\\n\\n                    if (parameters.tokenToSwapWithPsm == parameters.tokenB){\\n\\n                        safeIncreaseMaxUint(parameters.tokenB, parameters.tokenJoinForSwapWithPsm, \\n                            parameters.psmSellGemAmount);\\n\\n                        IPsm(parameters.psm).sellGem(address(this), parameters.psmSellGemAmount);\\n\\n                        amountBCoveringDebt = parameters.psmSellGemAmount;\\n\\n                    }else{\\n\\n                        // IERC20(parameters.tokenB).safeIncreaseAllowance(parameters.router02, amountB.sub(parameters.amountBMin));\\n                        safeIncreaseMaxUint(parameters.tokenB, parameters.router02, \\n                            amountB.mul(2));  // We are passing an amount higher because we do not know how much is going to be spent.\\n                        \\n                        amountBCoveringDebt = IUniswapV2Router02(parameters.router02).swapTokensForExactTokens(\\n                            parameters.debtToCoverWithTokenB,\\n                            amountB.sub(parameters.amountBMin), // amountInMax (Here we validate amountBMin)\\n                            parameters.pathTokenBToDebtToken,\\n                            address(this),\\n                            parameters.deadline\\n                        )[0];\\n\\n                    }\\n\\n                }\\n\\n            }\\n\\n        }else{\\n\\n            // In case we are not dealing with a pair, we need \\n            amountA = parameters.amountToUseToPayDebt;\\n\\n        }\\n\\n        if (parameters.debtToCoverWithTokenA > 0){\\n\\n                if (parameters.pathTokenAToDebtToken.length == 0){\\n\\n                    amountACoveringDebt = parameters.debtToCoverWithTokenA;\\n\\n                } else {\\n\\n                    if (parameters.tokenToSwapWithPsm == parameters.tokenA){\\n\\n                        safeIncreaseMaxUint(parameters.tokenA, parameters.tokenJoinForSwapWithPsm, \\n                            parameters.psmSellGemAmount);\\n\\n                        IPsm(parameters.psm).sellGem(address(this), parameters.psmSellGemAmount);\\n\\n                        amountACoveringDebt = parameters.psmSellGemAmount;\\n\\n                    }else{\\n\\n                        // IERC20(parameters.tokenA).safeIncreaseAllowance(parameters.router02, amountA.sub(parameters.amountAMin));\\n                        safeIncreaseMaxUint(parameters.tokenA, parameters.router02,\\n                            amountA.mul(2)); // We are passing an amount higher because we do not know how much is going to be spent.\\n\\n                        amountACoveringDebt = IUniswapV2Router02(parameters.router02).swapTokensForExactTokens(\\n                            parameters.debtToCoverWithTokenA,\\n                            amountA.sub(parameters.amountAMin), // amountInMax (Here we validate amountAMin)\\n                            parameters.pathTokenAToDebtToken,\\n                            address(this),\\n                            parameters.deadline\\n                        )[0];\\n\\n                    }\\n\\n                }\\n\\n        }\\n\\n        return (\\n            amountA.sub(amountACoveringDebt),\\n            amountB.sub(amountBCoveringDebt)\\n            );\\n\\n    }\\n\\n    function wipeAndFreeOperation(bytes memory params) internal{\\n\\n        ( PayBackParameters memory decodedData ) = abi.decode(params, (PayBackParameters));\\n\\n        (uint remainingTokenA, uint remainingTokenB, uint pairRemaining) = paybackDebt(decodedData);\\n\\n        require(remainingTokenA >= decodedData.minTokenAToRecive, \\\"Deunifi: Remaining token lower than expected.\\\");\\n        require(remainingTokenB >= decodedData.minTokenBToRecive, \\\"Deunifi: Remaining token lower than expected.\\\");\\n\\n        // Fee Service Payment\\n        safeIncreaseMaxUint(decodedData.debtToken, feeManager, \\n            decodedData.debtToPay); // We are passing an amount higher so it is not necessary to calculate the fee.\\n\\n        if (feeManager!=address(0))\\n            IFeeManager(feeManager).collectFee(decodedData.sender, decodedData.debtToken, decodedData.debtToPay);\\n\\n        // Conversion from WETH to ETH when needed.\\n        if (decodedData.weth != address(0)){\\n\\n            uint wethBalance = 0;\\n\\n            if (decodedData.tokenA == decodedData.weth){\\n                wethBalance = remainingTokenA;\\n                remainingTokenA = 0;\\n            }\\n\\n            if (decodedData.tokenB == decodedData.weth){\\n                wethBalance = remainingTokenB;\\n                remainingTokenB = 0;\\n            }\\n\\n            if (wethBalance>0){\\n                IWeth(decodedData.weth).withdraw(wethBalance);\\n                decodedData.sender.call{value: wethBalance}(\\\"\\\");\\n            }\\n        }\\n\\n        if (remainingTokenA > 0 || decodedData.minTokenAToRecive > 0){\\n            IERC20(decodedData.tokenA).safeTransfer(decodedData.sender, remainingTokenA);\\n        }\\n\\n        if (remainingTokenB > 0 || decodedData.minTokenBToRecive > 0){\\n            IERC20(decodedData.tokenB).safeTransfer(decodedData.sender, remainingTokenB);\\n        }\\n\\n        if (pairRemaining > 0){\\n            // We do not verify because pairRemaining because the contract should have only\\n            // the exact amount to transfer.\\n            IERC20(decodedData.pairToken).safeTransfer(decodedData.sender, pairRemaining);\\n        }\\n\\n        safeIncreaseMaxUint(decodedData.debtToken, decodedData.lendingPool,\\n            decodedData.debtToPay.mul(2)); // We are passing an amount higher so it is not necessary to calculate the fee.\\n\\n        emit WipeAndFree(decodedData.sender, decodedData.cdp, decodedData.collateralAmountToFree, decodedData.debtToPay);\\n\\n    }\\n\\n    struct Operation{\\n        uint8 operation;\\n        bytes data;\\n    }\\n\\n    function executeOperation(\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata params\\n    )\\n        external\\n        override\\n        returns (bool)\\n    {\\n\\n        ( Operation memory operation ) = abi.decode(params, (Operation));\\n\\n        if (operation.operation == WIPE_AND_FREE)\\n            wipeAndFreeOperation(operation.data);\\n        else if(operation.operation == LOCK_AND_DRAW)\\n            lockAndDrawOperation(operation.data);\\n        else\\n            revert('Deunifi: Invalid operation.');\\n\\n        return true;\\n    }\\n\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata params\\n    ) external override returns (bytes32) {\\n\\n        ( Operation memory operation ) = abi.decode(params, (Operation));\\n\\n        if (operation.operation == WIPE_AND_FREE)\\n            wipeAndFreeOperation(operation.data);\\n        else if(operation.operation == LOCK_AND_DRAW)\\n            lockAndDrawOperation(operation.data);\\n        else\\n            revert('Deunifi: Invalid operation.');\\n\\n        return keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n    }\\n\\n    /**\\n    Executed as DSProxy.\\n     */\\n    function flashLoanFromDSProxy(\\n        address owner, // Owner of DSProxy calling this function.\\n        address target, // Target contract that will resolve the flash loan.\\n        address[] memory ownerTokens, // owner tokens to transfer to target\\n        uint[] memory ownerAmounts, // owner token amounts to transfer to target\\n        address lendingPool,\\n        address[] memory loanTokens,\\n        uint[] memory loanAmounts,\\n        uint[] memory modes,\\n        bytes memory data,\\n        address weth, // When has to use or recive ETH, else should be address(0)\\n        bool useAave\\n        ) public payable{\\n\\n        if (msg.value > 0){\\n            IWeth(weth).deposit{value: msg.value}();\\n            IERC20(weth).safeTransfer(\\n                target, msg.value\\n            );\\n        }\\n\\n        IDSProxy(address(this)).setOwner(target);\\n\\n        for (uint i=0; i<ownerTokens.length; i=i.add(1)){\\n            IERC20(ownerTokens[i]).safeTransferFrom(\\n                owner, target, ownerAmounts[i]\\n            );\\n        }\\n\\n        if (useAave){\\n\\n            ILendingPool(lendingPool).flashLoan(\\n                target,\\n                loanTokens,\\n                loanAmounts,\\n                modes, // modes: 0 = no debt, 1 = stable, 2 = variable\\n                target, // onBehalfOf\\n                data,\\n                0 // referralCode\\n            );\\n\\n        } else {\\n\\n            IERC3156FlashLender(lendingPool).flashLoan(\\n                IERC3156FlashBorrower(target), loanTokens[0], loanAmounts[0], data);\\n\\n        }\\n\\n        IDSProxy(address(this)).setOwner(owner);\\n        \\n    }\\n\\n}\\n\",\"keccak256\":\"0x44e89b2563875bc2f7bbce814c9943d4f673cfef7894bb7d0a60ad9647a506ad\",\"license\":\"UNLICENSED\"},\"contracts/IERC3156FlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright (C) 2021 Dai Foundation\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.6.12;\\n\\ninterface IERC3156FlashBorrower {\\n\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc2c0ec91236600daeea7351b581d50827fd726ca6f999c1870e537f9f47b9395\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/IERC3156FlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright (C) 2021 Dai Foundation\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.6.12;\\n\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\ninterface IERC3156FlashLender {\\n\\n    /**\\n     * @dev The amount of currency available to be lent.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(\\n        address token\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(\\n        address token,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd3353666af6bdca1788f8b22a0089813a4d110c43f6899e2d459f5a73e954ee0\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/IFeeManager.sol\":{\"content\":\"pragma solidity 0.7.6;\\n\\ninterface IFeeManager{\\n\\n    function collectFee(address sender, address debtToken, uint baseAmount) external;\\n\\n}\\n\",\"keccak256\":\"0x5183c426e684c634dd64c079a968d8f55b61e8cc214a880102bae938619e1859\"},\"contracts/IFlashLoanReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\ninterface IFlashLoanReceiver {\\n    function executeOperation(\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata params\\n    ) external returns (bool);\\n}\\n\\n\",\"keccak256\":\"0x7dd2f2861934f603a30f70251db1350f68898a543bacc097022a9e3882633781\",\"license\":\"UNLICENSED\"},\"contracts/ILendingPool.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\ninterface ILendingPool{\\n\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    function FLASHLOAN_PREMIUM_TOTAL()\\n        external view\\n        returns(uint256);\\n\\n}\\n\\n\",\"keccak256\":\"0xf7ca081bda54ae970b726ef224bdec27ec7277cc9753bdd4b37551d1e7ce2370\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600062000024620000c860201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350620000d0565b600033905090565b61482c80620000e06000396000f3fe6080604052600436106100955760003560e01c80638da5cb5b116100595780638da5cb5b1461016b578063920f5c8414610196578063aecfd7ae146101d3578063d0fb0203146101ef578063f2fde38b1461021a57610096565b806308a427971461009857806323e30c8b146100c3578063472d35b914610100578063715018a6146101295780638348d0341461014057610096565b5b005b3480156100a457600080fd5b506100ad610243565b6040516100ba919061440f565b60405180910390f35b3480156100cf57600080fd5b506100ea60048036038101906100e59190613868565b610248565b6040516100f79190614279565b60405180910390f35b34801561010c57600080fd5b50610127600480360381019061012291906136bf565b610310565b005b34801561013557600080fd5b5061013e610403565b005b34801561014c57600080fd5b50610155610570565b604051610162919061440f565b60405180910390f35b34801561017757600080fd5b50610180610575565b60405161018d9190613eee565b60405180910390f35b3480156101a257600080fd5b506101bd60048036038101906101b891906138fa565b61059e565b6040516101ca919061425e565b60405180910390f35b6101ed60048036038101906101e891906136e8565b61064a565b005b3480156101fb57600080fd5b5061020461097c565b6040516102119190613eee565b60405180910390f35b34801561022657600080fd5b50610241600480360381019061023c91906136bf565b6109a2565b005b600281565b600080838381019061025a9190613a8d565b9050600160ff16816000015160ff1614156102815761027c8160200151610b94565b6102e2565b600260ff16816000015160ff1614156102a6576102a1816020015161107e565b6102e1565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d890614320565b60405180910390fd5b5b7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd99150509695505050505050565b6103186118ed565b73ffffffffffffffffffffffffffffffffffffffff16610336610575565b73ffffffffffffffffffffffffffffffffffffffff16146103bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61040b6118ed565b73ffffffffffffffffffffffffffffffffffffffff16610429610575565b73ffffffffffffffffffffffffffffffffffffffff16146104b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600181565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008083838101906105b09190613a8d565b9050600160ff16816000015160ff1614156105d7576105d28160200151610b94565b610638565b600260ff16816000015160ff1614156105fc576105f7816020015161107e565b610637565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062e90614320565b60405180910390fd5b5b60019150509998505050505050505050565b60003411156106e0578173ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561069b57600080fd5b505af11580156106af573d6000803e3d6000fd5b50505050506106df8a348473ffffffffffffffffffffffffffffffffffffffff166118f59092919063ffffffff16565b5b3073ffffffffffffffffffffffffffffffffffffffff166313af40358b6040518263ffffffff1660e01b81526004016107199190613eee565b600060405180830381600087803b15801561073357600080fd5b505af1158015610747573d6000803e3d6000fd5b5050505060005b89518110156107c5576107aa8c8c8b848151811061076857fe5b60200260200101518d858151811061077c57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16611997909392919063ffffffff16565b6107be600182611a5890919063ffffffff16565b905061074e565b508015610849578673ffffffffffffffffffffffffffffffffffffffff1663ab9c4b5d8b8888888f8960006040518863ffffffff1660e01b8152600401610812979695949392919061415e565b600060405180830381600087803b15801561082c57600080fd5b505af1158015610840573d6000803e3d6000fd5b50505050610904565b8673ffffffffffffffffffffffffffffffffffffffff16635cffe9de8b8860008151811061087357fe5b60200260200101518860008151811061088857fe5b6020026020010151876040518563ffffffff1660e01b81526004016108b09493929190614294565b602060405180830381600087803b1580156108ca57600080fd5b505af11580156108de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109029190613a23565b505b3073ffffffffffffffffffffffffffffffffffffffff166313af40358c6040518263ffffffff1660e01b815260040161093d9190613eee565b600060405180830381600087803b15801561095757600080fd5b505af115801561096b573d6000803e3d6000fd5b505050505050505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6109aa6118ed565b73ffffffffffffffffffffffffffffffffffffffff166109c8610575565b73ffffffffffffffffffffffffffffffffffffffff1614610a51576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ad7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061472a6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081806020019051810190610baa9190613ace565b90506000806000610bba84611ae0565b925092509250836101800151831015610c08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bff90614300565b60405180910390fd5b836101a00151821015610c50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4790614300565b60405180910390fd5b610c858460200151600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660400151611cfa565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d7957600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663651b8cb68560000151866020015187604001516040518463ffffffff1660e01b8152600401610d469392919061403a565b600060405180830381600087803b158015610d6057600080fd5b505af1158015610d74573d6000803e3d6000fd5b505050505b600073ffffffffffffffffffffffffffffffffffffffff16846102c0015173ffffffffffffffffffffffffffffffffffffffff1614610f27576000846102c0015173ffffffffffffffffffffffffffffffffffffffff16856060015173ffffffffffffffffffffffffffffffffffffffff161415610df957839050600093505b846102c0015173ffffffffffffffffffffffffffffffffffffffff16856080015173ffffffffffffffffffffffffffffffffffffffff161415610e3e57829050600092505b6000811115610f2557846102c0015173ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b8152600401610e859190614340565b600060405180830381600087803b158015610e9f57600080fd5b505af1158015610eb3573d6000803e3d6000fd5b50505050846000015173ffffffffffffffffffffffffffffffffffffffff1681604051610edf90613ed9565b60006040518083038185875af1925050503d8060008114610f1c576040519150601f19603f3d011682016040523d82523d6000602084013e610f21565b606091505b5050505b505b6000831180610f3b57506000846101800151115b15610f7457610f73846000015184866060015173ffffffffffffffffffffffffffffffffffffffff166118f59092919063ffffffff16565b5b6000821180610f8857506000846101a00151115b15610fc157610fc0846000015183866080015173ffffffffffffffffffffffffffffffffffffffff166118f59092919063ffffffff16565b5b6000811115610ffe57610ffd8460000151828660a0015173ffffffffffffffffffffffffffffffffffffffff166118f59092919063ffffffff16565b5b611029846020015185610380015161102460028860400151611deb90919063ffffffff16565b611cfa565b7fac0cbef1a8ac246924422e9ff961ee097263dc73ccb13c5780e2d048c6e228c584600001518561028001518660c00151876040015160405161106f9493929190614219565b60405180910390a15050505050565b6000818060200190518101906110949190613a4c565b90506110d18160e0015151826101800151518360200151846040015185606001518660a00151876101400151886101000151896101a00151611e71565b6000806000808460a00151111561127f57836080015173ffffffffffffffffffffffffffffffffffffffff16846020015173ffffffffffffffffffffffffffffffffffffffff16141561112a578360a00151925061127b565b836101000151156111b2578360c001519250836060015173ffffffffffffffffffffffffffffffffffffffff16638d7ef9bb30856040518363ffffffff1660e01b815260040161117b929190613f32565b600060405180830381600087803b15801561119557600080fd5b505af11580156111a9573d6000803e3d6000fd5b5050505061127a565b836040015173ffffffffffffffffffffffffffffffffffffffff166338ed17398560a0015160008760e00151308961038001516040518663ffffffff1660e01b815260040161120595949392919061435b565b600060405180830381600087803b15801561121f57600080fd5b505af1158015611233573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061125c91906139e2565b60018560e0015151038151811061126f57fe5b602002602001015192505b5b8290505b6000846101400151111561142d5783610120015173ffffffffffffffffffffffffffffffffffffffff16846020015173ffffffffffffffffffffffffffffffffffffffff1614156112d757836101400151915061142c565b836101a0015115611360578361016001519150836060015173ffffffffffffffffffffffffffffffffffffffff16638d7ef9bb30846040518363ffffffff1660e01b8152600401611329929190613f32565b600060405180830381600087803b15801561134357600080fd5b505af1158015611357573d6000803e3d6000fd5b5050505061142b565b836040015173ffffffffffffffffffffffffffffffffffffffff166338ed17398561014001516000876101800151308961038001516040518663ffffffff1660e01b81526004016113b595949392919061435b565b600060405180830381600087803b1580156113cf57600080fd5b505af11580156113e3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061140c91906139e2565b600185610180015151038151811061142057fe5b602002602001015191505b5b5b600061144783866101e00151611a5890919063ffffffff16565b11156116ad576114778460800151856040015161147286886101c00151611a5890919063ffffffff16565b611cfa565b6114a2846101200151856040015161149d85886101e00151611a5890919063ffffffff16565b611cfa565b6000806000866040015173ffffffffffffffffffffffffffffffffffffffff1663e8e3370088608001518961012001516114ea8a8c6101c00151611a5890919063ffffffff16565b6115028a8d6101e00151611a5890919063ffffffff16565b600080308f61038001516040518963ffffffff1660e01b815260040161152f9897969594939291906140e0565b606060405180830381600087803b15801561154957600080fd5b505af115801561155d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115819190613b74565b92509250925080935060006115b6846115a8898b6101c00151611a5890919063ffffffff16565b611f2b90919063ffffffff16565b11156116195761161887600001516115ee856115e08a8c6101c00151611a5890919063ffffffff16565b611f2b90919063ffffffff16565b896080015173ffffffffffffffffffffffffffffffffffffffff166118f59092919063ffffffff16565b5b600061164583611637888b6101e00151611a5890919063ffffffff16565b611f2b90919063ffffffff16565b11156116a9576116a8876000015161167d8461166f898c6101e00151611a5890919063ffffffff16565b611f2b90919063ffffffff16565b89610120015173ffffffffffffffffffffffffffffffffffffffff166118f59092919063ffffffff16565b5b5050505b8361020001518110156116f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ec906142e0565b60405180910390fd5b600061170f82866102200151611a5890919063ffffffff16565b9050611756856102400151866102600151876102800151886102a00151896102c001518a6102e001518b61030001518c6103200151898e61034001518f6103600151611fae565b61178c8560200151600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876103400151611cfa565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461188157600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663651b8cb6866000015187602001518861034001516040518463ffffffff1660e01b815260040161184e9392919061403a565b600060405180830381600087803b15801561186857600080fd5b505af115801561187c573d6000803e3d6000fd5b505050505b61189a8560200151866103a00151876103400151611cfa565b7f992628f13bc2e3ecd138e194a77dfb9fb7a85e5cb3823b6d5f1030f3dc5fc2b48560000151866103200151838861034001516040516118dd9493929190614219565b60405180910390a1505050505050565b600033905090565b6119928363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506120ce565b505050565b611a52846323b872dd60e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506120ce565b50505050565b600080828401905083811015611ad6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6000806000836040015150611b26846101e001518561020001518661022001518761024001518861026001518961028001518a60c001518b604001518c602001516121bd565b600080611c8c604051806102200160405280886102a0015173ffffffffffffffffffffffffffffffffffffffff168152602001886060015173ffffffffffffffffffffffffffffffffffffffff168152602001886080015173ffffffffffffffffffffffffffffffffffffffff1681526020018860a0015173ffffffffffffffffffffffffffffffffffffffff1681526020018860e0015181526020018861018001518152602001886101a001518152602001886101c0015181526020018861010001518152602001886101200151815260200188610140015181526020018861016001518152602001886102e0015173ffffffffffffffffffffffffffffffffffffffff16815260200188610300015173ffffffffffffffffffffffffffffffffffffffff16815260200188610320015173ffffffffffffffffffffffffffffffffffffffff16815260200188610340015181526020018861036001518152506122d7565b9150915060008073ffffffffffffffffffffffffffffffffffffffff168760a0015173ffffffffffffffffffffffffffffffffffffffff1614611ce757611ce48760e001518860c00151611f2b90919063ffffffff16565b90505b8282829550955095505050509193909250565b808373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401611d36929190613f09565b60206040518083038186803b158015611d4e57600080fd5b505afa158015611d62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d869190613b0f565b1015611de657611db88260008573ffffffffffffffffffffffffffffffffffffffff166128289092919063ffffffff16565b611de5826000198573ffffffffffffffffffffffffffffffffffffffff166128289092919063ffffffff16565b5b505050565b600080831415611dfe5760009050611e6b565b6000828402905082848281611e0f57fe5b0414611e66576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806147766021913960400191505060405180910390fd5b809150505b92915050565b60008060008b1115611eb4578315611e9d57611e968682611a5890919063ffffffff16565b9050611eb3565b611eb08683611a5890919063ffffffff16565b91505b5b60008a1115611ef4578215611edd57611ed68582611a5890919063ffffffff16565b9050611ef3565b611ef08583611a5890919063ffffffff16565b91505b5b6000821115611f0957611f08898984611cfa565b5b6000811115611f1e57611f1d898883611cfa565b5b5050505050505050505050565b600082821115611fa3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b611fb98b8b85611cfa565b8973ffffffffffffffffffffffffffffffffffffffff16631cff79cd8a8a8a8a8a8a8a8a8a604051602401611ff5989796959493929190613f5b565b6040516020818303038152906040527fcbd4be3f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b815260040161208f9291906141e9565b600060405180830381600087803b1580156120a957600080fd5b505af11580156120bd573d6000803e3d6000fd5b505050505050505050505050505050565b6000612130826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166129ed9092919063ffffffff16565b90506000815111156121b85780806020019051602081101561215157600080fd5b81019080805190602001909291905050506121b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180614797602a913960400191505060405180910390fd5b5b505050565b6121c8818a84611cfa565b8873ffffffffffffffffffffffffffffffffffffffff16631cff79cd8989898989898960405160240161220096959493929190613fd9565b6040516020818303038152906040527fa6add011000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b815260040161229a9291906141e9565b600060405180830381600087803b1580156122b457600080fd5b505af11580156122c8573d6000803e3d6000fd5b50505050505050505050505050565b600080600080600080600073ffffffffffffffffffffffffffffffffffffffff16876040015173ffffffffffffffffffffffffffffffffffffffff16146125ea5761232f876060015188600001518960800151611cfa565b866000015173ffffffffffffffffffffffffffffffffffffffff1663baa2abde886020015189604001518a60800151600080308e60e001516040518863ffffffff1660e01b81526004016123899796959493929190614071565b6040805180830381600087803b1580156123a257600080fd5b505af11580156123b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123da9190613b38565b8094508195505050600087610120015111156125e557600087610160015151141561240c5786610120015190506125e4565b866040015173ffffffffffffffffffffffffffffffffffffffff1687610180015173ffffffffffffffffffffffffffffffffffffffff1614156124e6576124628760400151886101a00151896101e00151611cfa565b866101c0015173ffffffffffffffffffffffffffffffffffffffff16639599127630896101e001516040518363ffffffff1660e01b81526004016124a7929190613f32565b600060405180830381600087803b1580156124c157600080fd5b505af11580156124d5573d6000803e3d6000fd5b50505050866101e0015190506125e3565b61250c87604001518860000151612507600287611deb90919063ffffffff16565b611cfa565b866000015173ffffffffffffffffffffffffffffffffffffffff16638803dbee8861012001516125498a60c0015187611f2b90919063ffffffff16565b8a6101600151308c60e001516040518663ffffffff1660e01b81526004016125759594939291906143b5565b600060405180830381600087803b15801561258f57600080fd5b505af11580156125a3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906125cc91906139e2565b6000815181106125d857fe5b602002602001015190505b5b5b6125f2565b866080015193505b600087610100015111156127f557600087610140015151141561261c5786610100015191506127f4565b866020015173ffffffffffffffffffffffffffffffffffffffff1687610180015173ffffffffffffffffffffffffffffffffffffffff1614156126f6576126728760200151886101a00151896101e00151611cfa565b866101c0015173ffffffffffffffffffffffffffffffffffffffff16639599127630896101e001516040518363ffffffff1660e01b81526004016126b7929190613f32565b600060405180830381600087803b1580156126d157600080fd5b505af11580156126e5573d6000803e3d6000fd5b50505050866101e0015191506127f3565b61271c87602001518860000151612717600288611deb90919063ffffffff16565b611cfa565b866000015173ffffffffffffffffffffffffffffffffffffffff16638803dbee8861010001516127598a60a0015188611f2b90919063ffffffff16565b8a6101400151308c60e001516040518663ffffffff1660e01b81526004016127859594939291906143b5565b600060405180830381600087803b15801561279f57600080fd5b505af11580156127b3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906127dc91906139e2565b6000815181106127e857fe5b602002602001015191505b5b5b6128088285611f2b90919063ffffffff16565b61281b8285611f2b90919063ffffffff16565b9550955050505050915091565b60008114806128f6575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b1580156128b957600080fd5b505afa1580156128cd573d6000803e3d6000fd5b505050506040513d60208110156128e357600080fd5b8101908080519060200190929190505050145b61294b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806147c16036913960400191505060405180910390fd5b6129e88363095ea7b360e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506120ce565b505050565b60606129fc8484600085612a05565b90509392505050565b606082471015612a60576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806147506026913960400191505060405180910390fd5b612a6985612bad565b612adb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310612b2a5780518252602082019150602081019050602083039250612b07565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612b8c576040519150601f19603f3d011682016040523d82523d6000602084013e612b91565b606091505b5091509150612ba1828286612bc0565b92505050949350505050565b600080823b905060008111915050919050565b60608315612bd057829050612c85565b600083511115612be35782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612c4a578082015181840152602081019050612c2f565b50505050905090810190601f168015612c775780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b6000612c9f612c9a8461445b565b61442a565b90508083825260208201905082856020860282011115612cbe57600080fd5b60005b85811015612cee5781612cd48882612e7a565b845260208401935060208301925050600181019050612cc1565b5050509392505050565b6000612d0b612d068461445b565b61442a565b90508083825260208201905082856020860282011115612d2a57600080fd5b60005b85811015612d5a5781612d408882612e8f565b845260208401935060208301925050600181019050612d2d565b5050509392505050565b6000612d77612d7284614487565b61442a565b90508083825260208201905082856020860282011115612d9657600080fd5b60005b85811015612dc65781612dac8882613680565b845260208401935060208301925050600181019050612d99565b5050509392505050565b6000612de3612dde84614487565b61442a565b90508083825260208201905082856020860282011115612e0257600080fd5b60005b85811015612e325781612e188882613695565b845260208401935060208301925050600181019050612e05565b5050509392505050565b6000612e4f612e4a846144b3565b61442a565b905082815260208101848484011115612e6757600080fd5b612e72848285614678565b509392505050565b600081359050612e89816146cd565b92915050565b600081519050612e9e816146cd565b92915050565b60008083601f840112612eb657600080fd5b8235905067ffffffffffffffff811115612ecf57600080fd5b602083019150836020820283011115612ee757600080fd5b9250929050565b600082601f830112612eff57600080fd5b8135612f0f848260208601612c8c565b91505092915050565b600082601f830112612f2957600080fd5b8151612f39848260208601612cf8565b91505092915050565b60008083601f840112612f5457600080fd5b8235905067ffffffffffffffff811115612f6d57600080fd5b602083019150836020820283011115612f8557600080fd5b9250929050565b600082601f830112612f9d57600080fd5b8135612fad848260208601612d64565b91505092915050565b600082601f830112612fc757600080fd5b8151612fd7848260208601612dd0565b91505092915050565b600081359050612fef816146e4565b92915050565b600081519050613004816146e4565b92915050565b60008083601f84011261301c57600080fd5b8235905067ffffffffffffffff81111561303557600080fd5b60208301915083600182028301111561304d57600080fd5b9250929050565b600082601f83011261306557600080fd5b8135613075848260208601612e3c565b91505092915050565b60006103c0828403121561309157600080fd5b61309c6103c061442a565b905060006130ac84828501612e8f565b60008301525060206130c084828501612e8f565b60208301525060406130d484828501612e8f565b60408301525060606130e884828501612e8f565b60608301525060806130fc84828501612e8f565b60808301525060a061311084828501613695565b60a08301525060c061312484828501613695565b60c08301525060e082015167ffffffffffffffff81111561314457600080fd5b61315084828501612f18565b60e08301525061010061316584828501612ff5565b6101008301525061012061317b84828501612e8f565b6101208301525061014061319184828501613695565b610140830152506101606131a784828501613695565b6101608301525061018082015167ffffffffffffffff8111156131c957600080fd5b6131d584828501612f18565b610180830152506101a06131eb84828501612ff5565b6101a0830152506101c061320184828501613695565b6101c0830152506101e061321784828501613695565b6101e08301525061020061322d84828501613695565b6102008301525061022061324384828501613695565b6102208301525061024061325984828501612e8f565b6102408301525061026061326f84828501612e8f565b6102608301525061028061328584828501612e8f565b610280830152506102a061329b84828501612e8f565b6102a0830152506102c06132b184828501612e8f565b6102c0830152506102e06132c784828501612e8f565b6102e0830152506103006132dd84828501612e8f565b610300830152506103206132f384828501613695565b6103208301525061034061330984828501613695565b6103408301525061036061331f84828501612ff5565b6103608301525061038061333584828501613695565b610380830152506103a061334b84828501612e8f565b6103a08301525092915050565b60006040828403121561336a57600080fd5b613374604061442a565b90506000613384848285016136aa565b600083015250602082013567ffffffffffffffff8111156133a457600080fd5b6133b084828501613054565b60208301525092915050565b60006103a082840312156133cf57600080fd5b6133da6103a061442a565b905060006133ea84828501612e8f565b60008301525060206133fe84828501612e8f565b602083015250604061341284828501613695565b604083015250606061342684828501612e8f565b606083015250608061343a84828501612e8f565b60808301525060a061344e84828501612e8f565b60a08301525060c061346284828501613695565b60c08301525060e061347684828501613695565b60e08301525061010061348b84828501613695565b610100830152506101206134a184828501613695565b6101208301525061014082015167ffffffffffffffff8111156134c357600080fd5b6134cf84828501612f18565b6101408301525061016082015167ffffffffffffffff8111156134f157600080fd5b6134fd84828501612f18565b6101608301525061018061351384828501613695565b610180830152506101a061352984828501613695565b6101a0830152506101c061353f84828501613695565b6101c0830152506101e061355584828501612e8f565b6101e08301525061020061356b84828501612e8f565b6102008301525061022061358184828501612e8f565b6102208301525061024061359784828501612e8f565b610240830152506102606135ad84828501612e8f565b610260830152506102806135c384828501613695565b610280830152506102a06135d984828501612e8f565b6102a0830152506102c06135ef84828501612e8f565b6102c0830152506102e061360584828501612e8f565b6102e08301525061030061361b84828501612e8f565b6103008301525061032061363184828501612e8f565b6103208301525061034061364784828501613695565b6103408301525061036061365d84828501613695565b6103608301525061038061367384828501612e8f565b6103808301525092915050565b60008135905061368f816146fb565b92915050565b6000815190506136a4816146fb565b92915050565b6000813590506136b981614712565b92915050565b6000602082840312156136d157600080fd5b60006136df84828501612e7a565b91505092915050565b60008060008060008060008060008060006101608c8e03121561370a57600080fd5b60006137188e828f01612e7a565b9b505060206137298e828f01612e7a565b9a505060408c013567ffffffffffffffff81111561374657600080fd5b6137528e828f01612eee565b99505060608c013567ffffffffffffffff81111561376f57600080fd5b61377b8e828f01612f8c565b985050608061378c8e828f01612e7a565b97505060a08c013567ffffffffffffffff8111156137a957600080fd5b6137b58e828f01612eee565b96505060c08c013567ffffffffffffffff8111156137d257600080fd5b6137de8e828f01612f8c565b95505060e08c013567ffffffffffffffff8111156137fb57600080fd5b6138078e828f01612f8c565b9450506101008c013567ffffffffffffffff81111561382557600080fd5b6138318e828f01613054565b9350506101206138438e828f01612e7a565b9250506101406138558e828f01612fe0565b9150509295989b509295989b9093969950565b60008060008060008060a0878903121561388157600080fd5b600061388f89828a01612e7a565b96505060206138a089828a01612e7a565b95505060406138b189828a01613680565b94505060606138c289828a01613680565b935050608087013567ffffffffffffffff8111156138df57600080fd5b6138eb89828a0161300a565b92509250509295509295509295565b600080600080600080600080600060a08a8c03121561391857600080fd5b60008a013567ffffffffffffffff81111561393257600080fd5b61393e8c828d01612ea4565b995099505060208a013567ffffffffffffffff81111561395d57600080fd5b6139698c828d01612f42565b975097505060408a013567ffffffffffffffff81111561398857600080fd5b6139948c828d01612f42565b955095505060606139a78c828d01612e7a565b93505060808a013567ffffffffffffffff8111156139c457600080fd5b6139d08c828d0161300a565b92509250509295985092959850929598565b6000602082840312156139f457600080fd5b600082015167ffffffffffffffff811115613a0e57600080fd5b613a1a84828501612fb6565b91505092915050565b600060208284031215613a3557600080fd5b6000613a4384828501612ff5565b91505092915050565b600060208284031215613a5e57600080fd5b600082015167ffffffffffffffff811115613a7857600080fd5b613a848482850161307e565b91505092915050565b600060208284031215613a9f57600080fd5b600082013567ffffffffffffffff811115613ab957600080fd5b613ac584828501613358565b91505092915050565b600060208284031215613ae057600080fd5b600082015167ffffffffffffffff811115613afa57600080fd5b613b06848285016133bc565b91505092915050565b600060208284031215613b2157600080fd5b6000613b2f84828501613695565b91505092915050565b60008060408385031215613b4b57600080fd5b6000613b5985828601613695565b9250506020613b6a85828601613695565b9150509250929050565b600080600060608486031215613b8957600080fd5b6000613b9786828701613695565b9350506020613ba886828701613695565b9250506040613bb986828701613695565b9150509250925092565b6000613bcf8383613c02565b60208301905092915050565b6000613be78383613eac565b60208301905092915050565b613bfc816145fa565b82525050565b613c0b8161458d565b82525050565b613c1a8161458d565b82525050565b6000613c2b82614503565b613c35818561453e565b9350613c40836144e3565b8060005b83811015613c71578151613c588882613bc3565b9750613c6383614524565b925050600181019050613c44565b5085935050505092915050565b6000613c898261450e565b613c93818561454f565b9350613c9e836144f3565b8060005b83811015613ccf578151613cb68882613bdb565b9750613cc183614531565b925050600181019050613ca2565b5085935050505092915050565b613ce58161459f565b82525050565b613cf4816145ab565b82525050565b6000613d0582614519565b613d0f8185614560565b9350613d1f818560208601614687565b613d28816146bc565b840191505092915050565b613d3c8161460c565b82525050565b613d4b81614630565b82525050565b613d5a81614642565b82525050565b6000613d6d60418361457c565b91507f4465756e6966693a20426f7567687420636f6c6c61746572616c206c6f77657260008301527f207468616e20657870656374656420636f6c6c61746572616c20746f2062757960208301527f2e000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000613df9602d8361457c565b91507f4465756e6966693a2052656d61696e696e6720746f6b656e206c6f776572207460008301527f68616e2065787065637465642e000000000000000000000000000000000000006020830152604082019050919050565b6000613e5f600083614571565b9150600082019050919050565b6000613e79601b8361457c565b91507f4465756e6966693a20496e76616c6964206f7065726174696f6e2e00000000006000830152602082019050919050565b613eb5816145e3565b82525050565b613ec4816145e3565b82525050565b613ed3816145ed565b82525050565b6000613ee482613e52565b9150819050919050565b6000602082019050613f036000830184613c11565b92915050565b6000604082019050613f1e6000830185613bf3565b613f2b6020830184613c11565b9392505050565b6000604082019050613f476000830185613bf3565b613f546020830184613ebb565b9392505050565b600061010082019050613f71600083018b613c11565b613f7e602083018a613c11565b613f8b6040830189613c11565b613f986060830188613c11565b613fa56080830187613ebb565b613fb260a0830186613ebb565b613fbf60c0830185613ebb565b613fcc60e0830184613cdc565b9998505050505050505050565b600060c082019050613fee6000830189613c11565b613ffb6020830188613c11565b6140086040830187613c11565b6140156060830186613ebb565b6140226080830185613ebb565b61402f60a0830184613ebb565b979650505050505050565b600060608201905061404f6000830186613c11565b61405c6020830185613c11565b6140696040830184613ebb565b949350505050565b600060e082019050614086600083018a613c11565b6140936020830189613c11565b6140a06040830188613ebb565b6140ad6060830187613d51565b6140ba6080830186613d51565b6140c760a0830185613bf3565b6140d460c0830184613ebb565b98975050505050505050565b6000610100820190506140f6600083018b613c11565b614103602083018a613c11565b6141106040830189613ebb565b61411d6060830188613ebb565b61412a6080830187613d51565b61413760a0830186613d51565b61414460c0830185613bf3565b61415160e0830184613ebb565b9998505050505050505050565b600060e082019050614173600083018a613c11565b81810360208301526141858189613c20565b905081810360408301526141998188613c7e565b905081810360608301526141ad8187613c7e565b90506141bc6080830186613c11565b81810360a08301526141ce8185613cfa565b90506141dd60c0830184613d42565b98975050505050505050565b60006040820190506141fe6000830185613c11565b81810360208301526142108184613cfa565b90509392505050565b600060808201905061422e6000830187613c11565b61423b6020830186613ebb565b6142486040830185613ebb565b6142556060830184613ebb565b95945050505050565b60006020820190506142736000830184613cdc565b92915050565b600060208201905061428e6000830184613ceb565b92915050565b60006080820190506142a96000830187613d33565b6142b66020830186613c11565b6142c36040830185613ebb565b81810360608301526142d58184613cfa565b905095945050505050565b600060208201905081810360008301526142f981613d60565b9050919050565b6000602082019050818103600083015261431981613dec565b9050919050565b6000602082019050818103600083015261433981613e6c565b9050919050565b60006020820190506143556000830184613ebb565b92915050565b600060a0820190506143706000830188613ebb565b61437d6020830187613d51565b818103604083015261438f8186613c20565b905061439e6060830185613bf3565b6143ab6080830184613ebb565b9695505050505050565b600060a0820190506143ca6000830188613ebb565b6143d76020830187613ebb565b81810360408301526143e98186613c20565b90506143f86060830185613bf3565b6144056080830184613ebb565b9695505050505050565b60006020820190506144246000830184613eca565b92915050565b6000604051905081810181811067ffffffffffffffff82111715614451576144506146ba565b5b8060405250919050565b600067ffffffffffffffff821115614476576144756146ba565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156144a2576144a16146ba565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156144ce576144cd6146ba565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000614598826145c3565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061460582614654565b9050919050565b60006146178261461e565b9050919050565b6000614629826145c3565b9050919050565b600061463b826145b5565b9050919050565b600061464d826145e3565b9050919050565b600061465f82614666565b9050919050565b6000614671826145c3565b9050919050565b82818337600083830152505050565b60005b838110156146a557808201518184015260208101905061468a565b838111156146b4576000848401525b50505050565bfe5b6000601f19601f8301169050919050565b6146d68161458d565b81146146e157600080fd5b50565b6146ed8161459f565b81146146f857600080fd5b50565b614704816145e3565b811461470f57600080fd5b50565b61471b816145ed565b811461472657600080fd5b5056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220045b3409c5e4944faff309853e32c93901e7b02ed34dce255d290d3a83440fac64736f6c63430007060033",
  "deployedBytecode": "0x6080604052600436106100955760003560e01c80638da5cb5b116100595780638da5cb5b1461016b578063920f5c8414610196578063aecfd7ae146101d3578063d0fb0203146101ef578063f2fde38b1461021a57610096565b806308a427971461009857806323e30c8b146100c3578063472d35b914610100578063715018a6146101295780638348d0341461014057610096565b5b005b3480156100a457600080fd5b506100ad610243565b6040516100ba919061440f565b60405180910390f35b3480156100cf57600080fd5b506100ea60048036038101906100e59190613868565b610248565b6040516100f79190614279565b60405180910390f35b34801561010c57600080fd5b50610127600480360381019061012291906136bf565b610310565b005b34801561013557600080fd5b5061013e610403565b005b34801561014c57600080fd5b50610155610570565b604051610162919061440f565b60405180910390f35b34801561017757600080fd5b50610180610575565b60405161018d9190613eee565b60405180910390f35b3480156101a257600080fd5b506101bd60048036038101906101b891906138fa565b61059e565b6040516101ca919061425e565b60405180910390f35b6101ed60048036038101906101e891906136e8565b61064a565b005b3480156101fb57600080fd5b5061020461097c565b6040516102119190613eee565b60405180910390f35b34801561022657600080fd5b50610241600480360381019061023c91906136bf565b6109a2565b005b600281565b600080838381019061025a9190613a8d565b9050600160ff16816000015160ff1614156102815761027c8160200151610b94565b6102e2565b600260ff16816000015160ff1614156102a6576102a1816020015161107e565b6102e1565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d890614320565b60405180910390fd5b5b7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd99150509695505050505050565b6103186118ed565b73ffffffffffffffffffffffffffffffffffffffff16610336610575565b73ffffffffffffffffffffffffffffffffffffffff16146103bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61040b6118ed565b73ffffffffffffffffffffffffffffffffffffffff16610429610575565b73ffffffffffffffffffffffffffffffffffffffff16146104b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600181565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008083838101906105b09190613a8d565b9050600160ff16816000015160ff1614156105d7576105d28160200151610b94565b610638565b600260ff16816000015160ff1614156105fc576105f7816020015161107e565b610637565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062e90614320565b60405180910390fd5b5b60019150509998505050505050505050565b60003411156106e0578173ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561069b57600080fd5b505af11580156106af573d6000803e3d6000fd5b50505050506106df8a348473ffffffffffffffffffffffffffffffffffffffff166118f59092919063ffffffff16565b5b3073ffffffffffffffffffffffffffffffffffffffff166313af40358b6040518263ffffffff1660e01b81526004016107199190613eee565b600060405180830381600087803b15801561073357600080fd5b505af1158015610747573d6000803e3d6000fd5b5050505060005b89518110156107c5576107aa8c8c8b848151811061076857fe5b60200260200101518d858151811061077c57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16611997909392919063ffffffff16565b6107be600182611a5890919063ffffffff16565b905061074e565b508015610849578673ffffffffffffffffffffffffffffffffffffffff1663ab9c4b5d8b8888888f8960006040518863ffffffff1660e01b8152600401610812979695949392919061415e565b600060405180830381600087803b15801561082c57600080fd5b505af1158015610840573d6000803e3d6000fd5b50505050610904565b8673ffffffffffffffffffffffffffffffffffffffff16635cffe9de8b8860008151811061087357fe5b60200260200101518860008151811061088857fe5b6020026020010151876040518563ffffffff1660e01b81526004016108b09493929190614294565b602060405180830381600087803b1580156108ca57600080fd5b505af11580156108de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109029190613a23565b505b3073ffffffffffffffffffffffffffffffffffffffff166313af40358c6040518263ffffffff1660e01b815260040161093d9190613eee565b600060405180830381600087803b15801561095757600080fd5b505af115801561096b573d6000803e3d6000fd5b505050505050505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6109aa6118ed565b73ffffffffffffffffffffffffffffffffffffffff166109c8610575565b73ffffffffffffffffffffffffffffffffffffffff1614610a51576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ad7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061472a6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081806020019051810190610baa9190613ace565b90506000806000610bba84611ae0565b925092509250836101800151831015610c08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bff90614300565b60405180910390fd5b836101a00151821015610c50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4790614300565b60405180910390fd5b610c858460200151600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660400151611cfa565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d7957600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663651b8cb68560000151866020015187604001516040518463ffffffff1660e01b8152600401610d469392919061403a565b600060405180830381600087803b158015610d6057600080fd5b505af1158015610d74573d6000803e3d6000fd5b505050505b600073ffffffffffffffffffffffffffffffffffffffff16846102c0015173ffffffffffffffffffffffffffffffffffffffff1614610f27576000846102c0015173ffffffffffffffffffffffffffffffffffffffff16856060015173ffffffffffffffffffffffffffffffffffffffff161415610df957839050600093505b846102c0015173ffffffffffffffffffffffffffffffffffffffff16856080015173ffffffffffffffffffffffffffffffffffffffff161415610e3e57829050600092505b6000811115610f2557846102c0015173ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b8152600401610e859190614340565b600060405180830381600087803b158015610e9f57600080fd5b505af1158015610eb3573d6000803e3d6000fd5b50505050846000015173ffffffffffffffffffffffffffffffffffffffff1681604051610edf90613ed9565b60006040518083038185875af1925050503d8060008114610f1c576040519150601f19603f3d011682016040523d82523d6000602084013e610f21565b606091505b5050505b505b6000831180610f3b57506000846101800151115b15610f7457610f73846000015184866060015173ffffffffffffffffffffffffffffffffffffffff166118f59092919063ffffffff16565b5b6000821180610f8857506000846101a00151115b15610fc157610fc0846000015183866080015173ffffffffffffffffffffffffffffffffffffffff166118f59092919063ffffffff16565b5b6000811115610ffe57610ffd8460000151828660a0015173ffffffffffffffffffffffffffffffffffffffff166118f59092919063ffffffff16565b5b611029846020015185610380015161102460028860400151611deb90919063ffffffff16565b611cfa565b7fac0cbef1a8ac246924422e9ff961ee097263dc73ccb13c5780e2d048c6e228c584600001518561028001518660c00151876040015160405161106f9493929190614219565b60405180910390a15050505050565b6000818060200190518101906110949190613a4c565b90506110d18160e0015151826101800151518360200151846040015185606001518660a00151876101400151886101000151896101a00151611e71565b6000806000808460a00151111561127f57836080015173ffffffffffffffffffffffffffffffffffffffff16846020015173ffffffffffffffffffffffffffffffffffffffff16141561112a578360a00151925061127b565b836101000151156111b2578360c001519250836060015173ffffffffffffffffffffffffffffffffffffffff16638d7ef9bb30856040518363ffffffff1660e01b815260040161117b929190613f32565b600060405180830381600087803b15801561119557600080fd5b505af11580156111a9573d6000803e3d6000fd5b5050505061127a565b836040015173ffffffffffffffffffffffffffffffffffffffff166338ed17398560a0015160008760e00151308961038001516040518663ffffffff1660e01b815260040161120595949392919061435b565b600060405180830381600087803b15801561121f57600080fd5b505af1158015611233573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061125c91906139e2565b60018560e0015151038151811061126f57fe5b602002602001015192505b5b8290505b6000846101400151111561142d5783610120015173ffffffffffffffffffffffffffffffffffffffff16846020015173ffffffffffffffffffffffffffffffffffffffff1614156112d757836101400151915061142c565b836101a0015115611360578361016001519150836060015173ffffffffffffffffffffffffffffffffffffffff16638d7ef9bb30846040518363ffffffff1660e01b8152600401611329929190613f32565b600060405180830381600087803b15801561134357600080fd5b505af1158015611357573d6000803e3d6000fd5b5050505061142b565b836040015173ffffffffffffffffffffffffffffffffffffffff166338ed17398561014001516000876101800151308961038001516040518663ffffffff1660e01b81526004016113b595949392919061435b565b600060405180830381600087803b1580156113cf57600080fd5b505af11580156113e3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061140c91906139e2565b600185610180015151038151811061142057fe5b602002602001015191505b5b5b600061144783866101e00151611a5890919063ffffffff16565b11156116ad576114778460800151856040015161147286886101c00151611a5890919063ffffffff16565b611cfa565b6114a2846101200151856040015161149d85886101e00151611a5890919063ffffffff16565b611cfa565b6000806000866040015173ffffffffffffffffffffffffffffffffffffffff1663e8e3370088608001518961012001516114ea8a8c6101c00151611a5890919063ffffffff16565b6115028a8d6101e00151611a5890919063ffffffff16565b600080308f61038001516040518963ffffffff1660e01b815260040161152f9897969594939291906140e0565b606060405180830381600087803b15801561154957600080fd5b505af115801561155d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115819190613b74565b92509250925080935060006115b6846115a8898b6101c00151611a5890919063ffffffff16565b611f2b90919063ffffffff16565b11156116195761161887600001516115ee856115e08a8c6101c00151611a5890919063ffffffff16565b611f2b90919063ffffffff16565b896080015173ffffffffffffffffffffffffffffffffffffffff166118f59092919063ffffffff16565b5b600061164583611637888b6101e00151611a5890919063ffffffff16565b611f2b90919063ffffffff16565b11156116a9576116a8876000015161167d8461166f898c6101e00151611a5890919063ffffffff16565b611f2b90919063ffffffff16565b89610120015173ffffffffffffffffffffffffffffffffffffffff166118f59092919063ffffffff16565b5b5050505b8361020001518110156116f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ec906142e0565b60405180910390fd5b600061170f82866102200151611a5890919063ffffffff16565b9050611756856102400151866102600151876102800151886102a00151896102c001518a6102e001518b61030001518c6103200151898e61034001518f6103600151611fae565b61178c8560200151600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876103400151611cfa565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461188157600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663651b8cb6866000015187602001518861034001516040518463ffffffff1660e01b815260040161184e9392919061403a565b600060405180830381600087803b15801561186857600080fd5b505af115801561187c573d6000803e3d6000fd5b505050505b61189a8560200151866103a00151876103400151611cfa565b7f992628f13bc2e3ecd138e194a77dfb9fb7a85e5cb3823b6d5f1030f3dc5fc2b48560000151866103200151838861034001516040516118dd9493929190614219565b60405180910390a1505050505050565b600033905090565b6119928363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506120ce565b505050565b611a52846323b872dd60e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506120ce565b50505050565b600080828401905083811015611ad6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6000806000836040015150611b26846101e001518561020001518661022001518761024001518861026001518961028001518a60c001518b604001518c602001516121bd565b600080611c8c604051806102200160405280886102a0015173ffffffffffffffffffffffffffffffffffffffff168152602001886060015173ffffffffffffffffffffffffffffffffffffffff168152602001886080015173ffffffffffffffffffffffffffffffffffffffff1681526020018860a0015173ffffffffffffffffffffffffffffffffffffffff1681526020018860e0015181526020018861018001518152602001886101a001518152602001886101c0015181526020018861010001518152602001886101200151815260200188610140015181526020018861016001518152602001886102e0015173ffffffffffffffffffffffffffffffffffffffff16815260200188610300015173ffffffffffffffffffffffffffffffffffffffff16815260200188610320015173ffffffffffffffffffffffffffffffffffffffff16815260200188610340015181526020018861036001518152506122d7565b9150915060008073ffffffffffffffffffffffffffffffffffffffff168760a0015173ffffffffffffffffffffffffffffffffffffffff1614611ce757611ce48760e001518860c00151611f2b90919063ffffffff16565b90505b8282829550955095505050509193909250565b808373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401611d36929190613f09565b60206040518083038186803b158015611d4e57600080fd5b505afa158015611d62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d869190613b0f565b1015611de657611db88260008573ffffffffffffffffffffffffffffffffffffffff166128289092919063ffffffff16565b611de5826000198573ffffffffffffffffffffffffffffffffffffffff166128289092919063ffffffff16565b5b505050565b600080831415611dfe5760009050611e6b565b6000828402905082848281611e0f57fe5b0414611e66576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806147766021913960400191505060405180910390fd5b809150505b92915050565b60008060008b1115611eb4578315611e9d57611e968682611a5890919063ffffffff16565b9050611eb3565b611eb08683611a5890919063ffffffff16565b91505b5b60008a1115611ef4578215611edd57611ed68582611a5890919063ffffffff16565b9050611ef3565b611ef08583611a5890919063ffffffff16565b91505b5b6000821115611f0957611f08898984611cfa565b5b6000811115611f1e57611f1d898883611cfa565b5b5050505050505050505050565b600082821115611fa3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b611fb98b8b85611cfa565b8973ffffffffffffffffffffffffffffffffffffffff16631cff79cd8a8a8a8a8a8a8a8a8a604051602401611ff5989796959493929190613f5b565b6040516020818303038152906040527fcbd4be3f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b815260040161208f9291906141e9565b600060405180830381600087803b1580156120a957600080fd5b505af11580156120bd573d6000803e3d6000fd5b505050505050505050505050505050565b6000612130826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166129ed9092919063ffffffff16565b90506000815111156121b85780806020019051602081101561215157600080fd5b81019080805190602001909291905050506121b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180614797602a913960400191505060405180910390fd5b5b505050565b6121c8818a84611cfa565b8873ffffffffffffffffffffffffffffffffffffffff16631cff79cd8989898989898960405160240161220096959493929190613fd9565b6040516020818303038152906040527fa6add011000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b815260040161229a9291906141e9565b600060405180830381600087803b1580156122b457600080fd5b505af11580156122c8573d6000803e3d6000fd5b50505050505050505050505050565b600080600080600080600073ffffffffffffffffffffffffffffffffffffffff16876040015173ffffffffffffffffffffffffffffffffffffffff16146125ea5761232f876060015188600001518960800151611cfa565b866000015173ffffffffffffffffffffffffffffffffffffffff1663baa2abde886020015189604001518a60800151600080308e60e001516040518863ffffffff1660e01b81526004016123899796959493929190614071565b6040805180830381600087803b1580156123a257600080fd5b505af11580156123b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123da9190613b38565b8094508195505050600087610120015111156125e557600087610160015151141561240c5786610120015190506125e4565b866040015173ffffffffffffffffffffffffffffffffffffffff1687610180015173ffffffffffffffffffffffffffffffffffffffff1614156124e6576124628760400151886101a00151896101e00151611cfa565b866101c0015173ffffffffffffffffffffffffffffffffffffffff16639599127630896101e001516040518363ffffffff1660e01b81526004016124a7929190613f32565b600060405180830381600087803b1580156124c157600080fd5b505af11580156124d5573d6000803e3d6000fd5b50505050866101e0015190506125e3565b61250c87604001518860000151612507600287611deb90919063ffffffff16565b611cfa565b866000015173ffffffffffffffffffffffffffffffffffffffff16638803dbee8861012001516125498a60c0015187611f2b90919063ffffffff16565b8a6101600151308c60e001516040518663ffffffff1660e01b81526004016125759594939291906143b5565b600060405180830381600087803b15801561258f57600080fd5b505af11580156125a3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906125cc91906139e2565b6000815181106125d857fe5b602002602001015190505b5b5b6125f2565b866080015193505b600087610100015111156127f557600087610140015151141561261c5786610100015191506127f4565b866020015173ffffffffffffffffffffffffffffffffffffffff1687610180015173ffffffffffffffffffffffffffffffffffffffff1614156126f6576126728760200151886101a00151896101e00151611cfa565b866101c0015173ffffffffffffffffffffffffffffffffffffffff16639599127630896101e001516040518363ffffffff1660e01b81526004016126b7929190613f32565b600060405180830381600087803b1580156126d157600080fd5b505af11580156126e5573d6000803e3d6000fd5b50505050866101e0015191506127f3565b61271c87602001518860000151612717600288611deb90919063ffffffff16565b611cfa565b866000015173ffffffffffffffffffffffffffffffffffffffff16638803dbee8861010001516127598a60a0015188611f2b90919063ffffffff16565b8a6101400151308c60e001516040518663ffffffff1660e01b81526004016127859594939291906143b5565b600060405180830381600087803b15801561279f57600080fd5b505af11580156127b3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906127dc91906139e2565b6000815181106127e857fe5b602002602001015191505b5b5b6128088285611f2b90919063ffffffff16565b61281b8285611f2b90919063ffffffff16565b9550955050505050915091565b60008114806128f6575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b1580156128b957600080fd5b505afa1580156128cd573d6000803e3d6000fd5b505050506040513d60208110156128e357600080fd5b8101908080519060200190929190505050145b61294b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806147c16036913960400191505060405180910390fd5b6129e88363095ea7b360e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506120ce565b505050565b60606129fc8484600085612a05565b90509392505050565b606082471015612a60576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806147506026913960400191505060405180910390fd5b612a6985612bad565b612adb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310612b2a5780518252602082019150602081019050602083039250612b07565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612b8c576040519150601f19603f3d011682016040523d82523d6000602084013e612b91565b606091505b5091509150612ba1828286612bc0565b92505050949350505050565b600080823b905060008111915050919050565b60608315612bd057829050612c85565b600083511115612be35782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612c4a578082015181840152602081019050612c2f565b50505050905090810190601f168015612c775780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b6000612c9f612c9a8461445b565b61442a565b90508083825260208201905082856020860282011115612cbe57600080fd5b60005b85811015612cee5781612cd48882612e7a565b845260208401935060208301925050600181019050612cc1565b5050509392505050565b6000612d0b612d068461445b565b61442a565b90508083825260208201905082856020860282011115612d2a57600080fd5b60005b85811015612d5a5781612d408882612e8f565b845260208401935060208301925050600181019050612d2d565b5050509392505050565b6000612d77612d7284614487565b61442a565b90508083825260208201905082856020860282011115612d9657600080fd5b60005b85811015612dc65781612dac8882613680565b845260208401935060208301925050600181019050612d99565b5050509392505050565b6000612de3612dde84614487565b61442a565b90508083825260208201905082856020860282011115612e0257600080fd5b60005b85811015612e325781612e188882613695565b845260208401935060208301925050600181019050612e05565b5050509392505050565b6000612e4f612e4a846144b3565b61442a565b905082815260208101848484011115612e6757600080fd5b612e72848285614678565b509392505050565b600081359050612e89816146cd565b92915050565b600081519050612e9e816146cd565b92915050565b60008083601f840112612eb657600080fd5b8235905067ffffffffffffffff811115612ecf57600080fd5b602083019150836020820283011115612ee757600080fd5b9250929050565b600082601f830112612eff57600080fd5b8135612f0f848260208601612c8c565b91505092915050565b600082601f830112612f2957600080fd5b8151612f39848260208601612cf8565b91505092915050565b60008083601f840112612f5457600080fd5b8235905067ffffffffffffffff811115612f6d57600080fd5b602083019150836020820283011115612f8557600080fd5b9250929050565b600082601f830112612f9d57600080fd5b8135612fad848260208601612d64565b91505092915050565b600082601f830112612fc757600080fd5b8151612fd7848260208601612dd0565b91505092915050565b600081359050612fef816146e4565b92915050565b600081519050613004816146e4565b92915050565b60008083601f84011261301c57600080fd5b8235905067ffffffffffffffff81111561303557600080fd5b60208301915083600182028301111561304d57600080fd5b9250929050565b600082601f83011261306557600080fd5b8135613075848260208601612e3c565b91505092915050565b60006103c0828403121561309157600080fd5b61309c6103c061442a565b905060006130ac84828501612e8f565b60008301525060206130c084828501612e8f565b60208301525060406130d484828501612e8f565b60408301525060606130e884828501612e8f565b60608301525060806130fc84828501612e8f565b60808301525060a061311084828501613695565b60a08301525060c061312484828501613695565b60c08301525060e082015167ffffffffffffffff81111561314457600080fd5b61315084828501612f18565b60e08301525061010061316584828501612ff5565b6101008301525061012061317b84828501612e8f565b6101208301525061014061319184828501613695565b610140830152506101606131a784828501613695565b6101608301525061018082015167ffffffffffffffff8111156131c957600080fd5b6131d584828501612f18565b610180830152506101a06131eb84828501612ff5565b6101a0830152506101c061320184828501613695565b6101c0830152506101e061321784828501613695565b6101e08301525061020061322d84828501613695565b6102008301525061022061324384828501613695565b6102208301525061024061325984828501612e8f565b6102408301525061026061326f84828501612e8f565b6102608301525061028061328584828501612e8f565b610280830152506102a061329b84828501612e8f565b6102a0830152506102c06132b184828501612e8f565b6102c0830152506102e06132c784828501612e8f565b6102e0830152506103006132dd84828501612e8f565b610300830152506103206132f384828501613695565b6103208301525061034061330984828501613695565b6103408301525061036061331f84828501612ff5565b6103608301525061038061333584828501613695565b610380830152506103a061334b84828501612e8f565b6103a08301525092915050565b60006040828403121561336a57600080fd5b613374604061442a565b90506000613384848285016136aa565b600083015250602082013567ffffffffffffffff8111156133a457600080fd5b6133b084828501613054565b60208301525092915050565b60006103a082840312156133cf57600080fd5b6133da6103a061442a565b905060006133ea84828501612e8f565b60008301525060206133fe84828501612e8f565b602083015250604061341284828501613695565b604083015250606061342684828501612e8f565b606083015250608061343a84828501612e8f565b60808301525060a061344e84828501612e8f565b60a08301525060c061346284828501613695565b60c08301525060e061347684828501613695565b60e08301525061010061348b84828501613695565b610100830152506101206134a184828501613695565b6101208301525061014082015167ffffffffffffffff8111156134c357600080fd5b6134cf84828501612f18565b6101408301525061016082015167ffffffffffffffff8111156134f157600080fd5b6134fd84828501612f18565b6101608301525061018061351384828501613695565b610180830152506101a061352984828501613695565b6101a0830152506101c061353f84828501613695565b6101c0830152506101e061355584828501612e8f565b6101e08301525061020061356b84828501612e8f565b6102008301525061022061358184828501612e8f565b6102208301525061024061359784828501612e8f565b610240830152506102606135ad84828501612e8f565b610260830152506102806135c384828501613695565b610280830152506102a06135d984828501612e8f565b6102a0830152506102c06135ef84828501612e8f565b6102c0830152506102e061360584828501612e8f565b6102e08301525061030061361b84828501612e8f565b6103008301525061032061363184828501612e8f565b6103208301525061034061364784828501613695565b6103408301525061036061365d84828501613695565b6103608301525061038061367384828501612e8f565b6103808301525092915050565b60008135905061368f816146fb565b92915050565b6000815190506136a4816146fb565b92915050565b6000813590506136b981614712565b92915050565b6000602082840312156136d157600080fd5b60006136df84828501612e7a565b91505092915050565b60008060008060008060008060008060006101608c8e03121561370a57600080fd5b60006137188e828f01612e7a565b9b505060206137298e828f01612e7a565b9a505060408c013567ffffffffffffffff81111561374657600080fd5b6137528e828f01612eee565b99505060608c013567ffffffffffffffff81111561376f57600080fd5b61377b8e828f01612f8c565b985050608061378c8e828f01612e7a565b97505060a08c013567ffffffffffffffff8111156137a957600080fd5b6137b58e828f01612eee565b96505060c08c013567ffffffffffffffff8111156137d257600080fd5b6137de8e828f01612f8c565b95505060e08c013567ffffffffffffffff8111156137fb57600080fd5b6138078e828f01612f8c565b9450506101008c013567ffffffffffffffff81111561382557600080fd5b6138318e828f01613054565b9350506101206138438e828f01612e7a565b9250506101406138558e828f01612fe0565b9150509295989b509295989b9093969950565b60008060008060008060a0878903121561388157600080fd5b600061388f89828a01612e7a565b96505060206138a089828a01612e7a565b95505060406138b189828a01613680565b94505060606138c289828a01613680565b935050608087013567ffffffffffffffff8111156138df57600080fd5b6138eb89828a0161300a565b92509250509295509295509295565b600080600080600080600080600060a08a8c03121561391857600080fd5b60008a013567ffffffffffffffff81111561393257600080fd5b61393e8c828d01612ea4565b995099505060208a013567ffffffffffffffff81111561395d57600080fd5b6139698c828d01612f42565b975097505060408a013567ffffffffffffffff81111561398857600080fd5b6139948c828d01612f42565b955095505060606139a78c828d01612e7a565b93505060808a013567ffffffffffffffff8111156139c457600080fd5b6139d08c828d0161300a565b92509250509295985092959850929598565b6000602082840312156139f457600080fd5b600082015167ffffffffffffffff811115613a0e57600080fd5b613a1a84828501612fb6565b91505092915050565b600060208284031215613a3557600080fd5b6000613a4384828501612ff5565b91505092915050565b600060208284031215613a5e57600080fd5b600082015167ffffffffffffffff811115613a7857600080fd5b613a848482850161307e565b91505092915050565b600060208284031215613a9f57600080fd5b600082013567ffffffffffffffff811115613ab957600080fd5b613ac584828501613358565b91505092915050565b600060208284031215613ae057600080fd5b600082015167ffffffffffffffff811115613afa57600080fd5b613b06848285016133bc565b91505092915050565b600060208284031215613b2157600080fd5b6000613b2f84828501613695565b91505092915050565b60008060408385031215613b4b57600080fd5b6000613b5985828601613695565b9250506020613b6a85828601613695565b9150509250929050565b600080600060608486031215613b8957600080fd5b6000613b9786828701613695565b9350506020613ba886828701613695565b9250506040613bb986828701613695565b9150509250925092565b6000613bcf8383613c02565b60208301905092915050565b6000613be78383613eac565b60208301905092915050565b613bfc816145fa565b82525050565b613c0b8161458d565b82525050565b613c1a8161458d565b82525050565b6000613c2b82614503565b613c35818561453e565b9350613c40836144e3565b8060005b83811015613c71578151613c588882613bc3565b9750613c6383614524565b925050600181019050613c44565b5085935050505092915050565b6000613c898261450e565b613c93818561454f565b9350613c9e836144f3565b8060005b83811015613ccf578151613cb68882613bdb565b9750613cc183614531565b925050600181019050613ca2565b5085935050505092915050565b613ce58161459f565b82525050565b613cf4816145ab565b82525050565b6000613d0582614519565b613d0f8185614560565b9350613d1f818560208601614687565b613d28816146bc565b840191505092915050565b613d3c8161460c565b82525050565b613d4b81614630565b82525050565b613d5a81614642565b82525050565b6000613d6d60418361457c565b91507f4465756e6966693a20426f7567687420636f6c6c61746572616c206c6f77657260008301527f207468616e20657870656374656420636f6c6c61746572616c20746f2062757960208301527f2e000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000613df9602d8361457c565b91507f4465756e6966693a2052656d61696e696e6720746f6b656e206c6f776572207460008301527f68616e2065787065637465642e000000000000000000000000000000000000006020830152604082019050919050565b6000613e5f600083614571565b9150600082019050919050565b6000613e79601b8361457c565b91507f4465756e6966693a20496e76616c6964206f7065726174696f6e2e00000000006000830152602082019050919050565b613eb5816145e3565b82525050565b613ec4816145e3565b82525050565b613ed3816145ed565b82525050565b6000613ee482613e52565b9150819050919050565b6000602082019050613f036000830184613c11565b92915050565b6000604082019050613f1e6000830185613bf3565b613f2b6020830184613c11565b9392505050565b6000604082019050613f476000830185613bf3565b613f546020830184613ebb565b9392505050565b600061010082019050613f71600083018b613c11565b613f7e602083018a613c11565b613f8b6040830189613c11565b613f986060830188613c11565b613fa56080830187613ebb565b613fb260a0830186613ebb565b613fbf60c0830185613ebb565b613fcc60e0830184613cdc565b9998505050505050505050565b600060c082019050613fee6000830189613c11565b613ffb6020830188613c11565b6140086040830187613c11565b6140156060830186613ebb565b6140226080830185613ebb565b61402f60a0830184613ebb565b979650505050505050565b600060608201905061404f6000830186613c11565b61405c6020830185613c11565b6140696040830184613ebb565b949350505050565b600060e082019050614086600083018a613c11565b6140936020830189613c11565b6140a06040830188613ebb565b6140ad6060830187613d51565b6140ba6080830186613d51565b6140c760a0830185613bf3565b6140d460c0830184613ebb565b98975050505050505050565b6000610100820190506140f6600083018b613c11565b614103602083018a613c11565b6141106040830189613ebb565b61411d6060830188613ebb565b61412a6080830187613d51565b61413760a0830186613d51565b61414460c0830185613bf3565b61415160e0830184613ebb565b9998505050505050505050565b600060e082019050614173600083018a613c11565b81810360208301526141858189613c20565b905081810360408301526141998188613c7e565b905081810360608301526141ad8187613c7e565b90506141bc6080830186613c11565b81810360a08301526141ce8185613cfa565b90506141dd60c0830184613d42565b98975050505050505050565b60006040820190506141fe6000830185613c11565b81810360208301526142108184613cfa565b90509392505050565b600060808201905061422e6000830187613c11565b61423b6020830186613ebb565b6142486040830185613ebb565b6142556060830184613ebb565b95945050505050565b60006020820190506142736000830184613cdc565b92915050565b600060208201905061428e6000830184613ceb565b92915050565b60006080820190506142a96000830187613d33565b6142b66020830186613c11565b6142c36040830185613ebb565b81810360608301526142d58184613cfa565b905095945050505050565b600060208201905081810360008301526142f981613d60565b9050919050565b6000602082019050818103600083015261431981613dec565b9050919050565b6000602082019050818103600083015261433981613e6c565b9050919050565b60006020820190506143556000830184613ebb565b92915050565b600060a0820190506143706000830188613ebb565b61437d6020830187613d51565b818103604083015261438f8186613c20565b905061439e6060830185613bf3565b6143ab6080830184613ebb565b9695505050505050565b600060a0820190506143ca6000830188613ebb565b6143d76020830187613ebb565b81810360408301526143e98186613c20565b90506143f86060830185613bf3565b6144056080830184613ebb565b9695505050505050565b60006020820190506144246000830184613eca565b92915050565b6000604051905081810181811067ffffffffffffffff82111715614451576144506146ba565b5b8060405250919050565b600067ffffffffffffffff821115614476576144756146ba565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156144a2576144a16146ba565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156144ce576144cd6146ba565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000614598826145c3565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061460582614654565b9050919050565b60006146178261461e565b9050919050565b6000614629826145c3565b9050919050565b600061463b826145b5565b9050919050565b600061464d826145e3565b9050919050565b600061465f82614666565b9050919050565b6000614671826145c3565b9050919050565b82818337600083830152505050565b60005b838110156146a557808201518184015260208101905061468a565b838111156146b4576000848401525b50505050565bfe5b6000601f19601f8301169050919050565b6146d68161458d565b81146146e157600080fd5b50565b6146ed8161459f565b81146146f857600080fd5b50565b614704816145e3565b811461470f57600080fd5b50565b61471b816145ed565b811461472657600080fd5b5056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220045b3409c5e4944faff309853e32c93901e7b02ed34dce255d290d3a83440fac64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "flashLoanFromDSProxy(address,address,address[],uint256[],address,address[],uint256[],uint256[],bytes,address,bool)": {
        "notice": "Executed as DSProxy."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Deunifi.sol:Deunifi",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1825,
        "contract": "contracts/Deunifi.sol:Deunifi",
        "label": "feeManager",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}