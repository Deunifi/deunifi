{
  "address": "0x36C02dA8a0983159322a80FFE9F24b1acfF8B570",
  "abi": [],
  "transactionHash": "0x73b0e89a466c29389a60896effab6c2009993b813fb3eb44de9e9e60d5f186d5",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x36C02dA8a0983159322a80FFE9F24b1acfF8B570",
    "transactionIndex": 0,
    "gasUsed": "1218325",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x2ab3f38e3fff0c190510ba972f9f25654b7d2d515b0e3d065503dcdf28284672",
    "transactionHash": "0x73b0e89a466c29389a60896effab6c2009993b813fb3eb44de9e9e60d5f186d5",
    "logs": [],
    "blockNumber": 12195145,
    "cumulativeGasUsed": "1218325",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f134c5fc75567cf403028d66522cb121",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"swapCollateralForTokens(UnifiLibrary.SwapCollateralForTokensParameters)\":{\"notice\":\"Preconditions: - this should have enough amountToUseToPayDebt,  tokenA for debtToCoverWithTokenA and  tokenb for debtToCoverWithTokenB and  - pair(tokenA, tokenB).allowance(this, router02) >= amountToUseToPayDebt. - tokenA.allowance(this, router02) >= (debtToCoverWithTokenA in token A) - tokenB.allowance(this, router02) >= (debtToCoverWithTokenB in token B) - All addresses should correspond with the expected contracts. - pair(tokenA, tokenB) should be a valid Uniswap V2 pair.\"},\"wipeAndFreeGem(address,address,address,address,address,uint256,uint256,uint256,address)\":{\"notice\":\"Preconditions: - this should have enough `wadD` DAI. - DAI.allowance(this, daiJoin) >= wadD - All addresses should correspond with the expected contracts.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UnifiLibrary.sol\":\"UnifiLibrary\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/UnifiLibrary.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { IUniswapV2Router02 } from '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\nimport { IUniswapV2Pair } from '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nuint256 constant UINT256_MAX = ~uint256(0);\\n\\ninterface IDSProxy{\\n\\n    function execute(address _target, bytes calldata _data)\\n        external\\n        payable;\\n\\n}\\n\\nlibrary UnifiLibrary {\\n\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n    Preconditions:\\n    - this should have enough `wadD` DAI.\\n    - DAI.allowance(this, daiJoin) >= wadD\\n    - All addresses should correspond with the expected contracts.\\n    */\\n    function wipeAndFreeGem(\\n        address dsProxy,\\n        address dsProxyActions,\\n        address manager,\\n        address gemJoin,\\n        address daiJoin,\\n        uint256 cdp,\\n        uint256 wadC,\\n        uint256 wadD,\\n        address daiToken\\n    ) external {\\n\\n        IERC20(daiToken).safeApprove(daiJoin, wadD);\\n\\n        IDSProxy(dsProxy).execute(\\n            dsProxyActions,\\n            abi.encodeWithSignature(\\\"wipeAndFreeGem(address,address,address,uint256,uint256,uint256)\\\",\\n                manager, gemJoin, daiJoin, cdp, wadC, wadD)\\n        );\\n\\n    }\\n    \\n    struct SwapCollateralForTokensParameters{\\n        address router02; // Uniswap V2 Router\\n        address tokenA; // Token to be swap for debtToken\\n        address tokenB; // Optional in case of Uniswap Pair Collateral\\n        address pairToken;\\n        uint amountToUseToPayDebt; // Amount of tokenA or liquidity to remove \\n                                   // of pair(tokenA, tokenB)\\n        uint amountAMin; // Min amount remaining after swap tokenA for debtToken\\n                         // (this has more sense when we are working with pairs)\\n        uint amountBMin; // Optional in case of Uniswap Pair Collateral\\n        uint deadline;\\n        uint debtToCoverWithTokenA; // amount in debt token\\n        uint debtToCoverWithTokenB; // Optional in case of Uniswap Pair Collateral\\n        address[] pathTokenAToDebtToken; // Path to perform the swap.\\n        address[] pathTokenBToDebtToken; // Optional in case of Uniswap Pair Collateral\\n    }\\n\\n    /**\\n    Preconditions:\\n    - this should have enough amountToUseToPayDebt, \\n        tokenA for debtToCoverWithTokenA and \\n        tokenb for debtToCoverWithTokenB and \\n    - pair(tokenA, tokenB).allowance(this, router02) >= amountToUseToPayDebt.\\n    - tokenA.allowance(this, router02) >= (debtToCoverWithTokenA in token A)\\n    - tokenB.allowance(this, router02) >= (debtToCoverWithTokenB in token B)\\n    - All addresses should correspond with the expected contracts.\\n    - pair(tokenA, tokenB) should be a valid Uniswap V2 pair.\\n    */\\n    function swapCollateralForTokens(\\n        SwapCollateralForTokensParameters memory parameters\\n    ) public returns (uint remainingTokenA, uint remainingTokenB) {\\n        \\n        uint amountA = 0;\\n        uint amountB = 0;\\n        uint amountACoveringDebt = 0;\\n        uint amountBCoveringDebt = 0;\\n\\n        if (parameters.tokenB!=address(0)){\\n\\n            IERC20(parameters.pairToken).safeApprove(parameters.router02, parameters.amountToUseToPayDebt);\\n\\n            (amountA, amountB) = IUniswapV2Router02(parameters.router02).removeLiquidity(      \\n                parameters.tokenA,\\n                parameters.tokenB,\\n                parameters.amountToUseToPayDebt,\\n                0, // Min amount of token A to recive\\n                0, // Min amount of token B to recive\\n                address(this),\\n                parameters.deadline\\n            );\\n\\n            if (parameters.debtToCoverWithTokenB > 0){\\n                \\n                IERC20(parameters.tokenB).safeApprove(parameters.router02, amountB.sub(parameters.amountBMin));\\n\\n                amountBCoveringDebt = IUniswapV2Router02(parameters.router02).swapTokensForExactTokens(\\n                    parameters.debtToCoverWithTokenB,\\n                    amountB.sub(parameters.amountBMin), // amountInMax (Here we validate amountBMin)\\n                    parameters.pathTokenBToDebtToken, // TODO if path empty do not have to swap.\\n                    address(this),\\n                    parameters.deadline\\n                )[0];\\n            }\\n\\n        }else{\\n\\n            // In case we are not dealing with a pair, we need \\n            amountA = parameters.amountToUseToPayDebt;\\n\\n        }\\n\\n        if (parameters.debtToCoverWithTokenA > 0){\\n\\n            IERC20(parameters.tokenA).safeApprove(parameters.router02, amountA.sub(parameters.amountAMin));\\n\\n            amountACoveringDebt = IUniswapV2Router02(parameters.router02).swapTokensForExactTokens(\\n                parameters.debtToCoverWithTokenA,\\n                amountA.sub(parameters.amountAMin), // amountInMax (Here we validate amountAMin)\\n                parameters.pathTokenAToDebtToken, // TODO if path empty do not have to swap.\\n                address(this),\\n                parameters.deadline\\n            )[0];\\n\\n        }\\n\\n        return (\\n            amountA.sub(amountACoveringDebt),\\n            amountB.sub(amountBCoveringDebt)\\n            );\\n\\n    }\\n}\\n\",\"keccak256\":\"0x665db89def046c5d661fb95b858ff8b9834d4d3abb062e6ecf79663aeb7e76a4\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x611520610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c8063397c0f6d14610045578063f151809b14610083575b600080fd5b81801561005157600080fd5b5061006c60048036038101906100679190610fca565b6100ac565b60405161007a929190611241565b60405180910390f35b81801561008f57600080fd5b506100aa60048036038101906100a59190610ec3565b610473565b005b600080600080600080600073ffffffffffffffffffffffffffffffffffffffff16876040015173ffffffffffffffffffffffffffffffffffffffff161461030a5761012487600001518860800151896060015173ffffffffffffffffffffffffffffffffffffffff166105ad9092919063ffffffff16565b866000015173ffffffffffffffffffffffffffffffffffffffff1663baa2abde886020015189604001518a60800151600080308e60e001516040518863ffffffff1660e01b815260040161017e97969594939291906111a2565b6040805180830381600087803b15801561019757600080fd5b505af11580156101ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101cf919061100b565b8094508195505050600087610120015111156103055761022e87600001516102048960c001518661077290919063ffffffff16565b896040015173ffffffffffffffffffffffffffffffffffffffff166105ad9092919063ffffffff16565b866000015173ffffffffffffffffffffffffffffffffffffffff16638803dbee88610120015161026b8a60c001518761077290919063ffffffff16565b8a6101600151308c60e001516040518663ffffffff1660e01b815260040161029795949392919061126a565b600060405180830381600087803b1580156102b157600080fd5b505af11580156102c5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102ee9190610f89565b6000815181106102fa57fe5b602002602001015190505b610312565b866080015193505b6000876101000151111561044057610369876000015161033f8960a001518761077290919063ffffffff16565b896020015173ffffffffffffffffffffffffffffffffffffffff166105ad9092919063ffffffff16565b866000015173ffffffffffffffffffffffffffffffffffffffff16638803dbee8861010001516103a68a60a001518861077290919063ffffffff16565b8a6101400151308c60e001516040518663ffffffff1660e01b81526004016103d295949392919061126a565b600060405180830381600087803b1580156103ec57600080fd5b505af1158015610400573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104299190610f89565b60008151811061043557fe5b602002602001015191505b610453828561077290919063ffffffff16565b610466828561077290919063ffffffff16565b9550955050505050915091565b61049e85838373ffffffffffffffffffffffffffffffffffffffff166105ad9092919063ffffffff16565b8873ffffffffffffffffffffffffffffffffffffffff16631cff79cd898989898989896040516024016104d696959493929190611141565b6040516020818303038152906040527fa6add011000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401610570929190611211565b600060405180830381600087803b15801561058a57600080fd5b505af115801561059e573d6000803e3d6000fd5b50505050505050505050505050565b600081148061067b575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561063e57600080fd5b505afa158015610652573d6000803e3d6000fd5b505050506040513d602081101561066857600080fd5b8101908080519060200190929190505050145b6106d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806114b56036913960400191505060405180910390fd5b61076d8363095ea7b360e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506107bc565b505050565b60006107b483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506108ab565b905092915050565b600061081e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661096b9092919063ffffffff16565b90506000815111156108a65780806020019051602081101561083f57600080fd5b81019080805190602001909291905050506108a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061148b602a913960400191505060405180910390fd5b5b505050565b6000838311158290610958576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561091d578082015181840152602081019050610902565b50505050905090810190601f16801561094a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b606061097a8484600085610983565b90509392505050565b6060824710156109de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806114656026913960400191505060405180910390fd5b6109e785610b2b565b610a59576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310610aa85780518252602082019150602081019050602083039250610a85565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610b0a576040519150601f19603f3d011682016040523d82523d6000602084013e610b0f565b606091505b5091509150610b1f828286610b3e565b92505050949350505050565b600080823b905060008111915050919050565b60608315610b4e57829050610c03565b600083511115610b615782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610bc8578082015181840152602081019050610bad565b50505050905090810190601f168015610bf55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b6000610c1d610c18846112f5565b6112c4565b90508083825260208201905082856020860282011115610c3c57600080fd5b60005b85811015610c6c5781610c528882610ce2565b845260208401935060208301925050600181019050610c3f565b5050509392505050565b6000610c89610c8484611321565b6112c4565b90508083825260208201905082856020860282011115610ca857600080fd5b60005b85811015610cd85781610cbe8882610eae565b845260208401935060208301925050600181019050610cab565b5050509392505050565b600081359050610cf181611436565b92915050565b600082601f830112610d0857600080fd5b8135610d18848260208601610c0a565b91505092915050565b600082601f830112610d3257600080fd5b8151610d42848260208601610c76565b91505092915050565b60006101808284031215610d5e57600080fd5b610d696101806112c4565b90506000610d7984828501610ce2565b6000830152506020610d8d84828501610ce2565b6020830152506040610da184828501610ce2565b6040830152506060610db584828501610ce2565b6060830152506080610dc984828501610e99565b60808301525060a0610ddd84828501610e99565b60a08301525060c0610df184828501610e99565b60c08301525060e0610e0584828501610e99565b60e083015250610100610e1a84828501610e99565b61010083015250610120610e3084828501610e99565b6101208301525061014082013567ffffffffffffffff811115610e5257600080fd5b610e5e84828501610cf7565b6101408301525061016082013567ffffffffffffffff811115610e8057600080fd5b610e8c84828501610cf7565b6101608301525092915050565b600081359050610ea88161144d565b92915050565b600081519050610ebd8161144d565b92915050565b60008060008060008060008060006101208a8c031215610ee257600080fd5b6000610ef08c828d01610ce2565b9950506020610f018c828d01610ce2565b9850506040610f128c828d01610ce2565b9750506060610f238c828d01610ce2565b9650506080610f348c828d01610ce2565b95505060a0610f458c828d01610e99565b94505060c0610f568c828d01610e99565b93505060e0610f678c828d01610e99565b925050610100610f798c828d01610ce2565b9150509295985092959850929598565b600060208284031215610f9b57600080fd5b600082015167ffffffffffffffff811115610fb557600080fd5b610fc184828501610d21565b91505092915050565b600060208284031215610fdc57600080fd5b600082013567ffffffffffffffff811115610ff657600080fd5b61100284828501610d4b565b91505092915050565b6000806040838503121561101e57600080fd5b600061102c85828601610eae565b925050602061103d85828601610eae565b9150509250929050565b6000611053838361105f565b60208301905092915050565b611068816113a2565b82525050565b611077816113a2565b82525050565b60006110888261135d565b6110928185611380565b935061109d8361134d565b8060005b838110156110ce5781516110b58882611047565b97506110c083611373565b9250506001810190506110a1565b5085935050505092915050565b60006110e682611368565b6110f08185611391565b93506111008185602086016113f0565b61110981611425565b840191505092915050565b61111d816113de565b82525050565b61112c816113d4565b82525050565b61113b816113d4565b82525050565b600060c082019050611156600083018961106e565b611163602083018861106e565b611170604083018761106e565b61117d6060830186611123565b61118a6080830185611123565b61119760a0830184611123565b979650505050505050565b600060e0820190506111b7600083018a61106e565b6111c4602083018961106e565b6111d16040830188611123565b6111de6060830187611114565b6111eb6080830186611114565b6111f860a083018561106e565b61120560c0830184611123565b98975050505050505050565b6000604082019050611226600083018561106e565b818103602083015261123881846110db565b90509392505050565b60006040820190506112566000830185611132565b6112636020830184611132565b9392505050565b600060a08201905061127f6000830188611123565b61128c6020830187611123565b818103604083015261129e818661107d565b90506112ad606083018561106e565b6112ba6080830184611123565b9695505050505050565b6000604051905081810181811067ffffffffffffffff821117156112eb576112ea611423565b5b8060405250919050565b600067ffffffffffffffff8211156113105761130f611423565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561133c5761133b611423565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006113ad826113b4565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006113e9826113d4565b9050919050565b60005b8381101561140e5780820151818401526020810190506113f3565b8381111561141d576000848401525b50505050565bfe5b6000601f19601f8301169050919050565b61143f816113a2565b811461144a57600080fd5b50565b611456816113d4565b811461146157600080fd5b5056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220eda3f9c62242ed81b217c6988f94d40f120fb12ef30acebd56c3258d149597cc64736f6c63430007060033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c8063397c0f6d14610045578063f151809b14610083575b600080fd5b81801561005157600080fd5b5061006c60048036038101906100679190610fca565b6100ac565b60405161007a929190611241565b60405180910390f35b81801561008f57600080fd5b506100aa60048036038101906100a59190610ec3565b610473565b005b600080600080600080600073ffffffffffffffffffffffffffffffffffffffff16876040015173ffffffffffffffffffffffffffffffffffffffff161461030a5761012487600001518860800151896060015173ffffffffffffffffffffffffffffffffffffffff166105ad9092919063ffffffff16565b866000015173ffffffffffffffffffffffffffffffffffffffff1663baa2abde886020015189604001518a60800151600080308e60e001516040518863ffffffff1660e01b815260040161017e97969594939291906111a2565b6040805180830381600087803b15801561019757600080fd5b505af11580156101ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101cf919061100b565b8094508195505050600087610120015111156103055761022e87600001516102048960c001518661077290919063ffffffff16565b896040015173ffffffffffffffffffffffffffffffffffffffff166105ad9092919063ffffffff16565b866000015173ffffffffffffffffffffffffffffffffffffffff16638803dbee88610120015161026b8a60c001518761077290919063ffffffff16565b8a6101600151308c60e001516040518663ffffffff1660e01b815260040161029795949392919061126a565b600060405180830381600087803b1580156102b157600080fd5b505af11580156102c5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102ee9190610f89565b6000815181106102fa57fe5b602002602001015190505b610312565b866080015193505b6000876101000151111561044057610369876000015161033f8960a001518761077290919063ffffffff16565b896020015173ffffffffffffffffffffffffffffffffffffffff166105ad9092919063ffffffff16565b866000015173ffffffffffffffffffffffffffffffffffffffff16638803dbee8861010001516103a68a60a001518861077290919063ffffffff16565b8a6101400151308c60e001516040518663ffffffff1660e01b81526004016103d295949392919061126a565b600060405180830381600087803b1580156103ec57600080fd5b505af1158015610400573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104299190610f89565b60008151811061043557fe5b602002602001015191505b610453828561077290919063ffffffff16565b610466828561077290919063ffffffff16565b9550955050505050915091565b61049e85838373ffffffffffffffffffffffffffffffffffffffff166105ad9092919063ffffffff16565b8873ffffffffffffffffffffffffffffffffffffffff16631cff79cd898989898989896040516024016104d696959493929190611141565b6040516020818303038152906040527fa6add011000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401610570929190611211565b600060405180830381600087803b15801561058a57600080fd5b505af115801561059e573d6000803e3d6000fd5b50505050505050505050505050565b600081148061067b575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561063e57600080fd5b505afa158015610652573d6000803e3d6000fd5b505050506040513d602081101561066857600080fd5b8101908080519060200190929190505050145b6106d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806114b56036913960400191505060405180910390fd5b61076d8363095ea7b360e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506107bc565b505050565b60006107b483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506108ab565b905092915050565b600061081e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661096b9092919063ffffffff16565b90506000815111156108a65780806020019051602081101561083f57600080fd5b81019080805190602001909291905050506108a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061148b602a913960400191505060405180910390fd5b5b505050565b6000838311158290610958576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561091d578082015181840152602081019050610902565b50505050905090810190601f16801561094a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b606061097a8484600085610983565b90509392505050565b6060824710156109de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806114656026913960400191505060405180910390fd5b6109e785610b2b565b610a59576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310610aa85780518252602082019150602081019050602083039250610a85565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610b0a576040519150601f19603f3d011682016040523d82523d6000602084013e610b0f565b606091505b5091509150610b1f828286610b3e565b92505050949350505050565b600080823b905060008111915050919050565b60608315610b4e57829050610c03565b600083511115610b615782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610bc8578082015181840152602081019050610bad565b50505050905090810190601f168015610bf55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b6000610c1d610c18846112f5565b6112c4565b90508083825260208201905082856020860282011115610c3c57600080fd5b60005b85811015610c6c5781610c528882610ce2565b845260208401935060208301925050600181019050610c3f565b5050509392505050565b6000610c89610c8484611321565b6112c4565b90508083825260208201905082856020860282011115610ca857600080fd5b60005b85811015610cd85781610cbe8882610eae565b845260208401935060208301925050600181019050610cab565b5050509392505050565b600081359050610cf181611436565b92915050565b600082601f830112610d0857600080fd5b8135610d18848260208601610c0a565b91505092915050565b600082601f830112610d3257600080fd5b8151610d42848260208601610c76565b91505092915050565b60006101808284031215610d5e57600080fd5b610d696101806112c4565b90506000610d7984828501610ce2565b6000830152506020610d8d84828501610ce2565b6020830152506040610da184828501610ce2565b6040830152506060610db584828501610ce2565b6060830152506080610dc984828501610e99565b60808301525060a0610ddd84828501610e99565b60a08301525060c0610df184828501610e99565b60c08301525060e0610e0584828501610e99565b60e083015250610100610e1a84828501610e99565b61010083015250610120610e3084828501610e99565b6101208301525061014082013567ffffffffffffffff811115610e5257600080fd5b610e5e84828501610cf7565b6101408301525061016082013567ffffffffffffffff811115610e8057600080fd5b610e8c84828501610cf7565b6101608301525092915050565b600081359050610ea88161144d565b92915050565b600081519050610ebd8161144d565b92915050565b60008060008060008060008060006101208a8c031215610ee257600080fd5b6000610ef08c828d01610ce2565b9950506020610f018c828d01610ce2565b9850506040610f128c828d01610ce2565b9750506060610f238c828d01610ce2565b9650506080610f348c828d01610ce2565b95505060a0610f458c828d01610e99565b94505060c0610f568c828d01610e99565b93505060e0610f678c828d01610e99565b925050610100610f798c828d01610ce2565b9150509295985092959850929598565b600060208284031215610f9b57600080fd5b600082015167ffffffffffffffff811115610fb557600080fd5b610fc184828501610d21565b91505092915050565b600060208284031215610fdc57600080fd5b600082013567ffffffffffffffff811115610ff657600080fd5b61100284828501610d4b565b91505092915050565b6000806040838503121561101e57600080fd5b600061102c85828601610eae565b925050602061103d85828601610eae565b9150509250929050565b6000611053838361105f565b60208301905092915050565b611068816113a2565b82525050565b611077816113a2565b82525050565b60006110888261135d565b6110928185611380565b935061109d8361134d565b8060005b838110156110ce5781516110b58882611047565b97506110c083611373565b9250506001810190506110a1565b5085935050505092915050565b60006110e682611368565b6110f08185611391565b93506111008185602086016113f0565b61110981611425565b840191505092915050565b61111d816113de565b82525050565b61112c816113d4565b82525050565b61113b816113d4565b82525050565b600060c082019050611156600083018961106e565b611163602083018861106e565b611170604083018761106e565b61117d6060830186611123565b61118a6080830185611123565b61119760a0830184611123565b979650505050505050565b600060e0820190506111b7600083018a61106e565b6111c4602083018961106e565b6111d16040830188611123565b6111de6060830187611114565b6111eb6080830186611114565b6111f860a083018561106e565b61120560c0830184611123565b98975050505050505050565b6000604082019050611226600083018561106e565b818103602083015261123881846110db565b90509392505050565b60006040820190506112566000830185611132565b6112636020830184611132565b9392505050565b600060a08201905061127f6000830188611123565b61128c6020830187611123565b818103604083015261129e818661107d565b90506112ad606083018561106e565b6112ba6080830184611123565b9695505050505050565b6000604051905081810181811067ffffffffffffffff821117156112eb576112ea611423565b5b8060405250919050565b600067ffffffffffffffff8211156113105761130f611423565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561133c5761133b611423565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006113ad826113b4565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006113e9826113d4565b9050919050565b60005b8381101561140e5780820151818401526020810190506113f3565b8381111561141d576000848401525b50505050565bfe5b6000601f19601f8301169050919050565b61143f816113a2565b811461144a57600080fd5b50565b611456816113d4565b811461146157600080fd5b5056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220eda3f9c62242ed81b217c6988f94d40f120fb12ef30acebd56c3258d149597cc64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "swapCollateralForTokens(UnifiLibrary.SwapCollateralForTokensParameters)": {
        "notice": "Preconditions: - this should have enough amountToUseToPayDebt,  tokenA for debtToCoverWithTokenA and  tokenb for debtToCoverWithTokenB and  - pair(tokenA, tokenB).allowance(this, router02) >= amountToUseToPayDebt. - tokenA.allowance(this, router02) >= (debtToCoverWithTokenA in token A) - tokenB.allowance(this, router02) >= (debtToCoverWithTokenB in token B) - All addresses should correspond with the expected contracts. - pair(tokenA, tokenB) should be a valid Uniswap V2 pair."
      },
      "wipeAndFreeGem(address,address,address,address,address,uint256,uint256,uint256,address)": {
        "notice": "Preconditions: - this should have enough `wadD` DAI. - DAI.allowance(this, daiJoin) >= wadD - All addresses should correspond with the expected contracts."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}